{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dashboard-core-components",
  "type": "registry:block",
  "title": "Dashboard Core Components",
  "description": "Core UI components used across the dashboard.",
  "files": [
    {
      "path": "src/components/Badge.tsx",
      "content": "// Tremor Raw Badge [v0.0.0]\n\nimport React from \"react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/lib/utils\"\n\nconst badgeVariants = tv({\n  base: cx(\n    \"inline-flex items-center gap-x-1 whitespace-nowrap rounded px-1.5 py-0.5 text-xs font-semibold ring-1\",\n  ),\n  variants: {\n    variant: {\n      default: [\n        \"bg-indigo-50 text-indigo-800 ring-indigo-500/30\",\n        \"dark:bg-indigo-400/10 dark:text-indigo-400 dark:ring-indigo-400/30\",\n      ],\n      neutral: [\n        \"bg-gray-50 text-gray-700 ring-gray-500/30\",\n        \"dark:bg-gray-400/10 dark:text-gray-300 dark:ring-gray-400/20\",\n      ],\n      success: [\n        \"bg-emerald-50 text-emerald-800 ring-emerald-600/30\",\n        \"dark:bg-emerald-400/10 dark:text-emerald-400 dark:ring-emerald-400/20\",\n      ],\n      error: [\n        \"bg-red-50 text-red-800 ring-red-600/20\",\n        \"dark:bg-red-400/10 dark:text-red-400 dark:ring-red-400/20\",\n      ],\n      warning: [\n        \"bg-yellow-50 text-yellow-800 ring-yellow-600/30\",\n        \"dark:bg-yellow-400/10 dark:text-yellow-500 dark:ring-yellow-400/20\",\n      ],\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n})\n\ninterface BadgeProps\n  extends React.ComponentPropsWithoutRef<\"span\">,\n    VariantProps<typeof badgeVariants> {}\n\nconst Badge = React.forwardRef<HTMLSpanElement, BadgeProps>(\n  ({ className, variant, ...props }: BadgeProps, forwardedRef) => {\n    return (\n      <span\n        ref={forwardedRef}\n        className={cx(badgeVariants({ variant }), className)}\n        {...props}\n      />\n    )\n  },\n)\n\nBadge.displayName = \"Badge\"\n\nexport { Badge, badgeVariants, type BadgeProps }\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/Calendar.tsx",
      "content": "// Tremor Raw Calendar [v0.0.4]\n\n\"use client\"\n\nimport {\n  RiArrowLeftDoubleLine,\n  RiArrowLeftSLine,\n  RiArrowRightDoubleLine,\n  RiArrowRightSLine,\n} from \"@remixicon/react\"\nimport { addYears, format, isSameMonth } from \"date-fns\"\nimport * as React from \"react\"\nimport {\n  DayPicker,\n  useDayPicker,\n  useDayRender,\n  useNavigation,\n  type DayPickerRangeProps,\n  type DayPickerSingleProps,\n  type DayProps,\n  type Matcher,\n} from \"react-day-picker\"\n\nimport { cx, focusRing } from \"@/lib/utils\"\n\ninterface NavigationButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  onClick: () => void\n  icon: React.ElementType\n  disabled?: boolean\n}\n\nconst NavigationButton = React.forwardRef<\n  HTMLButtonElement,\n  NavigationButtonProps\n>(\n  (\n    { onClick, icon, disabled, ...props }: NavigationButtonProps,\n    forwardedRef,\n  ) => {\n    const Icon = icon\n    return (\n      <button\n        ref={forwardedRef}\n        type=\"button\"\n        disabled={disabled}\n        className={cx(\n          \"flex size-8 shrink-0 select-none items-center justify-center rounded border p-1 outline-none transition sm:size-[30px]\",\n          // text color\n          \"text-gray-600 hover:text-gray-800\",\n          \"dark:text-gray-400 hover:dark:text-gray-200\",\n          // border color\n          \"border-gray-300 dark:border-gray-800\",\n          // background color\n          \"hover:bg-gray-50 active:bg-gray-100\",\n          \"hover:dark:bg-gray-900 active:dark:bg-gray-800\",\n          // disabled\n          \"disabled:pointer-events-none\",\n          \"disabled:border-gray-200 disabled:dark:border-gray-800\",\n          \"disabled:text-gray-400 disabled:dark:text-gray-600\",\n          focusRing,\n        )}\n        onClick={onClick}\n        {...props}\n      >\n        <Icon className=\"size-full shrink-0\" />\n      </button>\n    )\n  },\n)\n\nNavigationButton.displayName = \"NavigationButton\"\n\ntype OmitKeys<T, K extends keyof T> = {\n  [P in keyof T as P extends K ? never : P]: T[P]\n}\n\ntype KeysToOmit = \"showWeekNumber\" | \"captionLayout\" | \"mode\"\n\ntype SingleProps = OmitKeys<DayPickerSingleProps, KeysToOmit>\ntype RangeProps = OmitKeys<DayPickerRangeProps, KeysToOmit>\n\ntype CalendarProps =\n  | ({\n      mode: \"single\"\n    } & SingleProps)\n  | ({\n      mode?: undefined\n    } & SingleProps)\n  | ({\n      mode: \"range\"\n    } & RangeProps)\n\nconst Calendar = ({\n  mode = \"single\",\n  weekStartsOn = 1,\n  numberOfMonths = 1,\n  enableYearNavigation = false,\n  disableNavigation,\n  locale,\n  className,\n  classNames,\n  ...props\n}: CalendarProps & { enableYearNavigation?: boolean }) => {\n  return (\n    <DayPicker\n      mode={mode}\n      weekStartsOn={weekStartsOn}\n      numberOfMonths={numberOfMonths}\n      locale={locale}\n      showOutsideDays={numberOfMonths === 1}\n      className={cx(className)}\n      classNames={{\n        months: \"flex space-y-0\",\n        month: \"space-y-4 p-3\",\n        nav: \"gap-1 flex items-center rounded-full size-full justify-between p-4\",\n        table: \"w-full border-collapse space-y-1\",\n        head_cell:\n          \"w-9 font-medium text-sm sm:text-xs text-center text-gray-400 dark:text-gray-600 pb-2\",\n        row: \"w-full mt-0.5\",\n        cell: cx(\n          \"relative p-0 text-center focus-within:relative\",\n          \"text-gray-900 dark:text-gray-50\",\n        ),\n        day: cx(\n          \"size-9 rounded text-sm text-gray-900 focus:z-10 dark:text-gray-50\",\n          \"hover:bg-gray-200 hover:dark:bg-gray-700\",\n          focusRing,\n        ),\n        day_today: \"font-semibold\",\n        day_selected: cx(\n          \"rounded\",\n          \"aria-selected:bg-indigo-600 aria-selected:text-gray-50\",\n          \"dark:aria-selected:bg-indigo-500 dark:aria-selected:text-gray-50\",\n        ),\n        day_disabled:\n          \"!text-gray-300 dark:!text-gray-700 line-through disabled:hover:bg-transparent\",\n        day_outside: \"text-gray-400 dark:text-gray-600\",\n        day_range_middle: cx(\n          \"!rounded-none\",\n          \"aria-selected:!bg-gray-100 aria-selected:!text-gray-900\",\n          \"dark:aria-selected:!bg-gray-900 dark:aria-selected:!text-gray-50\",\n        ),\n        day_range_start: \"rounded-r-none !rounded-l\",\n        day_range_end: \"rounded-l-none !rounded-r\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: () => (\n          <RiArrowLeftSLine aria-hidden=\"true\" className=\"size-4\" />\n        ),\n        IconRight: () => (\n          <RiArrowRightSLine aria-hidden=\"true\" className=\"size-4\" />\n        ),\n        Caption: ({ ...props }) => {\n          const {\n            goToMonth,\n            nextMonth,\n            previousMonth,\n            currentMonth,\n            displayMonths,\n          } = useNavigation()\n          const { numberOfMonths, fromDate, toDate } = useDayPicker()\n\n          const displayIndex = displayMonths.findIndex((month) =>\n            isSameMonth(props.displayMonth, month),\n          )\n          const isFirst = displayIndex === 0\n          const isLast = displayIndex === displayMonths.length - 1\n\n          const hideNextButton = numberOfMonths > 1 && (isFirst || !isLast)\n          const hidePreviousButton = numberOfMonths > 1 && (isLast || !isFirst)\n\n          const goToPreviousYear = () => {\n            const targetMonth = addYears(currentMonth, -1)\n            if (\n              previousMonth &&\n              (!fromDate || targetMonth.getTime() >= fromDate.getTime())\n            ) {\n              goToMonth(targetMonth)\n            }\n          }\n\n          const goToNextYear = () => {\n            const targetMonth = addYears(currentMonth, 1)\n            if (\n              nextMonth &&\n              (!toDate || targetMonth.getTime() <= toDate.getTime())\n            ) {\n              goToMonth(targetMonth)\n            }\n          }\n\n          return (\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-1\">\n                {enableYearNavigation && !hidePreviousButton && (\n                  <NavigationButton\n                    disabled={\n                      disableNavigation ||\n                      !previousMonth ||\n                      (fromDate &&\n                        addYears(currentMonth, -1).getTime() <\n                          fromDate.getTime())\n                    }\n                    aria-label=\"Go to previous year\"\n                    onClick={goToPreviousYear}\n                    icon={RiArrowLeftDoubleLine}\n                  />\n                )}\n                {!hidePreviousButton && (\n                  <NavigationButton\n                    disabled={disableNavigation || !previousMonth}\n                    aria-label=\"Go to previous month\"\n                    onClick={() => previousMonth && goToMonth(previousMonth)}\n                    icon={RiArrowLeftSLine}\n                  />\n                )}\n              </div>\n\n              <div\n                role=\"presentation\"\n                aria-live=\"polite\"\n                className=\"text-sm font-medium capitalize tabular-nums text-gray-900 dark:text-gray-50\"\n              >\n                {format(props.displayMonth, \"LLLL yyy\", { locale })}\n              </div>\n\n              <div className=\"flex items-center gap-1\">\n                {!hideNextButton && (\n                  <NavigationButton\n                    disabled={disableNavigation || !nextMonth}\n                    aria-label=\"Go to next month\"\n                    onClick={() => nextMonth && goToMonth(nextMonth)}\n                    icon={RiArrowRightSLine}\n                  />\n                )}\n                {enableYearNavigation && !hideNextButton && (\n                  <NavigationButton\n                    disabled={\n                      disableNavigation ||\n                      !nextMonth ||\n                      (toDate &&\n                        addYears(currentMonth, 1).getTime() > toDate.getTime())\n                    }\n                    aria-label=\"Go to next year\"\n                    onClick={goToNextYear}\n                    icon={RiArrowRightDoubleLine}\n                  />\n                )}\n              </div>\n            </div>\n          )\n        },\n        Day: ({ date, displayMonth }: DayProps) => {\n          const buttonRef = React.useRef<HTMLButtonElement>(null)\n          const { activeModifiers, buttonProps, divProps, isButton, isHidden } =\n            useDayRender(date, displayMonth, buttonRef)\n\n          const { selected, today, disabled, range_middle } = activeModifiers\n\n          if (isHidden) {\n            return <></>\n          }\n\n          if (!isButton) {\n            return (\n              <div\n                {...divProps}\n                className={cx(\n                  \"flex items-center justify-center\",\n                  divProps.className,\n                )}\n              />\n            )\n          }\n\n          const {\n            children: buttonChildren,\n            className: buttonClassName,\n            ...buttonPropsRest\n          } = buttonProps\n\n          return (\n            <button\n              ref={buttonRef}\n              {...buttonPropsRest}\n              type=\"button\"\n              className={cx(\"relative\", buttonClassName)}\n            >\n              {buttonChildren}\n              {today && (\n                <span\n                  className={cx(\n                    \"absolute inset-x-1/2 bottom-1.5 h-0.5 w-4 -translate-x-1/2 rounded-[2px]\",\n                    {\n                      \"bg-blue-500 dark:bg-blue-500\": !selected,\n                      \"!bg-white dark:!bg-gray-950\": selected,\n                      \"!bg-gray-400 dark:!bg-gray-600\":\n                        selected && range_middle,\n                      \"bg-gray-400 text-gray-400 dark:bg-gray-400 dark:text-gray-600\":\n                        disabled,\n                    },\n                  )}\n                />\n              )}\n            </button>\n          )\n        },\n      }}\n      {...(props as SingleProps & RangeProps)}\n    />\n  )\n}\n\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar, type Matcher }\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/DatePicker.tsx",
      "content": "// Tremor Date Picker [v1.0.5]\n\n\"use client\"\n\nimport { Time } from \"@internationalized/date\"\nimport * as PopoverPrimitives from \"@radix-ui/react-popover\"\nimport {\n  AriaTimeFieldProps,\n  TimeValue,\n  useDateSegment,\n  useTimeField,\n} from \"@react-aria/datepicker\"\nimport {\n  useTimeFieldState,\n  type DateFieldState,\n  type DateSegment,\n} from \"@react-stately/datepicker\"\nimport { RiCalendar2Fill, RiSubtractFill } from \"@remixicon/react\"\nimport { format, type Locale } from \"date-fns\"\nimport { enUS } from \"date-fns/locale\"\nimport * as React from \"react\"\nimport { tv, VariantProps } from \"tailwind-variants\"\n\nimport { cx, focusInput, focusRing, hasErrorInput } from \"@/lib/utils\"\n\nimport { Button } from \"./Button\"\nimport { Calendar as CalendarPrimitive, type Matcher } from \"./Calendar\"\n\n//#region TimeInput\n// ============================================================================\n\nconst isBrowserLocaleClockType24h = () => {\n  const language =\n    typeof window !== \"undefined\" ? window.navigator.language : \"en-US\"\n\n  const hr = new Intl.DateTimeFormat(language, {\n    hour: \"numeric\",\n  }).format()\n\n  return Number.isInteger(Number(hr))\n}\n\ntype TimeSegmentProps = {\n  segment: DateSegment\n  state: DateFieldState\n}\n\nconst TimeSegment = ({ segment, state }: TimeSegmentProps) => {\n  const ref = React.useRef<HTMLDivElement>(null)\n\n  const { segmentProps } = useDateSegment(segment, state, ref)\n\n  const isColon = segment.type === \"literal\" && segment.text === \":\"\n  const isSpace = segment.type === \"literal\" && segment.text === \" \"\n\n  const isDecorator = isColon || isSpace\n\n  return (\n    <div\n      {...segmentProps}\n      ref={ref}\n      className={cx(\n        // base\n        \"relative block w-full appearance-none rounded-md border px-2.5 py-1.5 text-left uppercase tabular-nums shadow-sm outline-none transition sm:text-sm\",\n        // border color\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        // focus\n        focusInput,\n        // invalid (optional)\n        \"invalid:border-red-500 invalid:ring-2 invalid:ring-red-200 group-aria-[invalid=true]/time-input:border-red-500 group-aria-[invalid=true]/time-input:ring-2 group-aria-[invalid=true]/time-input:ring-red-200 group-aria-[invalid=true]/time-input:dark:ring-red-400/20\",\n        {\n          \"!w-fit border-none bg-transparent px-0 text-gray-400 shadow-none\":\n            isDecorator,\n          hidden: isSpace,\n          \"border-gray-300 bg-gray-100 text-gray-400 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-500\":\n            state.isDisabled,\n          \"!bg-transparent !text-gray-400\": !segment.isEditable,\n        },\n      )}\n    >\n      <span\n        aria-hidden=\"true\"\n        className={cx(\n          \"pointer-events-none block w-full text-left text-gray-700 sm:text-sm\",\n          {\n            hidden: !segment.isPlaceholder,\n            \"h-0\": !segment.isPlaceholder,\n          },\n        )}\n      >\n        {segment.placeholder}\n      </span>\n      {segment.isPlaceholder ? \" \" : segment.text}\n    </div>\n  )\n}\n\ntype TimeInputProps = Omit<\n  AriaTimeFieldProps<TimeValue>,\n  \"label\" | \"shouldForceLeadingZeros\" | \"description\" | \"errorMessage\"\n>\n\nconst TimeInput = React.forwardRef<HTMLDivElement, TimeInputProps>(\n  ({ hourCycle, ...props }: TimeInputProps, ref) => {\n    const innerRef = React.useRef<HTMLDivElement>(null)\n\n    React.useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n      ref,\n      () => innerRef?.current,\n    )\n\n    const locale = window !== undefined ? window.navigator.language : \"en-US\"\n\n    const state = useTimeFieldState({\n      hourCycle: hourCycle,\n      locale: locale,\n      shouldForceLeadingZeros: true,\n      autoFocus: true,\n      ...props,\n    })\n\n    const { fieldProps } = useTimeField(\n      {\n        ...props,\n        hourCycle: hourCycle,\n        shouldForceLeadingZeros: true,\n      },\n      state,\n      innerRef,\n    )\n\n    return (\n      <div\n        {...fieldProps}\n        ref={innerRef}\n        className=\"group/time-input inline-flex w-full gap-x-2\"\n      >\n        {state.segments.map((segment, i) => (\n          <TimeSegment key={i} segment={segment} state={state} />\n        ))}\n      </div>\n    )\n  },\n)\nTimeInput.displayName = \"TimeInput\"\n\n//#region Trigger\n// ============================================================================\n\nconst triggerStyles = tv({\n  base: [\n    // base\n    \"peer flex w-full cursor-pointer appearance-none items-center gap-x-2 truncate rounded-md border px-3 py-2 shadow-sm outline-none transition-all sm:text-sm\",\n    // background color\n    \"bg-white dark:bg-gray-950\",\n    // border color\n    \"border-gray-300 dark:border-gray-800\",\n    // text color\n    \"text-gray-900 dark:text-gray-50\",\n    // placeholder color\n    \"placeholder-gray-400 dark:placeholder-gray-500\",\n    // hover\n    \"hover:bg-gray-50 hover:dark:bg-gray-950/50\",\n    // disabled\n    \"disabled:pointer-events-none\",\n    \"disabled:bg-gray-100 disabled:text-gray-400\",\n    \"disabled:dark:border-gray-800 disabled:dark:bg-gray-800 disabled:dark:text-gray-500\",\n    // focus\n    focusInput,\n    // invalid (optional)\n    // \"aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500\"\n  ],\n  variants: {\n    hasError: {\n      true: hasErrorInput,\n    },\n  },\n})\n\ninterface TriggerProps\n  extends React.ComponentProps<\"button\">,\n    VariantProps<typeof triggerStyles> {\n  placeholder?: string\n}\n\nconst Trigger = React.forwardRef<HTMLButtonElement, TriggerProps>(\n  (\n    { className, children, placeholder, hasError, ...props }: TriggerProps,\n    forwardedRef,\n  ) => {\n    return (\n      <PopoverPrimitives.Trigger asChild>\n        <button\n          ref={forwardedRef}\n          className={cx(triggerStyles({ hasError }), className)}\n          {...props}\n        >\n          <RiCalendar2Fill className=\"size-5 shrink-0 text-gray-400 dark:text-gray-600\" />\n          <span className=\"flex-1 overflow-hidden text-ellipsis whitespace-nowrap text-left text-gray-900 dark:text-gray-50\">\n            {children ? (\n              children\n            ) : placeholder ? (\n              <span className=\"text-gray-400 dark:text-gray-600\">\n                {placeholder}\n              </span>\n            ) : null}\n          </span>\n        </button>\n      </PopoverPrimitives.Trigger>\n    )\n  },\n)\n\nTrigger.displayName = \"DatePicker.Trigger\"\n\n//#region Popover\n// ============================================================================\n\nconst CalendarPopover = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Content>,\n  React.ComponentProps<typeof PopoverPrimitives.Content>\n>(({ align, className, children, ...props }, forwardedRef) => {\n  return (\n    <PopoverPrimitives.Portal>\n      <PopoverPrimitives.Content\n        ref={forwardedRef}\n        sideOffset={10}\n        side=\"bottom\"\n        align={align}\n        avoidCollisions\n        onOpenAutoFocus={(e) => e.preventDefault()}\n        className={cx(\n          // base\n          \"relative z-50 w-fit rounded-md border text-sm shadow-xl shadow-black/[2.5%]\",\n          // widths\n          \"min-w-[calc(var(--radix-select-trigger-width)-2px)] max-w-[95vw]\",\n          // border color\n          \"border-gray-200 dark:border-gray-800\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n          // transition\n          \"will-change-[transform,opacity]\",\n          \"data-[state=closed]:animate-hide\",\n          \"data-[state=open]:data-[side=bottom]:animate-slideDownAndFade data-[state=open]:data-[side=left]:animate-slideLeftAndFade data-[state=open]:data-[side=right]:animate-slideRightAndFade data-[state=open]:data-[side=top]:animate-slideUpAndFade\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n      </PopoverPrimitives.Content>\n    </PopoverPrimitives.Portal>\n  )\n})\n\nCalendarPopover.displayName = \"DatePicker.CalendarPopover\"\n\n//#region Preset\n// ============================================================================\n\ntype DateRange = {\n  from: Date | undefined\n  to?: Date | undefined\n}\n\ninterface Preset {\n  label: string\n}\n\ninterface DatePreset extends Preset {\n  date: Date\n}\n\ninterface DateRangePreset extends Preset {\n  dateRange: DateRange\n}\n\ntype PresetContainerProps<TPreset extends Preset, TValue> = {\n  presets: TPreset[]\n  onSelect: (value: TValue) => void\n  currentValue?: TValue\n}\n\nconst PresetContainer = <TPreset extends Preset, TValue>({\n  // Available preset configurations\n  presets,\n  // Event handler when a preset is selected\n  onSelect,\n  // Currently selected preset\n  currentValue,\n}: PresetContainerProps<TPreset, TValue>) => {\n  const isDateRangePresets = (preset: any): preset is DateRangePreset => {\n    return \"dateRange\" in preset\n  }\n  const isDatePresets = (preset: any): preset is DatePreset => {\n    return \"date\" in preset\n  }\n\n  const handleClick = (preset: TPreset) => {\n    if (isDateRangePresets(preset)) {\n      onSelect(preset.dateRange as TValue)\n    } else if (isDatePresets(preset)) {\n      onSelect(preset.date as TValue)\n    }\n  }\n\n  const compareDates = (date1: Date, date2: Date) => {\n    return (\n      date1.getDate() === date2.getDate() &&\n      date1.getMonth() === date2.getMonth() &&\n      date1.getFullYear() === date2.getFullYear()\n    )\n  }\n\n  const compareRanges = (range1: DateRange, range2: DateRange) => {\n    const from1 = range1.from\n    const from2 = range2.from\n\n    let equalFrom = false\n\n    if (from1 && from2) {\n      const sameFrom = compareDates(from1, from2)\n\n      if (sameFrom) {\n        equalFrom = true\n      }\n    }\n\n    const to1 = range1.to\n    const to2 = range2.to\n\n    let equalTo = false\n\n    if (to1 && to2) {\n      const sameTo = compareDates(to1, to2)\n\n      if (sameTo) {\n        equalTo = true\n      }\n    }\n\n    return equalFrom && equalTo\n  }\n\n  const matchesCurrent = (preset: TPreset) => {\n    if (isDateRangePresets(preset)) {\n      const value = currentValue as DateRange | undefined\n\n      return value && compareRanges(value, preset.dateRange)\n    } else if (isDatePresets(preset)) {\n      const value = currentValue as Date | undefined\n\n      return value && compareDates(value, preset.date)\n    }\n\n    return false\n  }\n\n  return (\n    <ul className=\"flex items-start gap-x-2 sm:flex-col\">\n      {presets.map((preset, index) => {\n        return (\n          <li key={index} className=\"sm:w-full sm:py-px\">\n            <button\n              title={preset.label}\n              className={cx(\n                // base\n                \"relative w-full overflow-hidden text-ellipsis whitespace-nowrap rounded border px-2.5 py-1.5 text-left text-base shadow-sm outline-none transition-all sm:border-none sm:py-2 sm:text-sm sm:shadow-none\",\n                // text color\n                \"text-gray-700 dark:text-gray-300\",\n                // border color\n                \"border-gray-200 dark:border-gray-800\",\n                // focus\n                focusRing,\n                // background color\n                \"focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900\",\n                \"hover:bg-gray-100 hover:dark:bg-gray-900\",\n                {\n                  \"bg-gray-100 dark:bg-gray-900\": matchesCurrent(preset),\n                },\n              )}\n              onClick={() => handleClick(preset)}\n              aria-label={`Select ${preset.label}`}\n            >\n              <span>{preset.label}</span>\n            </button>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n\nPresetContainer.displayName = \"DatePicker.PresetContainer\"\n\n//#region Date Picker Shared\n// ============================================================================\n\nconst formatDate = (\n  date: Date,\n  locale: Locale,\n  includeTime?: boolean,\n): string => {\n  const usesAmPm = !isBrowserLocaleClockType24h()\n  let dateString: string\n\n  if (includeTime) {\n    dateString = usesAmPm\n      ? format(date, \"dd MMM, yyyy h:mm a\", { locale })\n      : format(date, \"dd MMM, yyyy HH:mm\", { locale })\n  } else {\n    dateString = format(date, \"dd MMM, yyyy\", { locale })\n  }\n\n  return dateString\n}\n\ntype CalendarProps = {\n  fromYear?: number\n  toYear?: number\n  fromMonth?: Date\n  toMonth?: Date\n  fromDay?: Date\n  toDay?: Date\n  fromDate?: Date\n  toDate?: Date\n  locale?: Locale\n}\n\ntype Translations = {\n  cancel?: string\n  apply?: string\n  start?: string\n  end?: string\n  range?: string\n}\n\ninterface PickerProps extends CalendarProps {\n  className?: string\n  disabled?: boolean\n  disabledDays?: Matcher | Matcher[] | undefined\n  required?: boolean\n  showTimePicker?: boolean\n  placeholder?: string\n  enableYearNavigation?: boolean\n  disableNavigation?: boolean\n  hasError?: boolean\n  id?: string\n  // Customize the date picker for different languages.\n  translations?: Translations\n  align?: \"center\" | \"end\" | \"start\"\n  \"aria-invalid\"?: boolean\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  \"aria-required\"?: boolean\n}\n\n//#region Single Date Picker\n// ============================================================================\n\ninterface SingleProps extends Omit<PickerProps, \"translations\"> {\n  presets?: DatePreset[]\n  defaultValue?: Date\n  value?: Date\n  onChange?: (date: Date | undefined) => void\n  translations?: Omit<Translations, \"range\">\n}\n\nconst SingleDatePicker = ({\n  defaultValue,\n  value,\n  onChange,\n  presets,\n  disabled,\n  disabledDays,\n  disableNavigation,\n  className,\n  showTimePicker,\n  placeholder = \"Select date\",\n  hasError,\n  translations,\n  enableYearNavigation = false,\n  locale = enUS,\n  align = \"center\",\n  ...props\n}: SingleProps) => {\n  const [open, setOpen] = React.useState(false)\n  const [date, setDate] = React.useState<Date | undefined>(\n    value ?? defaultValue ?? undefined,\n  )\n  const [month, setMonth] = React.useState<Date | undefined>(date)\n\n  const [time, setTime] = React.useState<TimeValue | null>(\n    value\n      ? new Time(value.getHours(), value.getMinutes())\n      : defaultValue\n        ? new Time(defaultValue.getHours(), defaultValue.getMinutes())\n        : new Time(0, 0),\n  )\n\n  const initialDate = React.useMemo(() => {\n    return date\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open])\n\n  React.useEffect(() => {\n    setDate(value ?? defaultValue ?? undefined)\n  }, [value, defaultValue])\n\n  React.useEffect(() => {\n    if (date) {\n      setMonth(date)\n    }\n  }, [date])\n\n  React.useEffect(() => {\n    if (!open) {\n      setMonth(date)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open])\n\n  const onCancel = () => {\n    setDate(initialDate)\n    setTime(\n      initialDate\n        ? new Time(initialDate.getHours(), initialDate.getMinutes())\n        : new Time(0, 0),\n    )\n    setOpen(false)\n  }\n\n  const onOpenChange = (open: boolean) => {\n    if (!open) {\n      onCancel()\n    }\n\n    setOpen(open)\n  }\n\n  const onDateChange = (date: Date | undefined) => {\n    const newDate = date\n    if (showTimePicker) {\n      if (newDate && !time) {\n        setTime(new Time(0, 0))\n      }\n      if (newDate && time) {\n        newDate.setHours(time.hour)\n        newDate.setMinutes(time.minute)\n      }\n    }\n    setDate(newDate)\n  }\n\n  const onTimeChange = (time: TimeValue | null) => {\n    setTime(time)\n\n    if (!date) {\n      return\n    }\n\n    const newDate = new Date(date.getTime())\n\n    if (!time) {\n      newDate.setHours(0)\n      newDate.setMinutes(0)\n    } else {\n      newDate.setHours(time.hour)\n      newDate.setMinutes(time.minute)\n    }\n\n    setDate(newDate)\n  }\n\n  const formattedDate = React.useMemo(() => {\n    if (!date) {\n      return null\n    }\n\n    return formatDate(date, locale, showTimePicker)\n  }, [date, locale, showTimePicker])\n\n  const onApply = () => {\n    setOpen(false)\n    onChange?.(date)\n  }\n\n  React.useEffect(() => {\n    setDate(value ?? defaultValue ?? undefined)\n    setTime(\n      value\n        ? new Time(value.getHours(), value.getMinutes())\n        : defaultValue\n          ? new Time(defaultValue.getHours(), defaultValue.getMinutes())\n          : new Time(0, 0),\n    )\n  }, [value, defaultValue])\n\n  return (\n    <PopoverPrimitives.Root\n      tremor-id=\"tremor-raw\"\n      open={open}\n      onOpenChange={onOpenChange}\n    >\n      <Trigger\n        placeholder={placeholder}\n        disabled={disabled}\n        className={className}\n        hasError={hasError}\n        aria-required={props.required || props[\"aria-required\"]}\n        aria-invalid={props[\"aria-invalid\"]}\n        aria-label={props[\"aria-label\"]}\n        aria-labelledby={props[\"aria-labelledby\"]}\n      >\n        {formattedDate}\n      </Trigger>\n      <CalendarPopover align={align}>\n        <div className=\"flex\">\n          <div className=\"flex flex-col sm:flex-row sm:items-start\">\n            {presets && presets.length > 0 && (\n              <div\n                className={cx(\n                  \"relative flex h-14 w-full items-center sm:h-full sm:w-40\",\n                  \"border-b border-gray-200 sm:border-b-0 sm:border-r dark:border-gray-800\",\n                  \"overflow-auto\",\n                )}\n              >\n                <div className=\"absolute px-2 pr-2 sm:inset-0 sm:left-0 sm:py-2\">\n                  <PresetContainer\n                    currentValue={date}\n                    presets={presets}\n                    onSelect={onDateChange}\n                  />\n                </div>\n              </div>\n            )}\n            <div>\n              <CalendarPrimitive\n                mode=\"single\"\n                month={month}\n                onMonthChange={setMonth}\n                selected={date}\n                onSelect={onDateChange}\n                disabled={disabledDays}\n                locale={locale}\n                enableYearNavigation={enableYearNavigation}\n                disableNavigation={disableNavigation}\n                initialFocus\n                {...props}\n              />\n              {showTimePicker && (\n                <div className=\"border-t border-gray-200 p-3 dark:border-gray-800\">\n                  <TimeInput\n                    aria-label=\"Time\"\n                    onChange={onTimeChange}\n                    isDisabled={!date}\n                    value={time}\n                    isRequired={props.required}\n                  />\n                </div>\n              )}\n              <div className=\"flex items-center gap-x-2 border-t border-gray-200 p-3 dark:border-gray-800\">\n                <Button\n                  variant=\"secondary\"\n                  className=\"h-8 w-full\"\n                  type=\"button\"\n                  onClick={onCancel}\n                >\n                  {translations?.cancel ?? \"Cancel\"}\n                </Button>\n                <Button\n                  variant=\"primary\"\n                  className=\"h-8 w-full\"\n                  type=\"button\"\n                  onClick={onApply}\n                >\n                  {translations?.apply ?? \"Apply\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CalendarPopover>\n    </PopoverPrimitives.Root>\n  )\n}\n\n//#region Range Date Picker\n// ============================================================================\n\ninterface RangeProps extends PickerProps {\n  presets?: DateRangePreset[]\n  defaultValue?: DateRange\n  value?: DateRange\n  onChange?: (dateRange: DateRange | undefined) => void\n}\n\nconst RangeDatePicker = ({\n  defaultValue,\n  value,\n  onChange,\n  presets,\n  disabled,\n  disableNavigation,\n  disabledDays,\n  enableYearNavigation = false,\n  locale = enUS,\n  showTimePicker,\n  placeholder = \"Select date range\",\n  hasError,\n  translations,\n  align = \"center\",\n  className,\n  ...props\n}: RangeProps) => {\n  const [open, setOpen] = React.useState(false)\n  const [range, setRange] = React.useState<DateRange | undefined>(\n    value ?? defaultValue ?? undefined,\n  )\n  const [month, setMonth] = React.useState<Date | undefined>(range?.from)\n\n  const [startTime, setStartTime] = React.useState<TimeValue | null>(\n    value?.from\n      ? new Time(value.from.getHours(), value.from.getMinutes())\n      : defaultValue?.from\n        ? new Time(defaultValue.from.getHours(), defaultValue.from.getMinutes())\n        : new Time(0, 0),\n  )\n  const [endTime, setEndTime] = React.useState<TimeValue | null>(\n    value?.to\n      ? new Time(value.to.getHours(), value.to.getMinutes())\n      : defaultValue?.to\n        ? new Time(defaultValue.to.getHours(), defaultValue.to.getMinutes())\n        : new Time(0, 0),\n  )\n\n  const initialRange = React.useMemo(() => {\n    return range\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open])\n\n  React.useEffect(() => {\n    setRange(value ?? defaultValue ?? undefined)\n  }, [value, defaultValue])\n\n  React.useEffect(() => {\n    if (range) {\n      setMonth(range.from)\n    }\n  }, [range])\n\n  React.useEffect(() => {\n    if (!open) {\n      setMonth(range?.from)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open])\n\n  const onRangeChange = (range: DateRange | undefined) => {\n    const newRange = range\n    if (showTimePicker) {\n      if (newRange?.from && !startTime) {\n        setStartTime(new Time(0, 0))\n      }\n\n      if (newRange?.to && !endTime) {\n        setEndTime(new Time(0, 0))\n      }\n\n      if (newRange?.from && startTime) {\n        newRange.from.setHours(startTime.hour)\n        newRange.from.setMinutes(startTime.minute)\n      }\n\n      if (newRange?.to && endTime) {\n        newRange.to.setHours(endTime.hour)\n        newRange.to.setMinutes(endTime.minute)\n      }\n    }\n\n    setRange(newRange)\n  }\n\n  const onCancel = () => {\n    setRange(initialRange)\n    setStartTime(\n      initialRange?.from\n        ? new Time(initialRange.from.getHours(), initialRange.from.getMinutes())\n        : new Time(0, 0),\n    )\n    setEndTime(\n      initialRange?.to\n        ? new Time(initialRange.to.getHours(), initialRange.to.getMinutes())\n        : new Time(0, 0),\n    )\n    setOpen(false)\n  }\n\n  const onOpenChange = (open: boolean) => {\n    if (!open) {\n      onCancel()\n    }\n\n    setOpen(open)\n  }\n\n  const onTimeChange = (time: TimeValue | null, pos: \"start\" | \"end\") => {\n    switch (pos) {\n      case \"start\":\n        setStartTime(time)\n        break\n      case \"end\":\n        setEndTime(time)\n        break\n    }\n\n    if (!range) {\n      return\n    }\n\n    if (pos === \"start\") {\n      if (!range.from) {\n        return\n      }\n\n      const newDate = new Date(range.from.getTime())\n\n      if (!time) {\n        newDate.setHours(0)\n        newDate.setMinutes(0)\n      } else {\n        newDate.setHours(time.hour)\n        newDate.setMinutes(time.minute)\n      }\n\n      setRange({\n        ...range,\n        from: newDate,\n      })\n    }\n\n    if (pos === \"end\") {\n      if (!range.to) {\n        return\n      }\n\n      const newDate = new Date(range.to.getTime())\n\n      if (!time) {\n        newDate.setHours(0)\n        newDate.setMinutes(0)\n      } else {\n        newDate.setHours(time.hour)\n        newDate.setMinutes(time.minute)\n      }\n\n      setRange({\n        ...range,\n        to: newDate,\n      })\n    }\n  }\n\n  React.useEffect(() => {\n    setRange(value ?? defaultValue ?? undefined)\n\n    setStartTime(\n      value?.from\n        ? new Time(value.from.getHours(), value.from.getMinutes())\n        : defaultValue?.from\n          ? new Time(\n              defaultValue.from.getHours(),\n              defaultValue.from.getMinutes(),\n            )\n          : new Time(0, 0),\n    )\n    setEndTime(\n      value?.to\n        ? new Time(value.to.getHours(), value.to.getMinutes())\n        : defaultValue?.to\n          ? new Time(defaultValue.to.getHours(), defaultValue.to.getMinutes())\n          : new Time(0, 0),\n    )\n  }, [value, defaultValue])\n\n  const displayRange = React.useMemo(() => {\n    if (!range) {\n      return null\n    }\n\n    return `${range.from ? formatDate(range.from, locale, showTimePicker) : \"\"} - ${\n      range.to ? formatDate(range.to, locale, showTimePicker) : \"\"\n    }`\n  }, [range, locale, showTimePicker])\n\n  const onApply = () => {\n    setOpen(false)\n    onChange?.(range)\n  }\n\n  return (\n    <PopoverPrimitives.Root\n      tremor-id=\"tremor-raw\"\n      open={open}\n      onOpenChange={onOpenChange}\n    >\n      <Trigger\n        placeholder={placeholder}\n        disabled={disabled}\n        className={className}\n        hasError={hasError}\n        aria-required={props.required || props[\"aria-required\"]}\n        aria-invalid={props[\"aria-invalid\"]}\n        aria-label={props[\"aria-label\"]}\n        aria-labelledby={props[\"aria-labelledby\"]}\n      >\n        {displayRange}\n      </Trigger>\n      <CalendarPopover align={align}>\n        <div className=\"flex\">\n          <div className=\"flex flex-col overflow-x-auto sm:flex-row sm:items-start\">\n            {presets && presets.length > 0 && (\n              <div\n                className={cx(\n                  \"relative flex h-16 w-full items-center sm:h-full sm:w-40\",\n                  \"border-b border-gray-200 sm:border-b-0 sm:border-r dark:border-gray-800\",\n                  \"overflow-auto\",\n                )}\n              >\n                <div className=\"absolute px-3 sm:inset-0 sm:left-0 sm:p-2\">\n                  <PresetContainer\n                    currentValue={range}\n                    presets={presets}\n                    onSelect={onRangeChange}\n                  />\n                </div>\n              </div>\n            )}\n            <div className=\"overflow-x-auto\">\n              <CalendarPrimitive\n                mode=\"range\"\n                selected={range}\n                onSelect={onRangeChange}\n                month={month}\n                onMonthChange={setMonth}\n                numberOfMonths={2}\n                disabled={disabledDays}\n                disableNavigation={disableNavigation}\n                enableYearNavigation={enableYearNavigation}\n                locale={locale}\n                initialFocus\n                classNames={{\n                  months:\n                    \"flex flex-row divide-x divide-gray-200 dark:divide-gray-800 overflow-x-auto\",\n                }}\n                {...props}\n              />\n              {showTimePicker && (\n                <div className=\"flex items-center justify-evenly gap-x-3 border-t border-gray-200 p-3 dark:border-gray-800\">\n                  <div className=\"flex flex-1 items-center gap-x-2\">\n                    <span className=\"dark:text-gray-30 text-gray-700\">\n                      {translations?.start ?? \"Start\"}:\n                    </span>\n                    <TimeInput\n                      value={startTime}\n                      onChange={(v) => onTimeChange(v, \"start\")}\n                      aria-label=\"Start date time\"\n                      isDisabled={!range?.from}\n                      isRequired={props.required}\n                    />\n                  </div>\n                  <RiSubtractFill className=\"size-4 shrink-0 text-gray-400\" />\n                  <div className=\"flex flex-1 items-center gap-x-2\">\n                    <span className=\"dark:text-gray-30 text-gray-700\">\n                      {translations?.end ?? \"End\"}:\n                    </span>\n                    <TimeInput\n                      value={endTime}\n                      onChange={(v) => onTimeChange(v, \"end\")}\n                      aria-label=\"End date time\"\n                      isDisabled={!range?.to}\n                      isRequired={props.required}\n                    />\n                  </div>\n                </div>\n              )}\n              <div className=\"border-t border-gray-200 p-3 sm:flex sm:items-center sm:justify-between dark:border-gray-800\">\n                <p className=\"tabular-nums text-gray-900 dark:text-gray-50\">\n                  <span className=\"text-gray-700 dark:text-gray-300\">\n                    {translations?.range ?? \"Range\"}:\n                  </span>{\" \"}\n                  <span className=\"font-medium\">{displayRange}</span>\n                </p>\n                <div className=\"mt-2 flex items-center gap-x-2 sm:mt-0\">\n                  <Button\n                    variant=\"secondary\"\n                    className=\"h-8 w-full sm:w-fit\"\n                    type=\"button\"\n                    onClick={onCancel}\n                  >\n                    {translations?.cancel ?? \"Cancel\"}\n                  </Button>\n                  <Button\n                    variant=\"primary\"\n                    className=\"h-8 w-full sm:w-fit\"\n                    type=\"button\"\n                    onClick={onApply}\n                  >\n                    {translations?.apply ?? \"Apply\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CalendarPopover>\n    </PopoverPrimitives.Root>\n  )\n}\n\n//#region Preset Validation\n// ============================================================================\n\nconst validatePresets = (\n  presets: DateRangePreset[] | DatePreset[],\n  rules: PickerProps,\n) => {\n  const { toYear, fromYear, fromMonth, toMonth, fromDay, toDay } = rules\n\n  if (presets && presets.length > 0) {\n    const fromYearToUse = fromYear\n    const toYearToUse = toYear\n\n    presets.forEach((preset) => {\n      if (\"date\" in preset) {\n        const presetYear = preset.date.getFullYear()\n\n        if (fromYear && presetYear < fromYear) {\n          throw new Error(\n            `Preset ${preset.label} is before fromYear ${fromYearToUse}.`,\n          )\n        }\n\n        if (toYear && presetYear > toYear) {\n          throw new Error(\n            `Preset ${preset.label} is after toYear ${toYearToUse}.`,\n          )\n        }\n\n        if (fromMonth) {\n          const presetMonth = preset.date.getMonth()\n\n          if (presetMonth < fromMonth.getMonth()) {\n            throw new Error(\n              `Preset ${preset.label} is before fromMonth ${fromMonth}.`,\n            )\n          }\n        }\n\n        if (toMonth) {\n          const presetMonth = preset.date.getMonth()\n\n          if (presetMonth > toMonth.getMonth()) {\n            throw new Error(\n              `Preset ${preset.label} is after toMonth ${toMonth}.`,\n            )\n          }\n        }\n\n        if (fromDay) {\n          const presetDay = preset.date.getDate()\n\n          if (presetDay < fromDay.getDate()) {\n            throw new Error(\n              `Preset ${preset.label} is before fromDay ${fromDay}.`,\n            )\n          }\n        }\n\n        if (toDay) {\n          const presetDay = preset.date.getDate()\n\n          if (presetDay > toDay.getDate()) {\n            throw new Error(\n              `Preset ${preset.label} is after toDay ${format(\n                toDay,\n                \"MMM dd, yyyy\",\n              )}.`,\n            )\n          }\n        }\n      }\n\n      if (\"dateRange\" in preset) {\n        const presetFromYear = preset.dateRange.from?.getFullYear()\n        const presetToYear = preset.dateRange.to?.getFullYear()\n\n        if (presetFromYear && fromYear && presetFromYear < fromYear) {\n          throw new Error(\n            `Preset ${preset.label}'s 'from' is before fromYear ${fromYearToUse}.`,\n          )\n        }\n\n        if (presetToYear && toYear && presetToYear > toYear) {\n          throw new Error(\n            `Preset ${preset.label}'s 'to' is after toYear ${toYearToUse}.`,\n          )\n        }\n\n        if (fromMonth) {\n          const presetMonth = preset.dateRange.from?.getMonth()\n\n          if (presetMonth && presetMonth < fromMonth.getMonth()) {\n            throw new Error(\n              `Preset ${preset.label}'s 'from' is before fromMonth ${format(\n                fromMonth,\n                \"MMM, yyyy\",\n              )}.`,\n            )\n          }\n        }\n\n        if (toMonth) {\n          const presetMonth = preset.dateRange.to?.getMonth()\n\n          if (presetMonth && presetMonth > toMonth.getMonth()) {\n            throw new Error(\n              `Preset ${preset.label}'s 'to' is after toMonth ${format(\n                toMonth,\n                \"MMM, yyyy\",\n              )}.`,\n            )\n          }\n        }\n\n        if (fromDay) {\n          const presetDay = preset.dateRange.from?.getDate()\n\n          if (presetDay && presetDay < fromDay.getDate()) {\n            throw new Error(\n              `Preset ${\n                preset.dateRange.from\n              }'s 'from' is before fromDay ${format(fromDay, \"MMM dd, yyyy\")}.`,\n            )\n          }\n        }\n\n        if (toDay) {\n          const presetDay = preset.dateRange.to?.getDate()\n\n          if (presetDay && presetDay > toDay.getDate()) {\n            throw new Error(\n              `Preset ${preset.label}'s 'to' is after toDay ${format(\n                toDay,\n                \"MMM dd, yyyy\",\n              )}.`,\n            )\n          }\n        }\n      }\n    })\n  }\n}\n\n//#region Types & Exports\n// ============================================================================\n\ntype SingleDatePickerProps = {\n  presets?: DatePreset[]\n  defaultValue?: Date\n  value?: Date\n  onChange?: (date: Date | undefined) => void\n} & PickerProps\n\nconst DatePicker = ({ presets, ...props }: SingleDatePickerProps) => {\n  if (presets) {\n    validatePresets(presets, props)\n  }\n\n  return <SingleDatePicker presets={presets} {...(props as SingleProps)} />\n}\n\nDatePicker.displayName = \"DatePicker\"\n\ntype RangeDatePickerProps = {\n  presets?: DateRangePreset[]\n  defaultValue?: DateRange\n  value?: DateRange\n  onChange?: (dateRange: DateRange | undefined) => void\n} & PickerProps\n\nconst DateRangePicker = ({ presets, ...props }: RangeDatePickerProps) => {\n  if (presets) {\n    validatePresets(presets, props)\n  }\n\n  return <RangeDatePicker presets={presets} {...(props as RangeProps)} />\n}\n\nDateRangePicker.displayName = \"DateRangePicker\"\n\nexport {\n  DatePicker,\n  DateRangePicker,\n  type DatePreset,\n  type DateRange,\n  type DateRangePreset,\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/Dialog.tsx",
      "content": "// Tremor Raw Dialog [v0.0.0]\n\nimport * as DialogPrimitives from \"@radix-ui/react-dialog\"\nimport React from \"react\"\n\nimport { cx, focusRing } from \"@/lib/utils\"\n\nconst Dialog = (\n  props: React.ComponentPropsWithoutRef<typeof DialogPrimitives.Root>,\n) => {\n  return <DialogPrimitives.Root {...props} />\n}\nDialog.displayName = \"Dialog\"\n\nconst DialogTrigger = DialogPrimitives.Trigger\n\nDialogTrigger.displayName = \"DialogTrigger\"\n\nconst DialogClose = DialogPrimitives.Close\n\nDialogClose.displayName = \"DialogClose\"\n\nconst DialogPortal = DialogPrimitives.Portal\n\nDialogPortal.displayName = \"DialogPortal\"\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Overlay>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DialogPrimitives.Overlay\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"fixed inset-0 z-50 overflow-y-auto\",\n        // background color\n        \"bg-black/70\",\n        // transition\n        \"data-[state=open]:animate-dialogOverlayShow\",\n        className,\n      )}\n      {...props}\n    />\n  )\n})\n\nDialogOverlay.displayName = \"DialogOverlay\"\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Content>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DialogPortal>\n      <DialogOverlay>\n        <DialogPrimitives.Content\n          ref={forwardedRef}\n          className={cx(\n            // base\n            \"fixed left-1/2 top-1/2 z-50 w-[95vw] max-w-lg -translate-x-1/2 -translate-y-1/2 overflow-y-auto rounded-md border p-6 shadow-lg\",\n            // border color\n            \"border-gray-200 dark:border-gray-900\",\n            // background color\n            \"bg-white dark:bg-[#090E1A]\",\n            // transition\n            \"data-[state=open]:animate-dialogContentShow\",\n            focusRing,\n            className,\n          )}\n          {...props}\n        />\n      </DialogOverlay>\n    </DialogPortal>\n  )\n})\n\nDialogContent.displayName = \"DialogContent\"\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return <div className={cx(\"flex flex-col gap-y-1\", className)} {...props} />\n}\n\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Title>\n>(({ className, ...props }, forwardedRef) => (\n  <DialogPrimitives.Title\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"text-lg font-semibold\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nDialogTitle.displayName = \"DialogTitle\"\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitives.Description>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DialogPrimitives.Description\n      ref={forwardedRef}\n      className={cx(\"text-gray-500 dark:text-gray-500\", className)}\n      {...props}\n    />\n  )\n})\n\nDialogDescription.displayName = \"DialogDescription\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={cx(\n        \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nDialogFooter.displayName = \"DialogFooter\"\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/Dropdown.tsx",
      "content": "// Custom Dropdown Menu [v0.0.0]\n\n\"use client\"\n\nimport * as DropdownMenuPrimitives from \"@radix-ui/react-dropdown-menu\"\nimport {\n  RiArrowRightSLine,\n  RiCheckboxBlankCircleLine,\n  RiCheckLine,\n  RiRadioButtonFill,\n} from \"@remixicon/react\"\nimport * as React from \"react\"\n\nimport { cx } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitives.Root\nDropdownMenu.displayName = \"DropdownMenu\"\n\nconst DropdownMenuTrigger = DropdownMenuPrimitives.Trigger\nDropdownMenuTrigger.displayName = \"DropdownMenuTrigger\"\n\nconst DropdownMenuGroup = DropdownMenuPrimitives.Group\nDropdownMenuGroup.displayName = \"DropdownMenuGroup\"\n\nconst DropdownMenuSubMenu = DropdownMenuPrimitives.Sub\nDropdownMenuSubMenu.displayName = \"DropdownMenuSubMenu\"\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitives.RadioGroup\nDropdownMenuRadioGroup.displayName = \"DropdownMenuRadioGroup\"\n\nconst DropdownMenuSubMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.SubTrigger>\n>(({ className, children, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.SubTrigger\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"relative flex cursor-default select-none items-center rounded py-1.5 pl-2 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      \"data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600\",\n      // focus\n      \"focus-visible:bg-gray-100 data-[state=open]:bg-gray-100 focus-visible:dark:bg-gray-900 data-[state=open]:dark:bg-gray-900\",\n      // hover\n      \"hover:bg-gray-100 hover:dark:bg-gray-900\",\n      //\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <RiArrowRightSLine\n      className=\"ml-auto size-4 shrink-0 text-gray-500\"\n      aria-hidden=\"true\"\n    />\n  </DropdownMenuPrimitives.SubTrigger>\n))\nDropdownMenuSubMenuTrigger.displayName = \"DropdownMenuSubMenuTrigger\"\n\nconst DropdownMenuSubMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.SubContent>\n>(({ className, collisionPadding = 8, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.Portal>\n    <DropdownMenuPrimitives.SubContent\n      ref={forwardedRef}\n      collisionPadding={collisionPadding}\n      className={cx(\n        // base\n        \"relative z-50 overflow-hidden rounded-md border p-1 shadow-xl shadow-black/[2.5%]\",\n        // widths\n        \"min-w-32\",\n        // heights\n        \"max-h-[var(--radix-popper-available-height)]\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // border color\n        \"border-gray-200 dark:border-gray-800\",\n        // transition\n        \"will-change-[transform,opacity]\",\n        // \"data-[state=open]:animate-slideDownAndFade\",\n        \"data-[state=closed]:animate-hide\",\n        \"data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade\",\n        className,\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitives.Portal>\n))\nDropdownMenuSubMenuContent.displayName = \"DropdownMenuSubMenuContent\"\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Content>\n>(\n  (\n    {\n      className,\n      sideOffset = 8,\n      collisionPadding = 8,\n      align = \"center\",\n      loop = true,\n      ...props\n    },\n    forwardedRef,\n  ) => (\n    <DropdownMenuPrimitives.Portal>\n      <DropdownMenuPrimitives.Content\n        ref={forwardedRef}\n        className={cx(\n          // base\n          \"relative z-50 overflow-hidden rounded-md border p-1 shadow-xl shadow-black/[2.5%]\",\n          // widths\n          \"min-w-[calc(var(--radix-dropdown-menu-trigger-width))]\",\n          // heights\n          \"max-h-[var(--radix-popper-available-height)]\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n          // text color\n          \"text-gray-900 dark:text-gray-50\",\n          // border color\n          \"border-gray-200 dark:border-gray-800\",\n          // transition\n          \"will-change-[transform,opacity]\",\n          \"data-[state=closed]:animate-hide\",\n          \"data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade\",\n          className,\n        )}\n        sideOffset={sideOffset}\n        align={align}\n        collisionPadding={collisionPadding}\n        loop={loop}\n        {...props}\n      />\n    </DropdownMenuPrimitives.Portal>\n  ),\n)\nDropdownMenuContent.displayName = \"DropdownMenuContent\"\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Item> & {\n    shortcut?: string\n    hint?: string\n  }\n>(({ className, shortcut, hint, children, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.Item\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"group/DropdownMenuItem relative flex cursor-pointer select-none items-center rounded py-1.5 pl-2 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      \"data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600\",\n      // focus\n      \"focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900\",\n      // hover\n      \"hover:bg-gray-100 hover:dark:bg-gray-900\",\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    {hint && (\n      <span\n        className={cx(\"ml-auto pl-2 text-sm text-gray-400 dark:text-gray-600\")}\n      >\n        {hint}\n      </span>\n    )}\n    {shortcut && (\n      <span\n        className={cx(\"ml-auto pl-2 text-sm text-gray-400 dark:text-gray-600\")}\n      >\n        {shortcut}\n      </span>\n    )}\n  </DropdownMenuPrimitives.Item>\n))\nDropdownMenuItem.displayName = \"DropdownMenuItem\"\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.CheckboxItem> & {\n    shortcut?: string\n    hint?: string\n  }\n>(\n  (\n    { className, hint, shortcut, children, checked, ...props },\n    forwardedRef,\n  ) => (\n    <DropdownMenuPrimitives.CheckboxItem\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"relative flex cursor-pointer select-none items-center gap-x-2 rounded py-1.5 pl-8 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // disabled\n        \"data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600\",\n        // focus\n        \"focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900\",\n        // hover\n        \"hover:bg-gray-100 hover:dark:bg-gray-900\",\n        className,\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"absolute left-2 flex size-4 items-center justify-center\">\n        <DropdownMenuPrimitives.ItemIndicator>\n          <RiCheckLine\n            aria-hidden=\"true\"\n            className=\"size-full shrink-0 text-gray-800 dark:text-gray-200\"\n          />\n        </DropdownMenuPrimitives.ItemIndicator>\n      </span>\n      {children}\n      {hint && (\n        <span\n          className={cx(\n            \"ml-auto text-sm font-normal text-gray-400 dark:text-gray-600\",\n          )}\n        >\n          {hint}\n        </span>\n      )}\n      {shortcut && (\n        <span\n          className={cx(\n            \"ml-auto text-sm font-normal tracking-widest text-gray-400 dark:border-gray-800 dark:text-gray-600\",\n          )}\n        >\n          {shortcut}\n        </span>\n      )}\n    </DropdownMenuPrimitives.CheckboxItem>\n  ),\n)\nDropdownMenuCheckboxItem.displayName = \"DropdownMenuCheckboxItem\"\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.RadioItem> & {\n    shortcut?: string\n    hint?: string\n    iconType?: \"check\" | \"radio\"\n  }\n>(\n  (\n    { className, hint, shortcut, children, iconType = \"radio\", ...props },\n    forwardedRef,\n  ) => (\n    <DropdownMenuPrimitives.RadioItem\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"group/DropdownMenuRadioItem relative flex cursor-pointer select-none items-center gap-x-2 rounded py-1.5 pl-8 pr-1 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // disabled\n        \"data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600\",\n        // focus\n        \"focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900\",\n        // hover\n        \"hover:bg-gray-100 hover:dark:bg-gray-900\",\n        className,\n      )}\n      {...props}\n    >\n      {iconType === \"radio\" ? (\n        <span className=\"absolute left-2 flex size-4 items-center justify-center\">\n          <RiRadioButtonFill\n            aria-hidden=\"true\"\n            className=\"size-full shrink-0 text-blue-500 group-data-[state=checked]/DropdownMenuRadioItem:flex group-data-[state=unchecked]/DropdownMenuRadioItem:hidden dark:text-blue-500\"\n          />\n          <RiCheckboxBlankCircleLine\n            aria-hidden=\"true\"\n            className=\"size-full shrink-0 text-gray-300 group-data-[state=unchecked]/DropdownMenuRadioItem:flex group-data-[state=checked]/DropdownMenuRadioItem:hidden dark:text-gray-700\"\n          />\n        </span>\n      ) : iconType === \"check\" ? (\n        <span className=\"absolute left-2 flex size-4 items-center justify-center\">\n          <RiCheckLine\n            aria-hidden=\"true\"\n            className=\"size-full shrink-0 text-gray-800 group-data-[state=checked]/DropdownMenuRadioItem:flex group-data-[state=unchecked]/DropdownMenuRadioItem:hidden dark:text-gray-200\"\n          />\n        </span>\n      ) : null}\n      {children}\n      {hint && (\n        <span\n          className={cx(\n            \"ml-auto text-sm font-normal text-gray-400 dark:text-gray-600\",\n          )}\n        >\n          {hint}\n        </span>\n      )}\n      {shortcut && (\n        <span\n          className={cx(\n            \"ml-auto text-sm font-normal tracking-widest text-gray-400 dark:border-gray-800 dark:text-gray-600\",\n          )}\n        >\n          {shortcut}\n        </span>\n      )}\n    </DropdownMenuPrimitives.RadioItem>\n  ),\n)\nDropdownMenuRadioItem.displayName = \"DropdownMenuRadioItem\"\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Label>\n>(({ className, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.Label\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"px-2 py-2 text-xs font-medium tracking-wide\",\n      // text color\n      \"text-gray-500 dark:text-gray-500\",\n      className,\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = \"DropdownMenuLabel\"\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitives.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitives.Separator>\n>(({ className, ...props }, forwardedRef) => (\n  <DropdownMenuPrimitives.Separator\n    ref={forwardedRef}\n    className={cx(\n      \"-mx-1 my-1 h-px border-t border-gray-200 dark:border-gray-800\",\n      className,\n    )}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = \"DropdownMenuSeparator\"\n\nconst DropdownMenuIconWrapper = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <div\n      className={cx(\n        // text color\n        \"text-gray-600 dark:text-gray-400\",\n        // disabled\n        \"group-data-[disabled]/DropdownMenuItem:text-gray-400 group-data-[disabled]/DropdownMenuItem:dark:text-gray-700\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\nDropdownMenuIconWrapper.displayName = \"DropdownMenuIconWrapper\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuIconWrapper,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuSubMenu,\n  DropdownMenuSubMenuContent,\n  DropdownMenuSubMenuTrigger,\n  DropdownMenuTrigger,\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/Drawer.tsx",
      "content": "// Tremor Drawer [v0.0.2]\n\nimport * as DrawerPrimitives from \"@radix-ui/react-dialog\"\nimport { RiCloseLine } from \"@remixicon/react\"\nimport * as React from \"react\"\n\nimport { cx, focusRing } from \"@/lib/utils\"\n\nimport { Button } from \"./Button\"\n\nconst Drawer = (\n  props: React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Root>,\n) => {\n  return <DrawerPrimitives.Root tremor-id=\"tremor-raw\" {...props} />\n}\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Trigger>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Trigger>\n>(({ className, ...props }, ref) => {\n  return (\n    <DrawerPrimitives.Trigger ref={ref} className={cx(className)} {...props} />\n  )\n})\nDrawerTrigger.displayName = \"Drawer.Trigger\"\n\nconst DrawerClose = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Close>\n>(({ className, ...props }, ref) => {\n  return (\n    <DrawerPrimitives.Close ref={ref} className={cx(className)} {...props} />\n  )\n})\nDrawerClose.displayName = \"Drawer.Close\"\n\nconst DrawerPortal = DrawerPrimitives.Portal\n\nDrawerPortal.displayName = \"DrawerPortal\"\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Overlay>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DrawerPrimitives.Overlay\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"fixed inset-0 z-50 overflow-y-auto\",\n        // background color\n        \"bg-black/30\",\n        // transition\n        \"data-[state=closed]:animate-hide data-[state=open]:animate-dialogOverlayShow\",\n        className,\n      )}\n      {...props}\n      style={{\n        animationDuration: \"400ms\",\n        animationFillMode: \"backwards\",\n      }}\n    />\n  )\n})\n\nDrawerOverlay.displayName = \"DrawerOverlay\"\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Content>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DrawerPortal>\n      <DrawerOverlay>\n        <DrawerPrimitives.Content\n          ref={forwardedRef}\n          className={cx(\n            // base\n            \"fixed inset-y-2 z-50 mx-auto flex w-[95vw] flex-1 flex-col overflow-y-auto rounded-md border p-4 shadow-lg focus:outline-none max-sm:inset-x-2 sm:inset-y-2 sm:right-2 sm:max-w-lg sm:p-6\",\n            // border color\n            \"border-gray-200 dark:border-gray-900\",\n            // background color\n            \"bg-white dark:bg-[#090E1A]\",\n            // transition\n            \"data-[state=closed]:animate-drawerSlideRightAndFade data-[state=open]:animate-drawerSlideLeftAndFade\",\n            focusRing,\n            className,\n          )}\n          {...props}\n        />\n      </DrawerOverlay>\n    </DrawerPortal>\n  )\n})\n\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ children, className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className=\"flex items-start justify-between gap-x-4 border-b border-gray-200 pb-4 dark:border-gray-900\"\n      {...props}\n    >\n      <div className={cx(\"mt-1 flex flex-col gap-y-1\", className)}>\n        {children}\n      </div>\n      <DrawerPrimitives.Close asChild>\n        <Button\n          variant=\"ghost\"\n          className=\"aspect-square p-1 hover:bg-gray-100 hover:dark:bg-gray-400/10\"\n        >\n          <RiCloseLine className=\"size-6\" aria-hidden=\"true\" />\n        </Button>\n      </DrawerPrimitives.Close>\n    </div>\n  )\n})\n\nDrawerHeader.displayName = \"Drawer.Header\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Title>\n>(({ className, ...props }, forwardedRef) => (\n  <DrawerPrimitives.Title\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"text-base font-semibold\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nDrawerTitle.displayName = \"DrawerTitle\"\n\nconst DrawerBody = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => {\n  return <div ref={ref} className={cx(\"flex-1 py-4\", className)} {...props} />\n})\nDrawerBody.displayName = \"Drawer.Body\"\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Description>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DrawerPrimitives.Description\n      ref={forwardedRef}\n      className={cx(\"text-gray-500 dark:text-gray-500\", className)}\n      {...props}\n    />\n  )\n})\n\nDrawerDescription.displayName = \"DrawerDescription\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={cx(\n        \"flex flex-col-reverse border-t border-gray-200 pt-4 sm:flex-row sm:justify-end sm:space-x-2 dark:border-gray-900\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nDrawerFooter.displayName = \"DrawerFooter\"\n\nexport {\n  Drawer,\n  DrawerBody,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/Input.tsx",
      "content": "// Tremor Raw Input [v1.0.3]\n\nimport { RiEyeFill, RiEyeOffFill, RiSearchLine } from \"@remixicon/react\"\nimport React from \"react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx, focusInput, focusRing, hasErrorInput } from \"@/lib/utils\"\n\nconst inputStyles = tv({\n  base: [\n    // base\n    \"relative block w-full appearance-none truncate rounded-md border px-2.5 py-1.5 shadow-sm outline-none transition sm:text-sm\",\n    // border color\n    \"border-gray-300 dark:border-gray-800\",\n    // text color\n    \"text-gray-900 dark:text-gray-50\",\n    // placeholder color\n    \"placeholder-gray-400 dark:placeholder-gray-500\",\n    // background color\n    \"bg-white dark:bg-gray-950\",\n    // disabled\n    \"disabled:border-gray-300 disabled:bg-gray-100 disabled:text-gray-400\",\n    \"disabled:dark:border-gray-700 disabled:dark:bg-gray-800 disabled:dark:text-gray-500\",\n    // file\n    [\n      \"file:-my-2 file:-ml-2.5 file:cursor-pointer file:rounded-l-[5px] file:rounded-r-none file:border-0 file:px-3 file:py-2 file:outline-none focus:outline-none disabled:pointer-events-none file:disabled:pointer-events-none\",\n      \"file:border-solid file:border-gray-300 file:bg-gray-50 file:text-gray-500 file:hover:bg-gray-100 file:dark:border-gray-800 file:dark:bg-gray-950 file:hover:dark:bg-gray-900/20 file:disabled:dark:border-gray-700\",\n      \"file:[border-inline-end-width:1px] file:[margin-inline-end:0.75rem]\",\n      \"file:disabled:bg-gray-100 file:disabled:text-gray-500 file:disabled:dark:bg-gray-800\",\n    ],\n    // focus\n    focusInput,\n    // invalid (optional)\n    // \"aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500\"\n    // remove search cancel button (optional)\n    \"[&::--webkit-search-cancel-button]:hidden [&::-webkit-search-cancel-button]:hidden [&::-webkit-search-decoration]:hidden\",\n  ],\n  variants: {\n    hasError: {\n      true: hasErrorInput,\n    },\n    // number input\n    enableStepper: {\n      false:\n        \"[appearance:textfield] [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none\",\n    },\n  },\n})\n\ninterface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement>,\n    VariantProps<typeof inputStyles> {\n  inputClassName?: string\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      className,\n      inputClassName,\n      hasError,\n      enableStepper = true,\n      type,\n      ...props\n    }: InputProps,\n    forwardedRef,\n  ) => {\n    const [typeState, setTypeState] = React.useState(type)\n\n    const isPassword = type === \"password\"\n    const isSearch = type === \"search\"\n\n    return (\n      <div className={cx(\"relative w-full\", className)}>\n        <input\n          ref={forwardedRef}\n          type={isPassword ? typeState : type}\n          className={cx(\n            inputStyles({ hasError, enableStepper }),\n            {\n              \"pl-8\": isSearch,\n              \"pr-10\": isPassword,\n            },\n            inputClassName,\n          )}\n          {...props}\n        />\n        {isSearch && (\n          <div\n            className={cx(\n              // base\n              \"pointer-events-none absolute bottom-0 left-2 flex h-full items-center justify-center\",\n              // text color\n              \"text-gray-400 dark:text-gray-600\",\n            )}\n          >\n            <RiSearchLine\n              className=\"size-[1.125rem] shrink-0\"\n              aria-hidden=\"true\"\n            />\n          </div>\n        )}\n        {isPassword && (\n          <div\n            className={cx(\n              \"absolute bottom-0 right-0 flex h-full items-center justify-center px-3\",\n            )}\n          >\n            <button\n              aria-label=\"Change password visibility\"\n              className={cx(\n                // base\n                \"h-fit w-fit rounded-sm outline-none transition-all\",\n                // text\n                \"text-gray-400 dark:text-gray-600\",\n                // hover\n                \"hover:text-gray-500 hover:dark:text-gray-500\",\n                focusRing,\n              )}\n              type=\"button\"\n              onClick={() => {\n                setTypeState(typeState === \"password\" ? \"text\" : \"password\")\n              }}\n            >\n              <span className=\"sr-only\">\n                {typeState === \"password\" ? \"Show password\" : \"Hide password\"}\n              </span>\n              {typeState === \"password\" ? (\n                <RiEyeFill aria-hidden=\"true\" className=\"size-5 shrink-0\" />\n              ) : (\n                <RiEyeOffFill aria-hidden=\"true\" className=\"size-5 shrink-0\" />\n              )}\n            </button>\n          </div>\n        )}\n      </div>\n    )\n  },\n)\n\nInput.displayName = \"Input\"\n\nexport { Input, inputStyles, type InputProps }\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/Label.tsx",
      "content": "// Tremor Raw Label [v0.0.1]\n\nimport * as LabelPrimitives from \"@radix-ui/react-label\"\nimport * as React from \"react\"\n\nimport { cx } from \"@/lib/utils\"\n\ninterface LabelProps\n  extends React.ComponentPropsWithoutRef<typeof LabelPrimitives.Root> {\n  disabled?: boolean\n}\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitives.Root>,\n  LabelProps\n>(({ className, disabled, ...props }, forwardedRef) => (\n  <LabelPrimitives.Root\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"text-sm leading-none\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      // disabled\n      {\n        \"text-gray-400 dark:text-gray-600\": disabled,\n      },\n      className,\n    )}\n    aria-disabled={disabled}\n    {...props}\n  />\n))\nLabel.displayName = \"Label\"\n\nexport { Label }\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/LineChart.tsx",
      "content": "// Tremor Raw LineChart [v0.0.0]\n\n\"use client\"\n\nimport { RiArrowLeftSLine, RiArrowRightSLine } from \"@remixicon/react\"\nimport React from \"react\"\nimport {\n  CartesianGrid,\n  Dot,\n  Label,\n  Line,\n  Legend as RechartsLegend,\n  LineChart as RechartsLineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\"\nimport { AxisDomain } from \"recharts/types/util/types\"\n\nimport {\n  AvailableChartColors,\n  AvailableChartColorsKeys,\n  constructCategoryColors,\n  getColorClassName,\n  getYAxisDomain,\n  hasOnlyOneValueForKey,\n} from \"@/lib/chartUtils\"\nimport { useOnWindowResize } from \"@/lib/useOnWindowResize\"\nimport { cx, percentageFormatter } from \"@/lib/utils\"\nimport { Badge } from \"./Badge\"\nimport { getBadgeType } from \"./ui/overview/DashboardChartCard\"\n\n//#region Legend\n\ninterface LegendItemProps {\n  name: string\n  color: AvailableChartColorsKeys\n  onClick?: (name: string, color: AvailableChartColorsKeys) => void\n  activeLegend?: string\n}\n\nconst LegendItem = ({\n  name,\n  color,\n  onClick,\n  activeLegend,\n}: LegendItemProps) => {\n  const hasOnValueChange = !!onClick\n  return (\n    <li\n      className={cx(\n        // base\n        \"group inline-flex flex-nowrap items-center gap-1.5 whitespace-nowrap rounded px-2 py-1 transition\",\n        hasOnValueChange\n          ? \"bg-transpaent cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800\"\n          : \"cursor-default\",\n      )}\n      onClick={(e) => {\n        e.stopPropagation()\n        onClick?.(name, color)\n      }}\n    >\n      <span\n        className={cx(\n          \"h-[3px] w-3.5 shrink-0 rounded-full\",\n          getColorClassName(color, \"bg\"),\n          activeLegend && activeLegend !== name ? \"opacity-40\" : \"opacity-100\",\n        )}\n        aria-hidden=\"true\"\n      />\n      <p\n        className={cx(\n          // base\n          \"truncate whitespace-nowrap text-xs\",\n          // text color\n          \"text-gray-700 dark:text-gray-300\",\n          hasOnValueChange &&\n            \"group-hover:text-gray-900 dark:group-hover:text-gray-50\",\n          activeLegend && activeLegend !== name ? \"opacity-40\" : \"opacity-100\",\n        )}\n      >\n        {name}\n      </p>\n    </li>\n  )\n}\n\ninterface ScrollButtonProps {\n  icon: React.ElementType\n  onClick?: () => void\n  disabled?: boolean\n}\n\nconst ScrollButton = ({ icon, onClick, disabled }: ScrollButtonProps) => {\n  const Icon = icon\n  const [isPressed, setIsPressed] = React.useState(false)\n  const intervalRef = React.useRef<NodeJS.Timeout | null>(null)\n\n  React.useEffect(() => {\n    if (isPressed) {\n      intervalRef.current = setInterval(() => {\n        onClick?.()\n      }, 300)\n    } else {\n      clearInterval(intervalRef.current as NodeJS.Timeout)\n    }\n    return () => clearInterval(intervalRef.current as NodeJS.Timeout)\n  }, [isPressed, onClick])\n\n  React.useEffect(() => {\n    if (disabled) {\n      clearInterval(intervalRef.current as NodeJS.Timeout)\n      setIsPressed(false)\n    }\n  }, [disabled])\n\n  return (\n    <button\n      type=\"button\"\n      className={cx(\n        // base\n        \"group inline-flex size-5 items-center truncate rounded transition\",\n        disabled\n          ? \"cursor-not-allowed text-gray-400 dark:text-gray-600\"\n          : \"cursor-pointer text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-gray-50\",\n      )}\n      disabled={disabled}\n      onClick={(e) => {\n        e.stopPropagation()\n        onClick?.()\n      }}\n      onMouseDown={(e) => {\n        e.stopPropagation()\n        setIsPressed(true)\n      }}\n      onMouseUp={(e) => {\n        e.stopPropagation()\n        setIsPressed(false)\n      }}\n    >\n      <Icon className=\"size-full\" aria-hidden=\"true\" />\n    </button>\n  )\n}\n\ninterface LegendProps extends React.OlHTMLAttributes<HTMLOListElement> {\n  categories: string[]\n  colors?: AvailableChartColorsKeys[]\n  onClickLegendItem?: (category: string, color: string) => void\n  activeLegend?: string\n  enableLegendSlider?: boolean\n}\n\ntype HasScrollProps = {\n  left: boolean\n  right: boolean\n}\n\nconst Legend = React.forwardRef<HTMLOListElement, LegendProps>((props, ref) => {\n  const {\n    categories,\n    colors = AvailableChartColors,\n    className,\n    onClickLegendItem,\n    activeLegend,\n    enableLegendSlider = false,\n    ...other\n  } = props\n  const scrollableRef = React.useRef<HTMLInputElement>(null)\n  const [hasScroll, setHasScroll] = React.useState<HasScrollProps | null>(null)\n  const [isKeyDowned, setIsKeyDowned] = React.useState<string | null>(null)\n  const intervalRef = React.useRef<NodeJS.Timeout | null>(null)\n\n  const checkScroll = React.useCallback(() => {\n    const scrollable = scrollableRef?.current\n    if (!scrollable) return\n\n    const hasLeftScroll = scrollable.scrollLeft > 0\n    const hasRightScroll =\n      scrollable.scrollWidth - scrollable.clientWidth > scrollable.scrollLeft\n\n    setHasScroll({ left: hasLeftScroll, right: hasRightScroll })\n  }, [setHasScroll])\n\n  const scrollToTest = React.useCallback(\n    (direction: \"left\" | \"right\") => {\n      const element = scrollableRef?.current\n      const width = element?.clientWidth ?? 0\n\n      if (element && enableLegendSlider) {\n        element.scrollTo({\n          left:\n            direction === \"left\"\n              ? element.scrollLeft - width\n              : element.scrollLeft + width,\n          behavior: \"smooth\",\n        })\n        setTimeout(() => {\n          checkScroll()\n        }, 400)\n      }\n    },\n    [enableLegendSlider, checkScroll],\n  )\n\n  React.useEffect(() => {\n    const keyDownHandler = (key: string) => {\n      if (key === \"ArrowLeft\") {\n        scrollToTest(\"left\")\n      } else if (key === \"ArrowRight\") {\n        scrollToTest(\"right\")\n      }\n    }\n    if (isKeyDowned) {\n      keyDownHandler(isKeyDowned)\n      intervalRef.current = setInterval(() => {\n        keyDownHandler(isKeyDowned)\n      }, 300)\n    } else {\n      clearInterval(intervalRef.current as NodeJS.Timeout)\n    }\n    return () => clearInterval(intervalRef.current as NodeJS.Timeout)\n  }, [isKeyDowned, scrollToTest])\n\n  const keyDown = (e: KeyboardEvent) => {\n    e.stopPropagation()\n    if (e.key === \"ArrowLeft\" || e.key === \"ArrowRight\") {\n      e.preventDefault()\n      setIsKeyDowned(e.key)\n    }\n  }\n  const keyUp = (e: KeyboardEvent) => {\n    e.stopPropagation()\n    setIsKeyDowned(null)\n  }\n\n  React.useEffect(() => {\n    const scrollable = scrollableRef?.current\n    if (enableLegendSlider) {\n      checkScroll()\n      scrollable?.addEventListener(\"keydown\", keyDown)\n      scrollable?.addEventListener(\"keyup\", keyUp)\n    }\n\n    return () => {\n      scrollable?.removeEventListener(\"keydown\", keyDown)\n      scrollable?.removeEventListener(\"keyup\", keyUp)\n    }\n  }, [checkScroll, enableLegendSlider])\n\n  return (\n    <ol\n      ref={ref}\n      className={cx(\"relative overflow-hidden\", className)}\n      {...other}\n    >\n      <div\n        ref={scrollableRef}\n        tabIndex={0}\n        className={cx(\n          \"flex h-full\",\n          enableLegendSlider\n            ? hasScroll?.right || hasScroll?.left\n              ? \"snap-mandatory items-center overflow-auto pl-4 pr-12 [scrollbar-width:none] [&::-webkit-scrollbar]:hidden\"\n              : \"\"\n            : \"flex-wrap\",\n        )}\n      >\n        {categories.map((category, index) => (\n          <LegendItem\n            key={`item-${index}`}\n            name={category}\n            color={colors[index] as AvailableChartColorsKeys}\n            onClick={onClickLegendItem}\n            activeLegend={activeLegend}\n          />\n        ))}\n      </div>\n      {enableLegendSlider && (hasScroll?.right || hasScroll?.left) ? (\n        <>\n          <div\n            className={cx(\n              // base\n              \"absolute bottom-0 right-0 top-0 flex h-full items-center justify-center pr-1\",\n              // background color\n              \"bg-white dark:bg-gray-950\",\n            )}\n          >\n            <ScrollButton\n              icon={RiArrowLeftSLine}\n              onClick={() => {\n                setIsKeyDowned(null)\n                scrollToTest(\"left\")\n              }}\n              disabled={!hasScroll?.left}\n            />\n            <ScrollButton\n              icon={RiArrowRightSLine}\n              onClick={() => {\n                setIsKeyDowned(null)\n                scrollToTest(\"right\")\n              }}\n              disabled={!hasScroll?.right}\n            />\n          </div>\n        </>\n      ) : null}\n    </ol>\n  )\n})\n\nLegend.displayName = \"Legend\"\n\nconst ChartLegend = (\n  { payload }: any,\n  categoryColors: Map<string, AvailableChartColorsKeys>,\n  setLegendHeight: React.Dispatch<React.SetStateAction<number>>,\n  activeLegend: string | undefined,\n  onClick?: (category: string, color: string) => void,\n  enableLegendSlider?: boolean,\n) => {\n  const legendRef = React.useRef<HTMLDivElement>(null)\n\n  useOnWindowResize(() => {\n    const calculateHeight = (height: number | undefined) =>\n      height ? Number(height) + 15 : 60\n    setLegendHeight(calculateHeight(legendRef.current?.clientHeight))\n  })\n\n  const filteredPayload = payload.filter((item: any) => item.type !== \"none\")\n\n  return (\n    <div ref={legendRef} className=\"flex items-center justify-end\">\n      <Legend\n        categories={filteredPayload.map((entry: any) => entry.value)}\n        colors={filteredPayload.map((entry: any) =>\n          categoryColors.get(entry.value),\n        )}\n        onClickLegendItem={onClick}\n        activeLegend={activeLegend}\n        enableLegendSlider={enableLegendSlider}\n      />\n    </div>\n  )\n}\n\n//#region Tooltip\n\ninterface ChartTooltipRowProps {\n  value: string\n  name: string\n  color: string\n}\n\nconst ChartTooltipRow = ({ value, name, color }: ChartTooltipRowProps) => (\n  <div className=\"flex items-center justify-between space-x-8\">\n    <div className=\"flex items-center space-x-2\">\n      <span\n        aria-hidden=\"true\"\n        className={cx(\"h-[3px] w-3.5 shrink-0 rounded-full\", color)}\n      />\n      <p\n        className={cx(\n          // commmon\n          \"whitespace-nowrap text-right\",\n          // text color\n          \"text-gray-700 dark:text-gray-300\",\n        )}\n      >\n        {name}\n      </p>\n    </div>\n    <p\n      className={cx(\n        // base\n        \"whitespace-nowrap text-right font-medium tabular-nums\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n      )}\n    >\n      {value}\n    </p>\n  </div>\n)\n\ninterface ChartTooltipProps {\n  active: boolean | undefined\n  payload: any\n  label: string\n  categoryColors: Map<string, string>\n  valueFormatter: (value: number) => string\n}\n\nconst OverviewChartTooltip = ({\n  active,\n  payload,\n  categoryColors,\n  valueFormatter,\n}: ChartTooltipProps) => {\n  if (active && payload) {\n    const filteredPayload = payload.filter((item: any) => item.type !== \"none\")\n\n    if (!active || !payload) return null\n\n    const title = payload[0].payload.title\n    const evolution = payload[0].payload.evolution\n    if (!title) return null\n\n    return (\n      <div\n        className={cx(\n          // base\n          \"rounded-md border text-sm shadow-md\",\n          // border color\n          \"border-gray-200 dark:border-gray-800\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n        )}\n      >\n        <div className=\"flex items-start justify-between gap-2 border-b border-inherit p-2\">\n          <p\n            className={cx(\n              // base\n              \"font-medium\",\n              // text color\n              \"text-gray-900 dark:text-gray-50\",\n            )}\n          >\n            {title}\n          </p>\n          {evolution !== undefined && (\n            <Badge variant={getBadgeType(evolution)}>\n              {percentageFormatter(evolution)}\n            </Badge>\n          )}\n        </div>\n        <div className={cx(\"space-y-1 p-2\")}>\n          {filteredPayload.map((payload: any, index: number) => {\n            const payloadData = payload.payload\n            return (\n              <ChartTooltipRow\n                key={`id-${index}`}\n                value={valueFormatter(payload.value)}\n                name={\n                  index === 0\n                    ? payloadData.formattedDate\n                    : payloadData.previousFormattedDate\n                }\n                color={getColorClassName(\n                  categoryColors.get(payload.name) as AvailableChartColorsKeys,\n                  \"bg\",\n                )}\n              />\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n  return null\n}\n\n//#region LineChart\n\ninterface ActiveDot {\n  index?: number\n  dataKey?: string\n}\n\ntype BaseEventProps = {\n  eventType: \"dot\" | \"category\"\n  categoryClicked: string\n  [key: string]: number | string\n}\n\ntype LineChartEventProps = BaseEventProps | null | undefined\n\ninterface LineChartProps extends React.HTMLAttributes<HTMLDivElement> {\n  data: Record<string, any>[]\n  index: string\n  categories: string[]\n  colors?: AvailableChartColorsKeys[]\n  valueFormatter?: (value: number) => string\n  startEndOnly?: boolean\n  showXAxis?: boolean\n  showYAxis?: boolean\n  showGridLines?: boolean\n  yAxisWidth?: number\n  intervalType?: \"preserveStartEnd\" | \"equidistantPreserveStart\"\n  showTooltip?: boolean\n  showLegend?: boolean\n  autoMinValue?: boolean\n  minValue?: number\n  maxValue?: number\n  allowDecimals?: boolean\n  onValueChange?: (value: LineChartEventProps) => void\n  enableLegendSlider?: boolean\n  tickGap?: number\n  connectNulls?: boolean\n  xAxisLabel?: string\n  yAxisLabel?: string\n}\n\nconst LineChart = React.forwardRef<HTMLDivElement, LineChartProps>(\n  (props, ref) => {\n    const {\n      data = [],\n      categories = [],\n      index,\n      colors = AvailableChartColors,\n      valueFormatter = (value: number) => value.toString(),\n      startEndOnly = false,\n      showXAxis = true,\n      showYAxis = true,\n      showGridLines = true,\n      yAxisWidth = 56,\n      intervalType = \"equidistantPreserveStart\",\n      showTooltip = true,\n      showLegend = true,\n      autoMinValue = false,\n      minValue,\n      maxValue,\n      allowDecimals = true,\n      connectNulls = false,\n      className,\n      onValueChange,\n      enableLegendSlider = false,\n      tickGap = 5,\n      xAxisLabel,\n      yAxisLabel,\n      ...other\n    } = props\n    const paddingValue = !showXAxis && !showYAxis ? 0 : 20\n    const [legendHeight, setLegendHeight] = React.useState(60)\n    const [activeDot, setActiveDot] = React.useState<ActiveDot | undefined>(\n      undefined,\n    )\n    const [activeLegend, setActiveLegend] = React.useState<string | undefined>(\n      undefined,\n    )\n    const categoryColors = constructCategoryColors(categories, colors)\n\n    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)\n    const hasOnValueChange = !!onValueChange\n\n    function onDotClick(itemData: any, event: React.MouseEvent) {\n      event.stopPropagation()\n\n      if (!hasOnValueChange) return\n      if (\n        (itemData.index === activeDot?.index &&\n          itemData.dataKey === activeDot?.dataKey) ||\n        (hasOnlyOneValueForKey(data, itemData.dataKey) &&\n          activeLegend &&\n          activeLegend === itemData.dataKey)\n      ) {\n        setActiveLegend(undefined)\n        setActiveDot(undefined)\n        onValueChange?.(null)\n      } else {\n        setActiveLegend(itemData.dataKey)\n        setActiveDot({\n          index: itemData.index,\n          dataKey: itemData.dataKey,\n        })\n        onValueChange?.({\n          eventType: \"dot\",\n          categoryClicked: itemData.dataKey,\n          ...itemData.payload,\n        })\n      }\n    }\n\n    function onCategoryClick(dataKey: string) {\n      if (!hasOnValueChange) return\n      if (\n        (dataKey === activeLegend && !activeDot) ||\n        (hasOnlyOneValueForKey(data, dataKey) &&\n          activeDot &&\n          activeDot.dataKey === dataKey)\n      ) {\n        setActiveLegend(undefined)\n        onValueChange?.(null)\n      } else {\n        setActiveLegend(dataKey)\n        onValueChange?.({\n          eventType: \"category\",\n          categoryClicked: dataKey,\n        })\n      }\n      setActiveDot(undefined)\n    }\n\n    return (\n      <div ref={ref} className={cx(\"h-80 w-full\", className)} {...other}>\n        <ResponsiveContainer>\n          <RechartsLineChart\n            data={data}\n            onClick={\n              hasOnValueChange && (activeLegend || activeDot)\n                ? () => {\n                    setActiveDot(undefined)\n                    setActiveLegend(undefined)\n                    onValueChange?.(null)\n                  }\n                : undefined\n            }\n            margin={{\n              bottom: xAxisLabel ? 30 : undefined,\n              left: yAxisLabel ? 20 : undefined,\n              right: yAxisLabel ? 5 : undefined,\n              top: 0,\n            }}\n          >\n            {showGridLines ? (\n              <CartesianGrid\n                className={cx(\"stroke-gray-200 stroke-1 dark:stroke-gray-800\")}\n                horizontal={true}\n                vertical={false}\n              />\n            ) : null}\n            <XAxis\n              padding={{ left: paddingValue, right: paddingValue }}\n              hide={!showXAxis}\n              dataKey={index}\n              interval={startEndOnly ? \"preserveStartEnd\" : intervalType}\n              tick={{ transform: \"translate(0, 6)\" }}\n              ticks={\n                startEndOnly\n                  ? [data[0][index], data[data.length - 1][index]]\n                  : undefined\n              }\n              fill=\"\"\n              stroke=\"\"\n              className={cx(\n                // base\n                \"text-xs\",\n                // text fill\n                \"fill-gray-500 dark:fill-gray-500\",\n              )}\n              tickLine={false}\n              axisLine={false}\n              minTickGap={tickGap}\n            >\n              {xAxisLabel && (\n                <Label\n                  position=\"insideBottom\"\n                  offset={-20}\n                  className=\"fill-gray-800 text-sm font-medium dark:fill-gray-200\"\n                >\n                  {xAxisLabel}\n                </Label>\n              )}\n            </XAxis>\n            <YAxis\n              width={yAxisWidth}\n              hide={!showYAxis}\n              axisLine={false}\n              tickLine={false}\n              type=\"number\"\n              domain={yAxisDomain as AxisDomain}\n              tick={{ transform: \"translate(-3, 0)\" }}\n              fill=\"\"\n              stroke=\"\"\n              className={cx(\n                // base\n                \"text-xs\",\n                // text fill\n                \"fill-gray-500 dark:fill-gray-500\",\n              )}\n              tickFormatter={valueFormatter}\n              allowDecimals={allowDecimals}\n            >\n              {yAxisLabel && (\n                <Label\n                  position=\"insideLeft\"\n                  style={{ textAnchor: \"middle\" }}\n                  angle={-90}\n                  offset={-15}\n                  className=\"fill-gray-800 text-sm font-medium dark:fill-gray-200\"\n                >\n                  {yAxisLabel}\n                </Label>\n              )}\n            </YAxis>\n            <Tooltip\n              wrapperStyle={{ outline: \"none\" }}\n              isAnimationActive={true}\n              animationDuration={100}\n              cursor={{ stroke: \"#d1d5db\", strokeWidth: 1 }}\n              offset={20}\n              position={{ y: 0 }}\n              content={\n                showTooltip ? (\n                  ({ active, payload, label }) => (\n                    <OverviewChartTooltip\n                      active={active}\n                      payload={payload}\n                      label={label}\n                      valueFormatter={valueFormatter}\n                      categoryColors={categoryColors}\n                    />\n                  )\n                ) : (\n                  <></>\n                )\n              }\n            />\n            {showLegend ? (\n              <RechartsLegend\n                verticalAlign=\"top\"\n                height={legendHeight}\n                content={({ payload }) =>\n                  ChartLegend(\n                    { payload },\n                    categoryColors,\n                    setLegendHeight,\n                    activeLegend,\n                    hasOnValueChange\n                      ? (clickedLegendItem: string) =>\n                          onCategoryClick(clickedLegendItem)\n                      : undefined,\n                    enableLegendSlider,\n                  )\n                }\n              />\n            ) : null}\n            {categories.map((category) => (\n              <Line\n                className={cx(\n                  getColorClassName(\n                    categoryColors.get(category) as AvailableChartColorsKeys,\n                    \"stroke\",\n                  ),\n                )}\n                strokeOpacity={\n                  activeDot || (activeLegend && activeLegend !== category)\n                    ? 0.3\n                    : 1\n                }\n                activeDot={(props: any) => {\n                  const {\n                    cx: cxCoord,\n                    cy: cyCoord,\n                    stroke,\n                    strokeLinecap,\n                    strokeLinejoin,\n                    strokeWidth,\n                    dataKey,\n                  } = props\n                  return (\n                    <Dot\n                      className={cx(\n                        \"stroke-white dark:stroke-gray-950\",\n                        onValueChange ? \"cursor-pointer\" : \"\",\n                        getColorClassName(\n                          categoryColors.get(\n                            dataKey,\n                          ) as AvailableChartColorsKeys,\n                          \"fill\",\n                        ),\n                      )}\n                      cx={cxCoord}\n                      cy={cyCoord}\n                      r={5}\n                      fill=\"\"\n                      stroke={stroke}\n                      strokeLinecap={strokeLinecap}\n                      strokeLinejoin={strokeLinejoin}\n                      strokeWidth={strokeWidth}\n                      onClick={(_, event) => onDotClick(props, event)}\n                    />\n                  )\n                }}\n                dot={(props: any) => {\n                  const {\n                    stroke,\n                    strokeLinecap,\n                    strokeLinejoin,\n                    strokeWidth,\n                    cx: cxCoord,\n                    cy: cyCoord,\n                    dataKey,\n                    index,\n                  } = props\n\n                  if (\n                    (hasOnlyOneValueForKey(data, category) &&\n                      !(\n                        activeDot ||\n                        (activeLegend && activeLegend !== category)\n                      )) ||\n                    (activeDot?.index === index &&\n                      activeDot?.dataKey === category)\n                  ) {\n                    return (\n                      <Dot\n                        key={index}\n                        cx={cxCoord}\n                        cy={cyCoord}\n                        r={5}\n                        stroke={stroke}\n                        fill=\"\"\n                        strokeLinecap={strokeLinecap}\n                        strokeLinejoin={strokeLinejoin}\n                        strokeWidth={strokeWidth}\n                        className={cx(\n                          \"stroke-white dark:stroke-gray-950\",\n                          onValueChange ? \"cursor-pointer\" : \"\",\n                          getColorClassName(\n                            categoryColors.get(\n                              dataKey,\n                            ) as AvailableChartColorsKeys,\n                            \"fill\",\n                          ),\n                        )}\n                      />\n                    )\n                  }\n                  return <React.Fragment key={index}></React.Fragment>\n                }}\n                key={category}\n                name={category}\n                type=\"linear\"\n                dataKey={category}\n                stroke=\"\"\n                strokeWidth={2}\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n                isAnimationActive={false}\n                connectNulls={connectNulls}\n              />\n            ))}\n            {/* hidden lines to increase clickable target area */}\n            {onValueChange\n              ? categories.map((category) => (\n                  <Line\n                    className={cx(\"cursor-pointer\")}\n                    strokeOpacity={0}\n                    key={category}\n                    name={category}\n                    type=\"linear\"\n                    dataKey={category}\n                    stroke=\"transparent\"\n                    fill=\"transparent\"\n                    legendType=\"none\"\n                    tooltipType=\"none\"\n                    strokeWidth={12}\n                    connectNulls={connectNulls}\n                    onClick={(props: any, event) => {\n                      event.stopPropagation()\n                      const { name } = props\n                      onCategoryClick(name)\n                    }}\n                  />\n                ))\n              : null}\n          </RechartsLineChart>\n        </ResponsiveContainer>\n      </div>\n    )\n  },\n)\n\nLineChart.displayName = \"LineChart\"\n\nexport { LineChart, type LineChartEventProps }\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/Popover.tsx",
      "content": "// Tremor Raw Popover [v0.0.2]\n\nimport * as PopoverPrimitives from \"@radix-ui/react-popover\"\nimport React from \"react\"\n\nimport { cx } from \"@/lib/utils\"\n\nconst Popover = (\n  props: React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Root>,\n) => {\n  return <PopoverPrimitives.Root {...props} />\n}\n\nPopover.displayName = \"Popover\"\n\nconst PopoverTrigger = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Trigger>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Trigger>\n>((props, forwardedRef) => {\n  return <PopoverPrimitives.Trigger ref={forwardedRef} {...props} />\n})\n\nPopoverTrigger.displayName = \"PopoverTrigger\"\n\nconst PopoverAnchor = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Anchor>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Anchor>\n>((props, forwardedRef) => {\n  return <PopoverPrimitives.Anchor ref={forwardedRef} {...props} />\n})\n\nPopoverAnchor.displayName = \"PopoverAnchor\"\n\nconst PopoverClose = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Close>\n>((props, forwardedRef) => {\n  return <PopoverPrimitives.Close ref={forwardedRef} {...props} />\n})\n\nPopoverClose.displayName = \"PopoverClose\"\n\ninterface ContentProps\n  extends React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Content> {}\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Content>,\n  ContentProps\n>(\n  (\n    {\n      className,\n      sideOffset = 10,\n      side = \"bottom\",\n      align = \"center\",\n      collisionPadding,\n      avoidCollisions = true,\n      ...props\n    }: ContentProps,\n    forwardedRef,\n  ) => {\n    return (\n      <PopoverPrimitives.Portal>\n        <PopoverPrimitives.Content\n          ref={forwardedRef}\n          sideOffset={sideOffset}\n          side={side}\n          align={align}\n          collisionPadding={collisionPadding}\n          avoidCollisions={avoidCollisions}\n          className={cx(\n            // base\n            \"max-h-[var(--radix-popper-available-height)] min-w-60 overflow-hidden rounded-md border p-2.5 text-sm shadow-md\",\n            // border color\n            \"border-gray-200 dark:border-gray-800\",\n            // text color\n            \"text-gray-900 dark:text-gray-50\",\n            // background color\n            \"bg-white dark:bg-gray-950\",\n            // transition\n            \"will-change-[transform,opacity]\",\n            \"data-[state=closed]:animate-hide\",\n            \"data-[state=open]:data-[side=bottom]:animate-slideDownAndFade data-[state=open]:data-[side=left]:animate-slideLeftAndFade data-[state=open]:data-[side=right]:animate-slideRightAndFade data-[state=open]:data-[side=top]:animate-slideUpAndFade\",\n\n            className,\n          )}\n          // https://github.com/radix-ui/primitives/issues/1159\n          onWheel={(event) => {\n            event.stopPropagation()\n            const isScrollingDown = event.deltaY > 0\n            if (isScrollingDown) {\n              event.currentTarget.dispatchEvent(\n                new KeyboardEvent(\"keydown\", { key: \"ArrowDown\" }),\n              )\n            } else {\n              event.currentTarget.dispatchEvent(\n                new KeyboardEvent(\"keydown\", { key: \"ArrowUp\" }),\n              )\n            }\n          }}\n          {...props}\n        />\n      </PopoverPrimitives.Portal>\n    )\n  },\n)\nPopoverContent.displayName = \"PopoverContent\"\n\nexport { Popover, PopoverAnchor, PopoverClose, PopoverContent, PopoverTrigger }\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ProgressBar.tsx",
      "content": "// Tremor Raw ProgressBar [v0.0.1]\n\nimport React from \"react\"\nimport { tv, type VariantProps } from \"tailwind-variants\"\n\nimport { cx } from \"@/lib/utils\"\n\nconst progressBarVariants = tv({\n  slots: {\n    background: \"\",\n    bar: \"\",\n  },\n  variants: {\n    variant: {\n      default: {\n        background: \"bg-indigo-100 dark:bg-indigo-500/30\",\n        bar: \"bg-indigo-600 dark:bg-indigo-500\",\n      },\n      neutral: {\n        background: \"bg-gray-200 dark:bg-gray-500/40\",\n        bar: \"bg-gray-500 dark:bg-gray-500\",\n      },\n      warning: {\n        background: \"bg-yellow-200 dark:bg-yellow-500/30\",\n        bar: \"bg-yellow-500 dark:bg-yellow-500\",\n      },\n      error: {\n        background: \"bg-red-200 dark:bg-red-500/30\",\n        bar: \"bg-red-500 dark:bg-red-500\",\n      },\n      success: {\n        background: \"bg-emerald-200 dark:bg-emerald-500/30\",\n        bar: \"bg-emerald-500 dark:bg-emerald-500\",\n      },\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n})\n\ninterface ProgressBarProps\n  extends React.HTMLProps<HTMLDivElement>,\n    VariantProps<typeof progressBarVariants> {\n  value?: number\n  max?: number\n  showAnimation?: boolean\n  label?: string\n}\n\nconst ProgressBar = React.forwardRef<HTMLDivElement, ProgressBarProps>(\n  (\n    {\n      value = 0,\n      max = 100,\n      label,\n      showAnimation = false,\n      variant,\n      className,\n      ...props\n    }: ProgressBarProps,\n    forwardedRef,\n  ) => {\n    const safeValue = Math.min(max, Math.max(value, 0))\n    const { background, bar } = progressBarVariants({ variant })\n    return (\n      <div\n        ref={forwardedRef}\n        className={cx(\"flex w-full items-center\", className)}\n        {...props}\n      >\n        <div\n          className={cx(\n            \"relative flex h-2 w-full items-center rounded-full\",\n            background(),\n          )}\n          aria-label=\"progress bar\"\n          aria-valuenow={value}\n          aria-valuemax={max}\n        >\n          <div\n            className={cx(\n              \"h-full flex-col rounded-full\",\n              bar(),\n              showAnimation &&\n                \"transform-gpu transition-all duration-300 ease-in-out\",\n            )}\n            style={{\n              width: max ? `${(safeValue / max) * 100}%` : `${safeValue}%`,\n            }}\n          />\n        </div>\n        {label ? (\n          <span\n            className={cx(\n              // base\n              \"ml-2 whitespace-nowrap text-sm font-medium leading-none\",\n              // text color\n              \"text-gray-900 dark:text-gray-50\",\n            )}\n          >\n            {label}\n          </span>\n        ) : null}\n      </div>\n    )\n  },\n)\n\nProgressBar.displayName = \"ProgressBar\"\n\nexport { ProgressBar, progressBarVariants, type ProgressBarProps }\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/RadioCard.tsx",
      "content": "// Tremor Raw Radio Card [v0.0.1]\n\nimport * as RadioGroupPrimitives from \"@radix-ui/react-radio-group\"\nimport React from \"react\"\n\nimport { cx, focusInput, focusRing } from \"@/lib/utils\"\n\nconst RadioCardGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Root>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <RadioGroupPrimitives.Root\n      ref={forwardedRef}\n      className={cx(\"grid gap-2\", className)}\n      {...props}\n    />\n  )\n})\n\nRadioCardGroup.displayName = \"RadioCardGroup\"\n\nconst RadioCardItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitives.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Item>\n>(({ className, children, ...props }, forwardedRef) => {\n  return (\n    <RadioGroupPrimitives.Item\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"group relative w-full rounded-md border p-4 text-left shadow-sm transition focus:outline-none\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        // border color\n        \"border-gray-300 dark:border-gray-800\",\n        \"data-[state=checked]:border-indigo-600\",\n        \"data-[state=checked]:dark:border-indigo-600\",\n        // disabled\n        \"data-[disabled]:border-gray-100 data-[disabled]:dark:border-gray-800\",\n        \"data-[disabled]:bg-gray-50 data-[disabled]:shadow-none data-[disabled]:dark:bg-gray-900\",\n        focusInput,\n        className,\n      )}\n      {...props}\n    >\n      {children}\n    </RadioGroupPrimitives.Item>\n  )\n})\n\nRadioCardItem.displayName = \"RadioCardItem\"\n\nconst RadioCardIndicator = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitives.Indicator>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitives.Indicator>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <div\n      className={cx(\n        // base\n        \"relative flex size-4 shrink-0 appearance-none items-center justify-center rounded-full border shadow-sm outline-none\",\n        // border color\n        \"border-gray-200 dark:border-gray-800\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        // checked\n        \"group-data-[state=checked]:border-0 group-data-[state=checked]:border-transparent group-data-[state=checked]:bg-indigo-600\",\n        // disabled\n        \"group-data-[disabled]:border-gray-300 group-data-[disabled]:bg-gray-100 group-data-[disabled]:text-gray-400\",\n        \"group-data-[disabled]:dark:border-gray-700 group-data-[disabled]:dark:bg-gray-800\",\n        // focus\n        focusRing,\n        className,\n      )}\n    >\n      <RadioGroupPrimitives.Indicator\n        ref={forwardedRef}\n        className={cx(\"flex items-center justify-center\")}\n        {...props}\n      >\n        <div\n          className={cx(\n            // base\n            \"size size-1.5 shrink-0 rounded-full\",\n            // indicator\n            \"bg-white\",\n            // disabled\n            \"group-data-[disabled]:bg-gray-400 group-data-[disabled]:dark:bg-gray-500\",\n          )}\n        />\n      </RadioGroupPrimitives.Indicator>\n    </div>\n  )\n})\n\nRadioCardIndicator.displayName = \"RadioCardIndicator\"\n\nexport { RadioCardGroup, RadioCardIndicator, RadioCardItem }\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/Select.tsx",
      "content": "// Tremor Raw Select [v0.0.2]\n\nimport * as SelectPrimitives from \"@radix-ui/react-select\"\nimport {\n  RiArrowDownSLine,\n  RiArrowUpSLine,\n  RiCheckLine,\n  RiExpandUpDownLine,\n} from \"@remixicon/react\"\nimport React from \"react\"\n\nimport { cx, focusInput, hasErrorInput } from \"@/lib/utils\"\n\nconst Select = SelectPrimitives.Root\nSelect.displayName = \"Select\"\n\nconst SelectGroup = SelectPrimitives.Group\nSelectGroup.displayName = \"SelectGroup\"\n\nconst SelectValue = SelectPrimitives.Value\nSelectValue.displayName = \"SelectValue\"\n\nconst selectTriggerStyles = [\n  cx(\n    // base\n    \"group/trigger flex w-full select-none items-center justify-between gap-2 truncate rounded-md border px-3 py-2 shadow-sm outline-none transition sm:text-sm\",\n    // border color\n    \"border-gray-300 dark:border-gray-800\",\n    // text color\n    \"text-gray-900 dark:text-gray-50\",\n    // placeholder\n    \"data-[placeholder]:text-gray-500 data-[placeholder]:dark:text-gray-500\",\n    // background color\n    \"bg-white dark:bg-gray-950\",\n    // hover\n    \"hover:bg-gray-50 hover:dark:bg-gray-950/50\",\n    // disabled\n    \"data-[disabled]:bg-gray-100 data-[disabled]:text-gray-400\",\n    \"data-[disabled]:dark:border-gray-700 data-[disabled]:dark:bg-gray-800 data-[disabled]:dark:text-gray-500\",\n    focusInput,\n    // invalid (optional)\n    // \"aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500\"\n  ),\n]\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Trigger> & {\n    hasError?: boolean\n  }\n>(({ className, hasError, children, ...props }, forwardedRef) => {\n  return (\n    <SelectPrimitives.Trigger\n      ref={forwardedRef}\n      className={cx(\n        selectTriggerStyles,\n        hasError ? hasErrorInput : \"\",\n        className,\n      )}\n      {...props}\n    >\n      <span className=\"truncate\">{children}</span>\n      <SelectPrimitives.Icon asChild>\n        <RiExpandUpDownLine\n          className={cx(\n            // base\n            \"size-4 shrink-0\",\n            // text color\n            \"text-gray-400 dark:text-gray-600\",\n            // disabled\n            \"group-data-[disabled]/trigger:text-gray-300 group-data-[disabled]/trigger:dark:text-gray-600\",\n          )}\n        />\n      </SelectPrimitives.Icon>\n    </SelectPrimitives.Trigger>\n  )\n})\n\nSelectTrigger.displayName = \"SelectTrigger\"\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.ScrollUpButton>\n>(({ className, ...props }, forwardedRef) => (\n  <SelectPrimitives.ScrollUpButton\n    ref={forwardedRef}\n    className={cx(\n      \"flex cursor-default items-center justify-center py-1\",\n      className,\n    )}\n    {...props}\n  >\n    <RiArrowUpSLine className=\"size-3 shrink-0\" aria-hidden=\"true\" />\n  </SelectPrimitives.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitives.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.ScrollDownButton>\n>(({ className, ...props }, forwardedRef) => (\n  <SelectPrimitives.ScrollDownButton\n    ref={forwardedRef}\n    className={cx(\n      \"flex cursor-default items-center justify-center py-1\",\n      className,\n    )}\n    {...props}\n  >\n    <RiArrowDownSLine className=\"size-3 shrink-0\" aria-hidden=\"true\" />\n  </SelectPrimitives.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitives.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Content>\n>(\n  (\n    {\n      className,\n      position = \"popper\",\n      children,\n      sideOffset = 8,\n      collisionPadding = 10,\n      ...props\n    },\n    forwardedRef,\n  ) => (\n    <SelectPrimitives.Portal>\n      <SelectPrimitives.Content\n        ref={forwardedRef}\n        className={cx(\n          // base\n          \"relative z-50 overflow-hidden rounded-md border shadow-xl shadow-black/[2.5%]\",\n          // widths\n          \"min-w-[calc(var(--radix-select-trigger-width)-2px)] max-w-[95vw]\",\n          // heights\n          \"max-h-[--radix-select-content-available-height]\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n          // text color\n          \"text-gray-900 dark:text-gray-50\",\n          // border color\n          \"border-gray-200 dark:border-gray-800\",\n          // transition\n          \"will-change-[transform,opacity]\",\n          // \"data-[state=open]:animate-slideDownAndFade\",\n          \"data-[state=closed]:animate-hide\",\n          \"data-[side=bottom]:animate-slideDownAndFade data-[side=left]:animate-slideLeftAndFade data-[side=right]:animate-slideRightAndFade data-[side=top]:animate-slideUpAndFade\",\n          className,\n        )}\n        sideOffset={sideOffset}\n        position={position}\n        collisionPadding={collisionPadding}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitives.Viewport\n          className={cx(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[calc(var(--radix-select-trigger-width))]\",\n          )}\n        >\n          {children}\n        </SelectPrimitives.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitives.Content>\n    </SelectPrimitives.Portal>\n  ),\n)\n\nSelectContent.displayName = \"SelectContent\"\n\nconst SelectGroupLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Label>\n>(({ className, ...props }, forwardedRef) => (\n  <SelectPrimitives.Label\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"px-3 py-2 text-xs font-medium tracking-wide\",\n      // text color\n      \"text-gray-500 dark:text-gray-500\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nSelectGroupLabel.displayName = \"SelectGroupLabel\"\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Item>\n>(({ className, children, ...props }, forwardedRef) => {\n  return (\n    <SelectPrimitives.Item\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"grid cursor-pointer grid-cols-[1fr_20px] gap-x-2 rounded px-3 py-2 outline-none transition-colors data-[state=checked]:font-semibold sm:text-sm\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // disabled\n        \"data-[disabled]:pointer-events-none data-[disabled]:text-gray-400 data-[disabled]:hover:bg-none dark:data-[disabled]:text-gray-600\",\n        // focus\n        \"focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900\",\n        // hover\n        \"hover:bg-gray-100 hover:dark:bg-gray-900\",\n        className,\n      )}\n      {...props}\n    >\n      <SelectPrimitives.ItemText className=\"flex-1 truncate\">\n        {children}\n      </SelectPrimitives.ItemText>\n      <SelectPrimitives.ItemIndicator>\n        <RiCheckLine\n          className=\"size-5 shrink-0 text-gray-800 dark:text-gray-200\"\n          aria-hidden=\"true\"\n        />\n      </SelectPrimitives.ItemIndicator>\n    </SelectPrimitives.Item>\n  )\n})\n\nSelectItem.displayName = \"SelectItem\"\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitives.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitives.Separator>\n>(({ className, ...props }, forwardedRef) => (\n  <SelectPrimitives.Separator\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"-mx-1 my-1 h-px\",\n      // background color\n      \"bg-gray-300 dark:bg-gray-700\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nSelectSeparator.displayName = \"SelectSeparator\"\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectGroupLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n",
      "type": "registry:component"
    }
  ]
}