{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dashboard-chart-card",
  "type": "registry:component",
  "title": "Dashboard Chart Card",
  "description": "A dashboard chart card component.",
  "files": [
    {
      "path": "src/components/ui/overview/DashboardChartCard.tsx",
      "content": "import { PeriodValue } from \"@/app/(main)/overview/page\"\nimport { Badge } from \"@/components/Badge\"\nimport { LineChart } from \"@/components/LineChart\"\nimport { overviews } from \"@/data/overview-data\"\nimport { OverviewData } from \"@/data/schema\"\nimport { cx, formatters, percentageFormatter } from \"@/lib/utils\"\nimport {\n  eachDayOfInterval,\n  formatDate,\n  interval,\n  isWithinInterval,\n} from \"date-fns\"\nimport { DateRange } from \"react-day-picker\"\nimport { getPeriod } from \"./DashboardFilterbar\"\n\nexport type CardProps = {\n  title: keyof OverviewData\n  type: \"currency\" | \"unit\"\n  selectedDates: DateRange | undefined\n  selectedPeriod: PeriodValue\n  isThumbnail?: boolean\n}\n\nconst formattingMap = {\n  currency: formatters.currency,\n  unit: formatters.unit,\n}\n\nexport const getBadgeType = (value: number) => {\n  if (value > 0) {\n    return \"success\"\n  } else if (value < 0) {\n    if (value < -50) {\n      return \"warning\"\n    }\n    return \"error\"\n  } else {\n    return \"neutral\"\n  }\n}\n\nexport function ChartCard({\n  title,\n  type,\n  selectedDates,\n  selectedPeriod,\n  isThumbnail,\n}: CardProps) {\n  const formatter = formattingMap[type]\n  const selectedDatesInterval =\n    selectedDates?.from && selectedDates?.to\n      ? interval(selectedDates.from, selectedDates.to)\n      : null\n  const allDatesInInterval =\n    selectedDates?.from && selectedDates?.to\n      ? eachDayOfInterval(interval(selectedDates.from, selectedDates.to))\n      : null\n  const prevDates = getPeriod(selectedDates)\n\n  const prevDatesInterval =\n    prevDates?.from && prevDates?.to\n      ? interval(prevDates.from, prevDates.to)\n      : null\n\n  const data = overviews\n    .filter((overview) => {\n      if (selectedDatesInterval) {\n        return isWithinInterval(overview.date, selectedDatesInterval)\n      }\n      return true\n    })\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n\n  const prevData = overviews\n    .filter((overview) => {\n      if (prevDatesInterval) {\n        return isWithinInterval(overview.date, prevDatesInterval)\n      }\n      return false\n    })\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n\n  const chartData = allDatesInInterval\n    ?.map((date, index) => {\n      const overview = data[index]\n      const prevOverview = prevData[index]\n      const value = (overview?.[title] as number) || null\n      const previousValue = (prevOverview?.[title] as number) || null\n\n      return {\n        title,\n        date: date,\n        formattedDate: formatDate(date, \"dd/MM/yyyy\"),\n        value,\n        previousDate: prevOverview?.date,\n        previousFormattedDate: prevOverview\n          ? formatDate(prevOverview.date, \"dd/MM/yyyy\")\n          : null,\n        previousValue:\n          selectedPeriod !== \"no-comparison\" ? previousValue : null,\n        evolution:\n          selectedPeriod !== \"no-comparison\" && value && previousValue\n            ? (value - previousValue) / previousValue\n            : undefined,\n      }\n    })\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n\n  const categories =\n    selectedPeriod === \"no-comparison\" ? [\"value\"] : [\"value\", \"previousValue\"]\n  const value =\n    chartData?.reduce((acc, item) => acc + (item.value || 0), 0) || 0\n  const previousValue =\n    chartData?.reduce((acc, item) => acc + (item.previousValue || 0), 0) || 0\n  const evolution =\n    selectedPeriod !== \"no-comparison\"\n      ? (value - previousValue) / previousValue\n      : 0\n\n  return (\n    <div className={cx(\"transition\")}>\n      <div className=\"flex items-center justify-between gap-x-2\">\n        <div className=\"flex items-center gap-x-2\">\n          <dt className=\"font-bold text-gray-900 sm:text-sm dark:text-gray-50\">\n            {title}\n          </dt>\n          {selectedPeriod !== \"no-comparison\" && (\n            <Badge variant={getBadgeType(evolution)}>\n              {percentageFormatter(evolution)}\n            </Badge>\n          )}\n        </div>\n      </div>\n      <div className=\"mt-2 flex items-baseline justify-between\">\n        <dd className=\"text-xl text-gray-900 dark:text-gray-50\">\n          {formatter(value)}\n        </dd>\n        {selectedPeriod !== \"no-comparison\" && (\n          <dd className=\"text-sm text-gray-500\">\n            from {formatter(previousValue)}\n          </dd>\n        )}\n      </div>\n      <LineChart\n        className=\"mt-6 h-32\"\n        data={chartData || []}\n        index=\"formattedDate\"\n        colors={[\"indigo\", \"gray\"]}\n        startEndOnly={true}\n        valueFormatter={(value) => formatter(value as number)}\n        showYAxis={false}\n        showLegend={false}\n        categories={categories}\n        showTooltip={isThumbnail ? false : true}\n        autoMinValue\n      />\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}