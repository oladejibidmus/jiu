{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "popover",
  "type": "registry:component",
  "title": "Popover",
  "description": "A popover component.",
  "files": [
    {
      "path": "src/components/Popover.tsx",
      "content": "// Tremor Raw Popover [v0.0.2]\n\nimport * as PopoverPrimitives from \"@radix-ui/react-popover\"\nimport React from \"react\"\n\nimport { cx } from \"@/lib/utils\"\n\nconst Popover = (\n  props: React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Root>,\n) => {\n  return <PopoverPrimitives.Root {...props} />\n}\n\nPopover.displayName = \"Popover\"\n\nconst PopoverTrigger = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Trigger>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Trigger>\n>((props, forwardedRef) => {\n  return <PopoverPrimitives.Trigger ref={forwardedRef} {...props} />\n})\n\nPopoverTrigger.displayName = \"PopoverTrigger\"\n\nconst PopoverAnchor = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Anchor>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Anchor>\n>((props, forwardedRef) => {\n  return <PopoverPrimitives.Anchor ref={forwardedRef} {...props} />\n})\n\nPopoverAnchor.displayName = \"PopoverAnchor\"\n\nconst PopoverClose = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Close>\n>((props, forwardedRef) => {\n  return <PopoverPrimitives.Close ref={forwardedRef} {...props} />\n})\n\nPopoverClose.displayName = \"PopoverClose\"\n\ninterface ContentProps\n  extends React.ComponentPropsWithoutRef<typeof PopoverPrimitives.Content> {}\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Content>,\n  ContentProps\n>(\n  (\n    {\n      className,\n      sideOffset = 10,\n      side = \"bottom\",\n      align = \"center\",\n      collisionPadding,\n      avoidCollisions = true,\n      ...props\n    }: ContentProps,\n    forwardedRef,\n  ) => {\n    return (\n      <PopoverPrimitives.Portal>\n        <PopoverPrimitives.Content\n          ref={forwardedRef}\n          sideOffset={sideOffset}\n          side={side}\n          align={align}\n          collisionPadding={collisionPadding}\n          avoidCollisions={avoidCollisions}\n          className={cx(\n            // base\n            \"max-h-[var(--radix-popper-available-height)] min-w-60 overflow-hidden rounded-md border p-2.5 text-sm shadow-md\",\n            // border color\n            \"border-gray-200 dark:border-gray-800\",\n            // text color\n            \"text-gray-900 dark:text-gray-50\",\n            // background color\n            \"bg-white dark:bg-gray-950\",\n            // transition\n            \"will-change-[transform,opacity]\",\n            \"data-[state=closed]:animate-hide\",\n            \"data-[state=open]:data-[side=bottom]:animate-slideDownAndFade data-[state=open]:data-[side=left]:animate-slideLeftAndFade data-[state=open]:data-[side=right]:animate-slideRightAndFade data-[state=open]:data-[side=top]:animate-slideUpAndFade\",\n\n            className,\n          )}\n          // https://github.com/radix-ui/primitives/issues/1159\n          onWheel={(event) => {\n            event.stopPropagation()\n            const isScrollingDown = event.deltaY > 0\n            if (isScrollingDown) {\n              event.currentTarget.dispatchEvent(\n                new KeyboardEvent(\"keydown\", { key: \"ArrowDown\" }),\n              )\n            } else {\n              event.currentTarget.dispatchEvent(\n                new KeyboardEvent(\"keydown\", { key: \"ArrowUp\" }),\n              )\n            }\n          }}\n          {...props}\n        />\n      </PopoverPrimitives.Portal>\n    )\n  },\n)\nPopoverContent.displayName = \"PopoverContent\"\n\nexport { Popover, PopoverAnchor, PopoverClose, PopoverContent, PopoverTrigger }\n",
      "type": "registry:component"
    }
  ]
}