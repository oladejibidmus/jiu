{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sidebar-workspaces-dropdown",
  "type": "registry:component",
  "title": "Sidebar Workspaces Dropdown",
  "description": "A sidebar workspaces dropdown component.",
  "files": [
    {
      "path": "src/components/ui/navigation/SidebarWorkspacesDropdown.tsx",
      "content": "\"use client\"\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/Dropdown\"\nimport { cx, focusInput } from \"@/lib/utils\"\nimport { RiArrowRightSLine, RiExpandUpDownLine } from \"@remixicon/react\"\nimport React from \"react\"\nimport { ModalAddWorkspace } from \"./ModalAddWorkspace\"\n\nconst workspaces = [\n  {\n    value: \"retail-analytics\",\n    name: \"Retail analytics\",\n    initials: \"RA\",\n    role: \"Member\",\n    color: \"bg-indigo-600 dark:bg-indigo-500\",\n  },\n  // Add more workspaces...\n]\n\nexport const WorkspacesDropdownDesktop = () => {\n  const [dropdownOpen, setDropdownOpen] = React.useState(false)\n  const [hasOpenDialog, setHasOpenDialog] = React.useState(false)\n  const dropdownTriggerRef = React.useRef<null | HTMLButtonElement>(null)\n  const focusRef = React.useRef<null | HTMLButtonElement>(null)\n\n  const handleDialogItemSelect = () => {\n    focusRef.current = dropdownTriggerRef.current\n  }\n\n  const handleDialogItemOpenChange = (open: boolean) => {\n    setHasOpenDialog(open)\n    if (open === false) {\n      setDropdownOpen(false)\n    }\n  }\n  return (\n    <>\n      {/* sidebar (lg+) */}\n      <DropdownMenu\n        open={dropdownOpen}\n        onOpenChange={setDropdownOpen}\n        modal={false}\n      >\n        <DropdownMenuTrigger asChild>\n          <button\n            className={cx(\n              \"flex w-full items-center gap-x-2.5 rounded-md border border-gray-300 bg-white p-2 text-sm shadow-sm transition-all hover:bg-gray-50 dark:border-gray-800 dark:bg-gray-950 hover:dark:bg-gray-900\",\n              focusInput,\n            )}\n          >\n            <span\n              className=\"flex aspect-square size-8 items-center justify-center rounded bg-indigo-600 p-2 text-xs font-medium text-white dark:bg-indigo-500\"\n              aria-hidden=\"true\"\n            >\n              RA\n            </span>\n            <div className=\"flex w-full items-center justify-between gap-x-4 truncate\">\n              <div className=\"truncate\">\n                <p className=\"truncate whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-50\">\n                  Retail analytics\n                </p>\n                <p className=\"whitespace-nowrap text-left text-xs text-gray-700 dark:text-gray-300\">\n                  Member\n                </p>\n              </div>\n              <RiExpandUpDownLine\n                className=\"size-5 shrink-0 text-gray-500\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent\n          hidden={hasOpenDialog}\n          onCloseAutoFocus={(event) => {\n            if (focusRef.current) {\n              focusRef.current.focus()\n              focusRef.current = null\n              event.preventDefault()\n            }\n          }}\n        >\n          <DropdownMenuGroup>\n            <DropdownMenuLabel>\n              Workspaces ({workspaces.length})\n            </DropdownMenuLabel>\n            {workspaces.map((workspace) => (\n              <DropdownMenuItem key={workspace.value}>\n                <div className=\"flex w-full items-center gap-x-2.5\">\n                  <span\n                    className={cx(\n                      workspace.color,\n                      \"flex aspect-square size-8 items-center justify-center rounded p-2 text-xs font-medium text-white\",\n                    )}\n                    aria-hidden=\"true\"\n                  >\n                    {workspace.initials}\n                  </span>\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-50\">\n                      {workspace.name}\n                    </p>\n                    <p className=\"text-xs text-gray-700 dark:text-gray-400\">\n                      {workspace.role}\n                    </p>\n                  </div>\n                </div>\n              </DropdownMenuItem>\n            ))}\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator />\n          <ModalAddWorkspace\n            onSelect={handleDialogItemSelect}\n            onOpenChange={handleDialogItemOpenChange}\n            itemName=\"Add workspace\"\n          />\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  )\n}\n\nexport const WorkspacesDropdownMobile = () => {\n  const [dropdownOpen, setDropdownOpen] = React.useState(false)\n  const [hasOpenDialog, setHasOpenDialog] = React.useState(false)\n  const dropdownTriggerRef = React.useRef<null | HTMLButtonElement>(null)\n  const focusRef = React.useRef<null | HTMLButtonElement>(null)\n\n  const handleDialogItemSelect = () => {\n    focusRef.current = dropdownTriggerRef.current\n  }\n\n  const handleDialogItemOpenChange = (open: boolean) => {\n    setHasOpenDialog(open)\n    if (open === false) {\n      setDropdownOpen(false)\n    }\n  }\n  return (\n    <>\n      {/* sidebar (xs-lg) */}\n      <DropdownMenu\n        open={dropdownOpen}\n        onOpenChange={setDropdownOpen}\n        modal={false}\n      >\n        <DropdownMenuTrigger asChild>\n          <button className=\"flex items-center gap-x-1.5 rounded-md p-2 hover:bg-gray-100 focus:outline-none hover:dark:bg-gray-900\">\n            <span\n              className={cx(\n                \"flex aspect-square size-7 items-center justify-center rounded bg-indigo-600 p-2 text-xs font-medium text-white dark:bg-indigo-500\",\n              )}\n              aria-hidden=\"true\"\n            >\n              RA\n            </span>\n            <RiArrowRightSLine\n              className=\"size-4 shrink-0 text-gray-500\"\n              aria-hidden=\"true\"\n            />\n            <div className=\"flex w-full items-center justify-between gap-x-3 truncate\">\n              <p className=\"truncate whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-50\">\n                Retail analytics\n              </p>\n              <RiExpandUpDownLine\n                className=\"size-4 shrink-0 text-gray-500\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent\n          className=\"!min-w-72\"\n          hidden={hasOpenDialog}\n          onCloseAutoFocus={(event) => {\n            if (focusRef.current) {\n              focusRef.current.focus()\n              focusRef.current = null\n              event.preventDefault()\n            }\n          }}\n        >\n          <DropdownMenuGroup>\n            <DropdownMenuLabel>\n              Workspaces ({workspaces.length})\n            </DropdownMenuLabel>\n            {workspaces.map((workspace) => (\n              <DropdownMenuItem key={workspace.value}>\n                <div className=\"flex w-full items-center gap-x-2.5\">\n                  <span\n                    className={cx(\n                      workspace.color,\n                      \"flex size-8 items-center justify-center rounded p-2 text-xs font-medium text-white\",\n                    )}\n                    aria-hidden=\"true\"\n                  >\n                    {workspace.initials}\n                  </span>\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-50\">\n                      {workspace.name}\n                    </p>\n                    <p className=\"text-xs text-gray-700 dark:text-gray-300\">\n                      {workspace.role}\n                    </p>\n                  </div>\n                </div>\n              </DropdownMenuItem>\n            ))}\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator />\n          <ModalAddWorkspace\n            onSelect={handleDialogItemSelect}\n            onOpenChange={handleDialogItemOpenChange}\n            itemName=\"Add workspace\"\n          />\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}