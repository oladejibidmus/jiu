{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drawer",
  "type": "registry:component",
  "title": "Drawer",
  "description": "A drawer component.",
  "files": [
    {
      "path": "src/components/Drawer.tsx",
      "content": "// Tremor Drawer [v0.0.2]\n\nimport * as DrawerPrimitives from \"@radix-ui/react-dialog\"\nimport { RiCloseLine } from \"@remixicon/react\"\nimport * as React from \"react\"\n\nimport { cx, focusRing } from \"@/lib/utils\"\n\nimport { Button } from \"./Button\"\n\nconst Drawer = (\n  props: React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Root>,\n) => {\n  return <DrawerPrimitives.Root tremor-id=\"tremor-raw\" {...props} />\n}\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Trigger>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Trigger>\n>(({ className, ...props }, ref) => {\n  return (\n    <DrawerPrimitives.Trigger ref={ref} className={cx(className)} {...props} />\n  )\n})\nDrawerTrigger.displayName = \"Drawer.Trigger\"\n\nconst DrawerClose = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Close>\n>(({ className, ...props }, ref) => {\n  return (\n    <DrawerPrimitives.Close ref={ref} className={cx(className)} {...props} />\n  )\n})\nDrawerClose.displayName = \"Drawer.Close\"\n\nconst DrawerPortal = DrawerPrimitives.Portal\n\nDrawerPortal.displayName = \"DrawerPortal\"\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Overlay>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DrawerPrimitives.Overlay\n      ref={forwardedRef}\n      className={cx(\n        // base\n        \"fixed inset-0 z-50 overflow-y-auto\",\n        // background color\n        \"bg-black/30\",\n        // transition\n        \"data-[state=closed]:animate-hide data-[state=open]:animate-dialogOverlayShow\",\n        className,\n      )}\n      {...props}\n      style={{\n        animationDuration: \"400ms\",\n        animationFillMode: \"backwards\",\n      }}\n    />\n  )\n})\n\nDrawerOverlay.displayName = \"DrawerOverlay\"\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Content>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DrawerPortal>\n      <DrawerOverlay>\n        <DrawerPrimitives.Content\n          ref={forwardedRef}\n          className={cx(\n            // base\n            \"fixed inset-y-2 z-50 mx-auto flex w-[95vw] flex-1 flex-col overflow-y-auto rounded-md border p-4 shadow-lg focus:outline-none max-sm:inset-x-2 sm:inset-y-2 sm:right-2 sm:max-w-lg sm:p-6\",\n            // border color\n            \"border-gray-200 dark:border-gray-900\",\n            // background color\n            \"bg-white dark:bg-[#090E1A]\",\n            // transition\n            \"data-[state=closed]:animate-drawerSlideRightAndFade data-[state=open]:animate-drawerSlideLeftAndFade\",\n            focusRing,\n            className,\n          )}\n          {...props}\n        />\n      </DrawerOverlay>\n    </DrawerPortal>\n  )\n})\n\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ children, className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className=\"flex items-start justify-between gap-x-4 border-b border-gray-200 pb-4 dark:border-gray-900\"\n      {...props}\n    >\n      <div className={cx(\"mt-1 flex flex-col gap-y-1\", className)}>\n        {children}\n      </div>\n      <DrawerPrimitives.Close asChild>\n        <Button\n          variant=\"ghost\"\n          className=\"aspect-square p-1 hover:bg-gray-100 hover:dark:bg-gray-400/10\"\n        >\n          <RiCloseLine className=\"size-6\" aria-hidden=\"true\" />\n        </Button>\n      </DrawerPrimitives.Close>\n    </div>\n  )\n})\n\nDrawerHeader.displayName = \"Drawer.Header\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Title>\n>(({ className, ...props }, forwardedRef) => (\n  <DrawerPrimitives.Title\n    ref={forwardedRef}\n    className={cx(\n      // base\n      \"text-base font-semibold\",\n      // text color\n      \"text-gray-900 dark:text-gray-50\",\n      className,\n    )}\n    {...props}\n  />\n))\n\nDrawerTitle.displayName = \"DrawerTitle\"\n\nconst DrawerBody = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => {\n  return <div ref={ref} className={cx(\"flex-1 py-4\", className)} {...props} />\n})\nDrawerBody.displayName = \"Drawer.Body\"\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitives.Description>\n>(({ className, ...props }, forwardedRef) => {\n  return (\n    <DrawerPrimitives.Description\n      ref={forwardedRef}\n      className={cx(\"text-gray-500 dark:text-gray-500\", className)}\n      {...props}\n    />\n  )\n})\n\nDrawerDescription.displayName = \"DrawerDescription\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div\n      className={cx(\n        \"flex flex-col-reverse border-t border-gray-200 pt-4 sm:flex-row sm:justify-end sm:space-x-2 dark:border-gray-900\",\n        className,\n      )}\n      {...props}\n    />\n  )\n}\n\nDrawerFooter.displayName = \"DrawerFooter\"\n\nexport {\n  Drawer,\n  DrawerBody,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n}\n",
      "type": "registry:component"
    }
  ]
}