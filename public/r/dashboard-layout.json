{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dashboard-layout",
  "type": "registry:block",
  "title": "Dashboard Layout",
  "description": "The main layout component for the dashboard.",
  "files": [
    {
      "path": "src/app/(main)/layout.tsx",
      "content": "export default function Layout({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <div className=\"relative\">\n      <div className=\"p-4 sm:px-6 sm:pb-10 sm:pt-10 lg:px-10 lg:pt-7\">\n        {children}\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/navigation/MobileSidebar.tsx",
      "content": "import { siteConfig } from \"@/app/siteConfig\"\nimport { Button } from \"@/components/Button\"\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/components/Drawer\"\nimport { cx, focusRing } from \"@/lib/utils\"\nimport {\n  RiHome2Line,\n  RiLinkM,\n  RiListCheck,\n  RiMenuLine,\n  RiSettings5Line,\n} from \"@remixicon/react\"\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\n\nconst navigation = [\n  { name: \"Overview\", href: siteConfig.baseLinks.overview, icon: RiHome2Line },\n  { name: \"Details\", href: siteConfig.baseLinks.details, icon: RiListCheck },\n  {\n    name: \"Settings\",\n    href: siteConfig.baseLinks.settings,\n    icon: RiSettings5Line,\n  },\n] as const\n\nconst shortcuts = [\n  {\n    name: \"Add new user\",\n    href: \"#\",\n    icon: RiLinkM,\n  },\n  {\n    name: \"Workspace usage\",\n    href: \"#\",\n    icon: RiLinkM,\n  },\n  {\n    name: \"Cost spend control\",\n    href: \"#\",\n    icon: RiLinkM,\n  },\n  {\n    name: \"Overview – Rows written\",\n    href: \"#\",\n    icon: RiLinkM,\n  },\n] as const\n\nexport default function MobileSidebar() {\n  const pathname = usePathname()\n  const isActive = (itemHref: string) => {\n    if (itemHref === siteConfig.baseLinks.settings) {\n      return pathname.startsWith(\"/settings\")\n    }\n    return pathname === itemHref || pathname.startsWith(itemHref)\n  }\n  return (\n    <>\n      <Drawer>\n        <DrawerTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            aria-label=\"open sidebar\"\n            className=\"group flex items-center rounded-md p-2 text-sm font-medium hover:bg-gray-100 data-[state=open]:bg-gray-100 data-[state=open]:bg-gray-400/10 hover:dark:bg-gray-400/10\"\n          >\n            <RiMenuLine\n              className=\"size-6 shrink-0 sm:size-5\"\n              aria-hidden=\"true\"\n            />\n          </Button>\n        </DrawerTrigger>\n        <DrawerContent className=\"sm:max-w-lg\">\n          <DrawerHeader>\n            <DrawerTitle>Retail Analytics</DrawerTitle>\n          </DrawerHeader>\n          <DrawerBody>\n            <nav\n              aria-label=\"core mobile navigation links\"\n              className=\"flex flex-1 flex-col space-y-10\"\n            >\n              <ul role=\"list\" className=\"space-y-1.5\">\n                {navigation.map((item) => (\n                  <li key={item.name}>\n                    <DrawerClose asChild>\n                      <Link\n                        href={item.href}\n                        className={cx(\n                          isActive(item.href)\n                            ? \"text-indigo-600 dark:text-indigo-400\"\n                            : \"text-gray-600 hover:text-gray-900 dark:text-gray-400 hover:dark:text-gray-50\",\n                          \"flex items-center gap-x-2.5 rounded-md px-2 py-1.5 text-base font-medium transition hover:bg-gray-100 sm:text-sm hover:dark:bg-gray-900\",\n                          focusRing,\n                        )}\n                      >\n                        <item.icon\n                          className=\"size-5 shrink-0\"\n                          aria-hidden=\"true\"\n                        />\n                        {item.name}\n                      </Link>\n                    </DrawerClose>\n                  </li>\n                ))}\n              </ul>\n              <div>\n                <span className=\"text-sm font-medium leading-6 text-gray-500 sm:text-xs\">\n                  Shortcuts\n                </span>\n                <ul aria-label=\"shortcuts\" role=\"list\" className=\"space-y-0.5\">\n                  {shortcuts.map((item) => (\n                    <li key={item.name}>\n                      <Link\n                        href={item.href}\n                        className={cx(\n                          pathname === item.href || pathname.includes(item.href)\n                            ? \"text-indigo-600 dark:text-indigo-400\"\n                            : \"text-gray-700 hover:text-gray-900 dark:text-gray-400 hover:dark:text-gray-50\",\n                          \"flex items-center gap-x-2.5 rounded-md px-2 py-1.5 font-medium transition hover:bg-gray-100 sm:text-sm hover:dark:bg-gray-900\",\n                          focusRing,\n                        )}\n                      >\n                        <item.icon\n                          className=\"size-4 shrink-0\"\n                          aria-hidden=\"true\"\n                        />\n                        {item.name}\n                      </Link>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </nav>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/navigation/sidebar.tsx",
      "content": "\"use client\"\nimport { siteConfig } from \"@/app/siteConfig\"\nimport { cx, focusRing } from \"@/lib/utils\"\nimport {\n  RiHome2Line,\n  RiLinkM,\n  RiListCheck,\n  RiSettings5Line,\n} from \"@remixicon/react\"\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\nimport MobileSidebar from \"./MobileSidebar\"\nimport {\n  WorkspacesDropdownDesktop,\n  WorkspacesDropdownMobile,\n} from \"./SidebarWorkspacesDropdown\"\nimport { UserProfileDesktop, UserProfileMobile } from \"./UserProfile\"\n\nconst navigation = [\n  { name: \"Overview\", href: siteConfig.baseLinks.overview, icon: RiHome2Line },\n  { name: \"Details\", href: siteConfig.baseLinks.details, icon: RiListCheck },\n  {\n    name: \"Settings\",\n    href: siteConfig.baseLinks.settings,\n    icon: RiSettings5Line,\n  },\n] as const\n\nconst shortcuts = [\n  {\n    name: \"Add new user\",\n    href: \"#\",\n    icon: RiLinkM,\n  },\n  {\n    name: \"Workspace usage\",\n    href: \"#\",\n    icon: RiLinkM,\n  },\n  {\n    name: \"Cost spend control\",\n    href: \"#\",\n    icon: RiLinkM,\n  },\n  {\n    name: \"Overview – Rows written\",\n    href: \"#\",\n    icon: RiLinkM,\n  },\n] as const\n\nexport function Sidebar() {\n  const pathname = usePathname()\n  const isActive = (itemHref: string) => {\n    if (itemHref === siteConfig.baseLinks.settings) {\n      return pathname.startsWith(\"/settings\")\n    }\n    return pathname === itemHref || pathname.startsWith(itemHref)\n  }\n  return (\n    <>\n      {/* sidebar (lg+) */}\n      <nav className=\"hidden lg:fixed lg:inset-y-0 lg:z-50 lg:flex lg:w-72 lg:flex-col\">\n        <aside className=\"flex grow flex-col gap-y-6 overflow-y-auto border-r border-gray-200 bg-white p-4 dark:border-gray-800 dark:bg-gray-950\">\n          <WorkspacesDropdownDesktop />\n          <nav\n            aria-label=\"core navigation links\"\n            className=\"flex flex-1 flex-col space-y-10\"\n          >\n            <ul role=\"list\" className=\"space-y-0.5\">\n              {navigation.map((item) => (\n                <li key={item.name}>\n                  <Link\n                    href={item.href}\n                    className={cx(\n                      isActive(item.href)\n                        ? \"text-indigo-600 dark:text-indigo-400\"\n                        : \"text-gray-700 hover:text-gray-900 dark:text-gray-400 hover:dark:text-gray-50\",\n                      \"flex items-center gap-x-2.5 rounded-md px-2 py-1.5 text-sm font-medium transition hover:bg-gray-100 hover:dark:bg-gray-900\",\n                      focusRing,\n                    )}\n                  >\n                    <item.icon className=\"size-4 shrink-0\" aria-hidden=\"true\" />\n                    {item.name}\n                  </Link>\n                </li>\n              ))}\n            </ul>\n            <div>\n              <span className=\"text-xs font-medium leading-6 text-gray-500\">\n                Shortcuts\n              </span>\n              <ul aria-label=\"shortcuts\" role=\"list\" className=\"space-y-0.5\">\n                {shortcuts.map((item) => (\n                  <li key={item.name}>\n                    <Link\n                      href={item.href}\n                      className={cx(\n                        pathname === item.href || pathname.startsWith(item.href)\n                          ? \"text-indigo-600 dark:text-indigo-400\"\n                          : \"text-gray-700 hover:text-gray-900 dark:text-gray-400 hover:dark:text-gray-50\",\n                        \"flex items-center gap-x-2.5 rounded-md px-2 py-1.5 text-sm font-medium transition hover:bg-gray-100 hover:dark:bg-gray-900\",\n                        focusRing,\n                      )}\n                    >\n                      <item.icon\n                        className=\"size-4 shrink-0\"\n                        aria-hidden=\"true\"\n                      />\n                      {item.name}\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </nav>\n          <div className=\"mt-auto\">\n            <UserProfileDesktop />\n          </div>\n        </aside>\n      </nav>\n      {/* top navbar (xs-lg) */}\n      <div className=\"sticky top-0 z-40 flex h-16 shrink-0 items-center justify-between border-b border-gray-200 bg-white px-2 shadow-sm sm:gap-x-6 sm:px-4 lg:hidden dark:border-gray-800 dark:bg-gray-950\">\n        <WorkspacesDropdownMobile />\n        <div className=\"flex items-center gap-1 sm:gap-2\">\n          <UserProfileMobile />\n          <MobileSidebar />\n        </div>\n      </div>\n    </>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/navigation/DropdownUserProfile.tsx",
      "content": "\"use client\"\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuSubMenu,\n  DropdownMenuSubMenuContent,\n  DropdownMenuSubMenuTrigger,\n  DropdownMenuTrigger,\n} from \"@/components/Dropdown\"\nimport {\n  RiArrowRightUpLine,\n  RiComputerLine,\n  RiMoonLine,\n  RiSunLine,\n} from \"@remixicon/react\"\nimport { useTheme } from \"next-themes\"\nimport * as React from \"react\"\n\nexport type DropdownUserProfileProps = {\n  children: React.ReactNode\n  align?: \"center\" | \"start\" | \"end\"\n}\n\nexport function DropdownUserProfile({\n  children,\n  align = \"start\",\n}: DropdownUserProfileProps) {\n  const [mounted, setMounted] = React.useState(false)\n  const { theme, setTheme } = useTheme()\n  React.useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  if (!mounted) {\n    return null\n  }\n  return (\n    <>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>{children}</DropdownMenuTrigger>\n        <DropdownMenuContent align={align}>\n          <DropdownMenuLabel>emma.stone@acme.com</DropdownMenuLabel>\n          <DropdownMenuGroup>\n            <DropdownMenuSubMenu>\n              <DropdownMenuSubMenuTrigger>Theme</DropdownMenuSubMenuTrigger>\n              <DropdownMenuSubMenuContent>\n                <DropdownMenuRadioGroup\n                  value={theme}\n                  onValueChange={(value) => {\n                    setTheme(value)\n                  }}\n                >\n                  <DropdownMenuRadioItem\n                    aria-label=\"Switch to Light Mode\"\n                    value=\"light\"\n                    iconType=\"check\"\n                  >\n                    <RiSunLine className=\"size-4 shrink-0\" aria-hidden=\"true\" />\n                    Light\n                  </DropdownMenuRadioItem>\n                  <DropdownMenuRadioItem\n                    aria-label=\"Switch to Dark Mode\"\n                    value=\"dark\"\n                    iconType=\"check\"\n                  >\n                    <RiMoonLine\n                      className=\"size-4 shrink-0\"\n                      aria-hidden=\"true\"\n                    />\n                    Dark\n                  </DropdownMenuRadioItem>\n                  <DropdownMenuRadioItem\n                    aria-label=\"Switch to System Mode\"\n                    value=\"system\"\n                    iconType=\"check\"\n                  >\n                    <RiComputerLine\n                      className=\"size-4 shrink-0\"\n                      aria-hidden=\"true\"\n                    />\n                    System\n                  </DropdownMenuRadioItem>\n                </DropdownMenuRadioGroup>\n              </DropdownMenuSubMenuContent>\n            </DropdownMenuSubMenu>\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator />\n          <DropdownMenuGroup>\n            <DropdownMenuItem>\n              Changelog\n              <RiArrowRightUpLine\n                className=\"mb-1 ml-1 size-2.5 shrink-0 text-gray-500\"\n                aria-hidden=\"true\"\n              />\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n              Documentation\n              <RiArrowRightUpLine\n                className=\"mb-1 ml-1 size-2.5 shrink-0 text-gray-500\"\n                aria-hidden=\"true\"\n              />\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n              Join Slack community\n              <RiArrowRightUpLine\n                className=\"mb-1 ml-1 size-2.5 shrink-0 text-gray-500\"\n                aria-hidden=\"true\"\n              />\n            </DropdownMenuItem>\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator />\n          <DropdownMenuGroup>\n            <DropdownMenuItem>Sign out</DropdownMenuItem>\n          </DropdownMenuGroup>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/navigation/ModalAddWorkspace.tsx",
      "content": "import { Badge } from \"@/components/Badge\"\nimport { Button } from \"@/components/Button\"\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/Dialog\"\nimport { DropdownMenuItem } from \"@/components/Dropdown\"\nimport { Input } from \"@/components/Input\"\nimport { Label } from \"@/components/Label\"\nimport { RadioCardGroup, RadioCardItem } from \"@/components/RadioCard\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/Select\"\n\nexport const databases: {\n  label: string\n  value: string\n  description: string\n  isRecommended: boolean\n}[] = [\n  {\n    label: \"Base performance\",\n    value: \"base-performance\",\n    description: \"1/8 vCPU, 1 GB RAM\",\n    isRecommended: true,\n  },\n  {\n    label: \"Advanced performance\",\n    value: \"advanced-performance\",\n    description: \"1/4 vCPU, 2 GB RAM\",\n    isRecommended: false,\n  },\n  {\n    label: \"Turbo performance\",\n    value: \"turbo-performance\",\n    description: \"1/2 vCPU, 4 GB RAM\",\n    isRecommended: false,\n  },\n]\n\nexport type ModalProps = {\n  itemName: string\n  onSelect: () => void\n  onOpenChange: (open: boolean) => void\n}\n\nexport function ModalAddWorkspace({\n  itemName,\n  onSelect,\n  onOpenChange,\n}: ModalProps) {\n  return (\n    <>\n      <Dialog onOpenChange={onOpenChange}>\n        <DialogTrigger className=\"w-full text-left\">\n          <DropdownMenuItem\n            onSelect={(event) => {\n              event.preventDefault()\n              onSelect && onSelect()\n            }}\n          >\n            {itemName}\n          </DropdownMenuItem>\n        </DialogTrigger>\n        <DialogContent className=\"sm:max-w-2xl\">\n          <form>\n            <DialogHeader>\n              <DialogTitle>Add new workspace</DialogTitle>\n              <DialogDescription className=\"mt-1 text-sm leading-6\">\n                With free plan, you can add up to 10 workspaces.\n              </DialogDescription>\n              <div className=\"mt-4 grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"workspace-name\" className=\"font-medium\">\n                    Workspace name\n                  </Label>\n                  <Input\n                    id=\"workspace-name\"\n                    name=\"workspace-name\"\n                    placeholder=\"my_workspace\"\n                    className=\"mt-2\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"starter-kit\" className=\"font-medium\">\n                    Starter kit\n                  </Label>\n                  <Select defaultValue=\"empty-workspace\">\n                    <SelectTrigger\n                      id=\"starter-kit\"\n                      name=\"starter-kit\"\n                      className=\"mt-2\"\n                    >\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"empty-workspace\">\n                        None - Empty workspace\n                      </SelectItem>\n                      <SelectItem value=\"commerce-analytics\">\n                        Commerce analytics\n                      </SelectItem>\n                      <SelectItem value=\"product-analytics\">\n                        Product analytics\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"col-span-full\">\n                  <Label htmlFor=\"database-region\" className=\"font-medium\">\n                    Database region\n                  </Label>\n                  <Select defaultValue=\"europe-west-01\">\n                    <SelectTrigger\n                      id=\"database-region\"\n                      name=\"database-region\"\n                      className=\"mt-2\"\n                    >\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"europe-west-01\">\n                        europe-west-01\n                      </SelectItem>\n                      <SelectItem value=\"us-east-02\">us-east-02</SelectItem>\n                      <SelectItem value=\"us-west-01\">us-west-01</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <p className=\"mt-2 text-xs text-gray-500\">\n                    For best performance, choose a region closest to your\n                    application.\n                  </p>\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <Label htmlFor=\"database\" className=\"font-medium\">\n                  Database configuration\n                </Label>\n                <RadioCardGroup\n                  defaultValue={databases[0].value}\n                  className=\"mt-2 grid grid-cols-1 gap-4 text-sm md:grid-cols-2\"\n                >\n                  {databases.map((database) => (\n                    <RadioCardItem key={database.value} value={database.value}>\n                      <div className=\"flex items-start gap-3\">\n                        <div>\n                          {database.isRecommended ? (\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"leading-5\">\n                                {database.label}\n                              </span>\n                              <Badge>Recommended</Badge>\n                            </div>\n                          ) : (\n                            <span>{database.label}</span>\n                          )}\n                          <p className=\"mt-1 text-xs text-gray-500\">\n                            1/8 vCPU, 1 GB RAM\n                          </p>\n                        </div>\n                      </div>\n                    </RadioCardItem>\n                  ))}\n                </RadioCardGroup>\n              </div>\n            </DialogHeader>\n            <DialogFooter className=\"mt-6\">\n              <DialogClose asChild>\n                <Button\n                  className=\"mt-2 w-full sm:mt-0 sm:w-fit\"\n                  variant=\"secondary\"\n                >\n                  Go back\n                </Button>\n              </DialogClose>\n              <DialogClose asChild>\n                <Button type=\"submit\" className=\"w-full sm:w-fit\">\n                  Add workspace\n                </Button>\n              </DialogClose>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/navigation/SidebarWorkspacesDropdown.tsx",
      "content": "\"use client\"\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/Dropdown\"\nimport { cx, focusInput } from \"@/lib/utils\"\nimport { RiArrowRightSLine, RiExpandUpDownLine } from \"@remixicon/react\"\nimport React from \"react\"\nimport { ModalAddWorkspace } from \"./ModalAddWorkspace\"\n\nconst workspaces = [\n  {\n    value: \"retail-analytics\",\n    name: \"Retail analytics\",\n    initials: \"RA\",\n    role: \"Member\",\n    color: \"bg-indigo-600 dark:bg-indigo-500\",\n  },\n  // Add more workspaces...\n]\n\nexport const WorkspacesDropdownDesktop = () => {\n  const [dropdownOpen, setDropdownOpen] = React.useState(false)\n  const [hasOpenDialog, setHasOpenDialog] = React.useState(false)\n  const dropdownTriggerRef = React.useRef<null | HTMLButtonElement>(null)\n  const focusRef = React.useRef<null | HTMLButtonElement>(null)\n\n  const handleDialogItemSelect = () => {\n    focusRef.current = dropdownTriggerRef.current\n  }\n\n  const handleDialogItemOpenChange = (open: boolean) => {\n    setHasOpenDialog(open)\n    if (open === false) {\n      setDropdownOpen(false)\n    }\n  }\n  return (\n    <>\n      {/* sidebar (lg+) */}\n      <DropdownMenu\n        open={dropdownOpen}\n        onOpenChange={setDropdownOpen}\n        modal={false}\n      >\n        <DropdownMenuTrigger asChild>\n          <button\n            className={cx(\n              \"flex w-full items-center gap-x-2.5 rounded-md border border-gray-300 bg-white p-2 text-sm shadow-sm transition-all hover:bg-gray-50 dark:border-gray-800 dark:bg-gray-950 hover:dark:bg-gray-900\",\n              focusInput,\n            )}\n          >\n            <span\n              className=\"flex aspect-square size-8 items-center justify-center rounded bg-indigo-600 p-2 text-xs font-medium text-white dark:bg-indigo-500\"\n              aria-hidden=\"true\"\n            >\n              RA\n            </span>\n            <div className=\"flex w-full items-center justify-between gap-x-4 truncate\">\n              <div className=\"truncate\">\n                <p className=\"truncate whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-50\">\n                  Retail analytics\n                </p>\n                <p className=\"whitespace-nowrap text-left text-xs text-gray-700 dark:text-gray-300\">\n                  Member\n                </p>\n              </div>\n              <RiExpandUpDownLine\n                className=\"size-5 shrink-0 text-gray-500\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent\n          hidden={hasOpenDialog}\n          onCloseAutoFocus={(event) => {\n            if (focusRef.current) {\n              focusRef.current.focus()\n              focusRef.current = null\n              event.preventDefault()\n            }\n          }}\n        >\n          <DropdownMenuGroup>\n            <DropdownMenuLabel>\n              Workspaces ({workspaces.length})\n            </DropdownMenuLabel>\n            {workspaces.map((workspace) => (\n              <DropdownMenuItem key={workspace.value}>\n                <div className=\"flex w-full items-center gap-x-2.5\">\n                  <span\n                    className={cx(\n                      workspace.color,\n                      \"flex aspect-square size-8 items-center justify-center rounded p-2 text-xs font-medium text-white\",\n                    )}\n                    aria-hidden=\"true\"\n                  >\n                    {workspace.initials}\n                  </span>\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-50\">\n                      {workspace.name}\n                    </p>\n                    <p className=\"text-xs text-gray-700 dark:text-gray-400\">\n                      {workspace.role}\n                    </p>\n                  </div>\n                </div>\n              </DropdownMenuItem>\n            ))}\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator />\n          <ModalAddWorkspace\n            onSelect={handleDialogItemSelect}\n            onOpenChange={handleDialogItemOpenChange}\n            itemName=\"Add workspace\"\n          />\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  )\n}\n\nexport const WorkspacesDropdownMobile = () => {\n  const [dropdownOpen, setDropdownOpen] = React.useState(false)\n  const [hasOpenDialog, setHasOpenDialog] = React.useState(false)\n  const dropdownTriggerRef = React.useRef<null | HTMLButtonElement>(null)\n  const focusRef = React.useRef<null | HTMLButtonElement>(null)\n\n  const handleDialogItemSelect = () => {\n    focusRef.current = dropdownTriggerRef.current\n  }\n\n  const handleDialogItemOpenChange = (open: boolean) => {\n    setHasOpenDialog(open)\n    if (open === false) {\n      setDropdownOpen(false)\n    }\n  }\n  return (\n    <>\n      {/* sidebar (xs-lg) */}\n      <DropdownMenu\n        open={dropdownOpen}\n        onOpenChange={setDropdownOpen}\n        modal={false}\n      >\n        <DropdownMenuTrigger asChild>\n          <button className=\"flex items-center gap-x-1.5 rounded-md p-2 hover:bg-gray-100 focus:outline-none hover:dark:bg-gray-900\">\n            <span\n              className={cx(\n                \"flex aspect-square size-7 items-center justify-center rounded bg-indigo-600 p-2 text-xs font-medium text-white dark:bg-indigo-500\",\n              )}\n              aria-hidden=\"true\"\n            >\n              RA\n            </span>\n            <RiArrowRightSLine\n              className=\"size-4 shrink-0 text-gray-500\"\n              aria-hidden=\"true\"\n            />\n            <div className=\"flex w-full items-center justify-between gap-x-3 truncate\">\n              <p className=\"truncate whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-50\">\n                Retail analytics\n              </p>\n              <RiExpandUpDownLine\n                className=\"size-4 shrink-0 text-gray-500\"\n                aria-hidden=\"true\"\n              />\n            </div>\n          </button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent\n          className=\"!min-w-72\"\n          hidden={hasOpenDialog}\n          onCloseAutoFocus={(event) => {\n            if (focusRef.current) {\n              focusRef.current.focus()\n              focusRef.current = null\n              event.preventDefault()\n            }\n          }}\n        >\n          <DropdownMenuGroup>\n            <DropdownMenuLabel>\n              Workspaces ({workspaces.length})\n            </DropdownMenuLabel>\n            {workspaces.map((workspace) => (\n              <DropdownMenuItem key={workspace.value}>\n                <div className=\"flex w-full items-center gap-x-2.5\">\n                  <span\n                    className={cx(\n                      workspace.color,\n                      \"flex size-8 items-center justify-center rounded p-2 text-xs font-medium text-white\",\n                    )}\n                    aria-hidden=\"true\"\n                  >\n                    {workspace.initials}\n                  </span>\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-gray-50\">\n                      {workspace.name}\n                    </p>\n                    <p className=\"text-xs text-gray-700 dark:text-gray-300\">\n                      {workspace.role}\n                    </p>\n                  </div>\n                </div>\n              </DropdownMenuItem>\n            ))}\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator />\n          <ModalAddWorkspace\n            onSelect={handleDialogItemSelect}\n            onOpenChange={handleDialogItemOpenChange}\n            itemName=\"Add workspace\"\n          />\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/navigation/UserProfile.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/components/Button\"\nimport { cx, focusRing } from \"@/lib/utils\"\nimport { RiMore2Fill } from \"@remixicon/react\"\n\nimport { DropdownUserProfile } from \"./DropdownUserProfile\"\n\nexport const UserProfileDesktop = () => {\n  return (\n    <DropdownUserProfile>\n      <Button\n        aria-label=\"User settings\"\n        variant=\"ghost\"\n        className={cx(\n          focusRing,\n          \"group flex w-full items-center justify-between rounded-md p-2 text-sm font-medium text-gray-900 hover:bg-gray-100 data-[state=open]:bg-gray-100 data-[state=open]:bg-gray-400/10 hover:dark:bg-gray-400/10\",\n        )}\n      >\n        <span className=\"flex items-center gap-3\">\n          <span\n            className=\"flex size-8 shrink-0 items-center justify-center rounded-full border border-gray-300 bg-white text-xs text-gray-700 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-300\"\n            aria-hidden=\"true\"\n          >\n            ES\n          </span>\n          <span>Emma Stone</span>\n        </span>\n        <RiMore2Fill\n          className=\"size-4 shrink-0 text-gray-500 group-hover:text-gray-700 group-hover:dark:text-gray-400\"\n          aria-hidden=\"true\"\n        />\n      </Button>\n    </DropdownUserProfile>\n  )\n}\n\nexport const UserProfileMobile = () => {\n  return (\n    <DropdownUserProfile align=\"end\">\n      <Button\n        aria-label=\"User settings\"\n        variant=\"ghost\"\n        className={cx(\n          \"group flex items-center rounded-md p-1 text-sm font-medium text-gray-900 hover:bg-gray-100 data-[state=open]:bg-gray-100 data-[state=open]:bg-gray-400/10 hover:dark:bg-gray-400/10\",\n        )}\n      >\n        <span\n          className=\"flex size-7 shrink-0 items-center justify-center rounded-full border border-gray-300 bg-white text-xs text-gray-700 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-300\"\n          aria-hidden=\"true\"\n        >\n          ES\n        </span>\n      </Button>\n    </DropdownUserProfile>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}