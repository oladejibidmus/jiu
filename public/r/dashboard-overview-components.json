{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dashboard-overview-components",
  "type": "registry:block",
  "title": "Dashboard Overview Components",
  "description": "Components specific to the dashboard overview page.",
  "files": [
    {
      "path": "src/components/ui/overview/DashboardCategoryBarCard.tsx",
      "content": "import { Badge } from \"@/components/Badge\"\nimport { cx } from \"@/lib/utils\"\n\nimport type { KpiEntryExtended } from \"@/app/(main)/overview/page\"\n\nexport type CardProps = {\n  title: string\n  change: string\n  value: string\n  valueDescription: string\n  subtitle: string\n  ctaDescription: string\n  ctaText: string\n  ctaLink: string\n  data: KpiEntryExtended[]\n}\n\nexport function CategoryBarCard({\n  title,\n  change,\n  value,\n  valueDescription,\n  subtitle,\n  ctaDescription,\n  ctaText,\n  ctaLink,\n  data,\n}: CardProps) {\n  return (\n    <>\n      <div className=\"flex flex-col justify-between\">\n        <div>\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"font-bold text-gray-900 sm:text-sm dark:text-gray-50\">\n              {title}\n            </h3>\n            <Badge variant=\"neutral\">{change}</Badge>\n          </div>\n          <p className=\"mt-2 flex items-baseline gap-2\">\n            <span className=\"text-xl text-gray-900 dark:text-gray-50\">\n              {value}\n            </span>\n            <span className=\"text-sm text-gray-500\">{valueDescription}</span>\n          </p>\n          <div className=\"mt-4\">\n            <p className=\"text-sm font-medium text-gray-900 dark:text-gray-50\">\n              {subtitle}\n            </p>\n            <div className=\"mt-2 flex items-center gap-0.5\">\n              {data.map((item) => (\n                <div\n                  key={item.title}\n                  className={cx(item.color, `h-1.5 rounded-full`)}\n                  style={{ width: `${item.percentage}%` }}\n                />\n              ))}\n            </div>\n          </div>\n          <ul role=\"list\" className=\"mt-5 space-y-2\">\n            {data.map((item) => (\n              <li key={item.title} className=\"flex items-center gap-2 text-xs\">\n                <span\n                  className={cx(item.color, \"size-2.5 rounded-sm\")}\n                  aria-hidden=\"true\"\n                />\n                <span className=\"text-gray-900 dark:text-gray-50\">\n                  {item.title}\n                </span>\n                <span className=\"text-gray-600 dark:text-gray-400\">\n                  ({item.value} / {item.percentage}%)\n                </span>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <p className=\"mt-6 text-xs text-gray-500\">\n          {ctaDescription}{\" \"}\n          <a href={ctaLink} className=\"text-indigo-600 dark:text-indigo-400\">\n            {ctaText}\n          </a>\n        </p>\n      </div>\n    </>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/overview/DashboardChartCard.tsx",
      "content": "import { PeriodValue } from \"@/app/(main)/overview/page\"\nimport { Badge } from \"@/components/Badge\"\nimport { LineChart } from \"@/components/LineChart\"\nimport { overviews } from \"@/data/overview-data\"\nimport { OverviewData } from \"@/data/schema\"\nimport { cx, formatters, percentageFormatter } from \"@/lib/utils\"\nimport {\n  eachDayOfInterval,\n  formatDate,\n  interval,\n  isWithinInterval,\n} from \"date-fns\"\nimport { DateRange } from \"react-day-picker\"\nimport { getPeriod } from \"./DashboardFilterbar\"\n\nexport type CardProps = {\n  title: keyof OverviewData\n  type: \"currency\" | \"unit\"\n  selectedDates: DateRange | undefined\n  selectedPeriod: PeriodValue\n  isThumbnail?: boolean\n}\n\nconst formattingMap = {\n  currency: formatters.currency,\n  unit: formatters.unit,\n}\n\nexport const getBadgeType = (value: number) => {\n  if (value > 0) {\n    return \"success\"\n  } else if (value < 0) {\n    if (value < -50) {\n      return \"warning\"\n    }\n    return \"error\"\n  } else {\n    return \"neutral\"\n  }\n}\n\nexport function ChartCard({\n  title,\n  type,\n  selectedDates,\n  selectedPeriod,\n  isThumbnail,\n}: CardProps) {\n  const formatter = formattingMap[type]\n  const selectedDatesInterval =\n    selectedDates?.from && selectedDates?.to\n      ? interval(selectedDates.from, selectedDates.to)\n      : null\n  const allDatesInInterval =\n    selectedDates?.from && selectedDates?.to\n      ? eachDayOfInterval(interval(selectedDates.from, selectedDates.to))\n      : null\n  const prevDates = getPeriod(selectedDates)\n\n  const prevDatesInterval =\n    prevDates?.from && prevDates?.to\n      ? interval(prevDates.from, prevDates.to)\n      : null\n\n  const data = overviews\n    .filter((overview) => {\n      if (selectedDatesInterval) {\n        return isWithinInterval(overview.date, selectedDatesInterval)\n      }\n      return true\n    })\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n\n  const prevData = overviews\n    .filter((overview) => {\n      if (prevDatesInterval) {\n        return isWithinInterval(overview.date, prevDatesInterval)\n      }\n      return false\n    })\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n\n  const chartData = allDatesInInterval\n    ?.map((date, index) => {\n      const overview = data[index]\n      const prevOverview = prevData[index]\n      const value = (overview?.[title] as number) || null\n      const previousValue = (prevOverview?.[title] as number) || null\n\n      return {\n        title,\n        date: date,\n        formattedDate: formatDate(date, \"dd/MM/yyyy\"),\n        value,\n        previousDate: prevOverview?.date,\n        previousFormattedDate: prevOverview\n          ? formatDate(prevOverview.date, \"dd/MM/yyyy\")\n          : null,\n        previousValue:\n          selectedPeriod !== \"no-comparison\" ? previousValue : null,\n        evolution:\n          selectedPeriod !== \"no-comparison\" && value && previousValue\n            ? (value - previousValue) / previousValue\n            : undefined,\n      }\n    })\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n\n  const categories =\n    selectedPeriod === \"no-comparison\" ? [\"value\"] : [\"value\", \"previousValue\"]\n  const value =\n    chartData?.reduce((acc, item) => acc + (item.value || 0), 0) || 0\n  const previousValue =\n    chartData?.reduce((acc, item) => acc + (item.previousValue || 0), 0) || 0\n  const evolution =\n    selectedPeriod !== \"no-comparison\"\n      ? (value - previousValue) / previousValue\n      : 0\n\n  return (\n    <div className={cx(\"transition\")}>\n      <div className=\"flex items-center justify-between gap-x-2\">\n        <div className=\"flex items-center gap-x-2\">\n          <dt className=\"font-bold text-gray-900 sm:text-sm dark:text-gray-50\">\n            {title}\n          </dt>\n          {selectedPeriod !== \"no-comparison\" && (\n            <Badge variant={getBadgeType(evolution)}>\n              {percentageFormatter(evolution)}\n            </Badge>\n          )}\n        </div>\n      </div>\n      <div className=\"mt-2 flex items-baseline justify-between\">\n        <dd className=\"text-xl text-gray-900 dark:text-gray-50\">\n          {formatter(value)}\n        </dd>\n        {selectedPeriod !== \"no-comparison\" && (\n          <dd className=\"text-sm text-gray-500\">\n            from {formatter(previousValue)}\n          </dd>\n        )}\n      </div>\n      <LineChart\n        className=\"mt-6 h-32\"\n        data={chartData || []}\n        index=\"formattedDate\"\n        colors={[\"indigo\", \"gray\"]}\n        startEndOnly={true}\n        valueFormatter={(value) => formatter(value as number)}\n        showYAxis={false}\n        showLegend={false}\n        categories={categories}\n        showTooltip={isThumbnail ? false : true}\n        autoMinValue\n      />\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/overview/DashboardFilterbar.tsx",
      "content": "\"use client\"\n\nimport { DateRangePicker } from \"@/components/DatePicker\"\nimport { subYears } from \"date-fns\"\nimport { DateRange } from \"react-day-picker\"\n\nexport const getPeriod = (\n  dateRange: DateRange | undefined,\n): DateRange | undefined => {\n  if (!dateRange) return undefined\n  const from = dateRange.from\n  const to = dateRange.to\n  let lastYearFrom\n  let lastYearTo\n  if (from) {\n    lastYearFrom = subYears(from, 1)\n  }\n  if (to) {\n    lastYearTo = subYears(to, 1)\n  }\n  return { from: lastYearFrom, to: lastYearTo }\n}\n\ntype FilterbarProps = {\n  maxDate?: Date\n  minDate?: Date\n  selectedDates: DateRange | undefined\n  onDatesChange: (dates: DateRange | undefined) => void\n}\n\nexport function Filterbar({\n  maxDate,\n  minDate,\n  selectedDates,\n  onDatesChange,\n}: FilterbarProps) {\n  return (\n    <div className=\"w-full sm:flex sm:items-center sm:gap-2\">\n      <DateRangePicker\n        value={selectedDates}\n        onChange={onDatesChange}\n        className=\"w-full sm:w-fit\"\n        toDate={maxDate}\n        fromDate={minDate}\n        align=\"start\"\n      />\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/ui/overview/DashboardProgressBarCard.tsx",
      "content": "import { Badge } from \"@/components/Badge\"\nimport { ProgressBar } from \"@/components/ProgressBar\"\n\nimport { KpiEntry } from \"@/app/(main)/overview/page\"\n\nexport type CardProps = {\n  title: string\n  change: string\n  value: string\n  valueDescription: string\n  ctaDescription: string\n  ctaText: string\n  ctaLink: string\n  data: KpiEntry[]\n}\n\nexport function ProgressBarCard({\n  title,\n  change,\n  value,\n  valueDescription,\n  ctaDescription,\n  ctaText,\n  ctaLink,\n  data,\n}: CardProps) {\n  return (\n    <>\n      <div className=\"flex flex-col justify-between\">\n        <div>\n          <div className=\"flex items-center gap-2\">\n            <dt className=\"font-bold text-gray-900 sm:text-sm dark:text-gray-50\">\n              {title}\n            </dt>\n            <Badge variant=\"neutral\">{change}</Badge>\n          </div>\n          <dd className=\"mt-2 flex items-baseline gap-2\">\n            <span className=\"text-xl text-gray-900 dark:text-gray-50\">\n              {value}\n            </span>\n            <span className=\"text-sm text-gray-500\">{valueDescription}</span>\n          </dd>\n          <ul role=\"list\" className=\"mt-4 space-y-5\">\n            {data.map((item) => (\n              <li key={item.title}>\n                <p className=\"flex justify-between text-sm\">\n                  <span className=\"font-medium text-gray-900 dark:text-gray-50\">\n                    {item.title}\n                  </span>\n                  <span className=\"font-medium text-gray-900 dark:text-gray-50\">\n                    {item.current}\n                    <span className=\"font-normal text-gray-500\">\n                      /{item.allowed}\n                      {item.unit}\n                    </span>\n                  </span>\n                </p>\n                <ProgressBar\n                  value={item.percentage}\n                  className=\"mt-2 [&>*]:h-1.5\"\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div>\n          <p className=\"mt-6 text-xs text-gray-500\">\n            {ctaDescription}{\" \"}\n            <a href={ctaLink} className=\"text-indigo-600 dark:text-indigo-400\">\n              {ctaText}\n            </a>\n          </p>\n        </div>\n      </div>\n    </>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}