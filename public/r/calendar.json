{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar",
  "type": "registry:component",
  "title": "Calendar",
  "description": "A calendar component.",
  "files": [
    {
      "path": "src/components/Calendar.tsx",
      "content": "// Tremor Raw Calendar [v0.0.4]\n\n\"use client\"\n\nimport {\n  RiArrowLeftDoubleLine,\n  RiArrowLeftSLine,\n  RiArrowRightDoubleLine,\n  RiArrowRightSLine,\n} from \"@remixicon/react\"\nimport { addYears, format, isSameMonth } from \"date-fns\"\nimport * as React from \"react\"\nimport {\n  DayPicker,\n  useDayPicker,\n  useDayRender,\n  useNavigation,\n  type DayPickerRangeProps,\n  type DayPickerSingleProps,\n  type DayProps,\n  type Matcher,\n} from \"react-day-picker\"\n\nimport { cx, focusRing } from \"@/lib/utils\"\n\ninterface NavigationButtonProps\n  extends React.HTMLAttributes<HTMLButtonElement> {\n  onClick: () => void\n  icon: React.ElementType\n  disabled?: boolean\n}\n\nconst NavigationButton = React.forwardRef<\n  HTMLButtonElement,\n  NavigationButtonProps\n>(\n  (\n    { onClick, icon, disabled, ...props }: NavigationButtonProps,\n    forwardedRef,\n  ) => {\n    const Icon = icon\n    return (\n      <button\n        ref={forwardedRef}\n        type=\"button\"\n        disabled={disabled}\n        className={cx(\n          \"flex size-8 shrink-0 select-none items-center justify-center rounded border p-1 outline-none transition sm:size-[30px]\",\n          // text color\n          \"text-gray-600 hover:text-gray-800\",\n          \"dark:text-gray-400 hover:dark:text-gray-200\",\n          // border color\n          \"border-gray-300 dark:border-gray-800\",\n          // background color\n          \"hover:bg-gray-50 active:bg-gray-100\",\n          \"hover:dark:bg-gray-900 active:dark:bg-gray-800\",\n          // disabled\n          \"disabled:pointer-events-none\",\n          \"disabled:border-gray-200 disabled:dark:border-gray-800\",\n          \"disabled:text-gray-400 disabled:dark:text-gray-600\",\n          focusRing,\n        )}\n        onClick={onClick}\n        {...props}\n      >\n        <Icon className=\"size-full shrink-0\" />\n      </button>\n    )\n  },\n)\n\nNavigationButton.displayName = \"NavigationButton\"\n\ntype OmitKeys<T, K extends keyof T> = {\n  [P in keyof T as P extends K ? never : P]: T[P]\n}\n\ntype KeysToOmit = \"showWeekNumber\" | \"captionLayout\" | \"mode\"\n\ntype SingleProps = OmitKeys<DayPickerSingleProps, KeysToOmit>\ntype RangeProps = OmitKeys<DayPickerRangeProps, KeysToOmit>\n\ntype CalendarProps =\n  | ({\n      mode: \"single\"\n    } & SingleProps)\n  | ({\n      mode?: undefined\n    } & SingleProps)\n  | ({\n      mode: \"range\"\n    } & RangeProps)\n\nconst Calendar = ({\n  mode = \"single\",\n  weekStartsOn = 1,\n  numberOfMonths = 1,\n  enableYearNavigation = false,\n  disableNavigation,\n  locale,\n  className,\n  classNames,\n  ...props\n}: CalendarProps & { enableYearNavigation?: boolean }) => {\n  return (\n    <DayPicker\n      mode={mode}\n      weekStartsOn={weekStartsOn}\n      numberOfMonths={numberOfMonths}\n      locale={locale}\n      showOutsideDays={numberOfMonths === 1}\n      className={cx(className)}\n      classNames={{\n        months: \"flex space-y-0\",\n        month: \"space-y-4 p-3\",\n        nav: \"gap-1 flex items-center rounded-full size-full justify-between p-4\",\n        table: \"w-full border-collapse space-y-1\",\n        head_cell:\n          \"w-9 font-medium text-sm sm:text-xs text-center text-gray-400 dark:text-gray-600 pb-2\",\n        row: \"w-full mt-0.5\",\n        cell: cx(\n          \"relative p-0 text-center focus-within:relative\",\n          \"text-gray-900 dark:text-gray-50\",\n        ),\n        day: cx(\n          \"size-9 rounded text-sm text-gray-900 focus:z-10 dark:text-gray-50\",\n          \"hover:bg-gray-200 hover:dark:bg-gray-700\",\n          focusRing,\n        ),\n        day_today: \"font-semibold\",\n        day_selected: cx(\n          \"rounded\",\n          \"aria-selected:bg-indigo-600 aria-selected:text-gray-50\",\n          \"dark:aria-selected:bg-indigo-500 dark:aria-selected:text-gray-50\",\n        ),\n        day_disabled:\n          \"!text-gray-300 dark:!text-gray-700 line-through disabled:hover:bg-transparent\",\n        day_outside: \"text-gray-400 dark:text-gray-600\",\n        day_range_middle: cx(\n          \"!rounded-none\",\n          \"aria-selected:!bg-gray-100 aria-selected:!text-gray-900\",\n          \"dark:aria-selected:!bg-gray-900 dark:aria-selected:!text-gray-50\",\n        ),\n        day_range_start: \"rounded-r-none !rounded-l\",\n        day_range_end: \"rounded-l-none !rounded-r\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: () => (\n          <RiArrowLeftSLine aria-hidden=\"true\" className=\"size-4\" />\n        ),\n        IconRight: () => (\n          <RiArrowRightSLine aria-hidden=\"true\" className=\"size-4\" />\n        ),\n        Caption: ({ ...props }) => {\n          const {\n            goToMonth,\n            nextMonth,\n            previousMonth,\n            currentMonth,\n            displayMonths,\n          } = useNavigation()\n          const { numberOfMonths, fromDate, toDate } = useDayPicker()\n\n          const displayIndex = displayMonths.findIndex((month) =>\n            isSameMonth(props.displayMonth, month),\n          )\n          const isFirst = displayIndex === 0\n          const isLast = displayIndex === displayMonths.length - 1\n\n          const hideNextButton = numberOfMonths > 1 && (isFirst || !isLast)\n          const hidePreviousButton = numberOfMonths > 1 && (isLast || !isFirst)\n\n          const goToPreviousYear = () => {\n            const targetMonth = addYears(currentMonth, -1)\n            if (\n              previousMonth &&\n              (!fromDate || targetMonth.getTime() >= fromDate.getTime())\n            ) {\n              goToMonth(targetMonth)\n            }\n          }\n\n          const goToNextYear = () => {\n            const targetMonth = addYears(currentMonth, 1)\n            if (\n              nextMonth &&\n              (!toDate || targetMonth.getTime() <= toDate.getTime())\n            ) {\n              goToMonth(targetMonth)\n            }\n          }\n\n          return (\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-1\">\n                {enableYearNavigation && !hidePreviousButton && (\n                  <NavigationButton\n                    disabled={\n                      disableNavigation ||\n                      !previousMonth ||\n                      (fromDate &&\n                        addYears(currentMonth, -1).getTime() <\n                          fromDate.getTime())\n                    }\n                    aria-label=\"Go to previous year\"\n                    onClick={goToPreviousYear}\n                    icon={RiArrowLeftDoubleLine}\n                  />\n                )}\n                {!hidePreviousButton && (\n                  <NavigationButton\n                    disabled={disableNavigation || !previousMonth}\n                    aria-label=\"Go to previous month\"\n                    onClick={() => previousMonth && goToMonth(previousMonth)}\n                    icon={RiArrowLeftSLine}\n                  />\n                )}\n              </div>\n\n              <div\n                role=\"presentation\"\n                aria-live=\"polite\"\n                className=\"text-sm font-medium capitalize tabular-nums text-gray-900 dark:text-gray-50\"\n              >\n                {format(props.displayMonth, \"LLLL yyy\", { locale })}\n              </div>\n\n              <div className=\"flex items-center gap-1\">\n                {!hideNextButton && (\n                  <NavigationButton\n                    disabled={disableNavigation || !nextMonth}\n                    aria-label=\"Go to next month\"\n                    onClick={() => nextMonth && goToMonth(nextMonth)}\n                    icon={RiArrowRightSLine}\n                  />\n                )}\n                {enableYearNavigation && !hideNextButton && (\n                  <NavigationButton\n                    disabled={\n                      disableNavigation ||\n                      !nextMonth ||\n                      (toDate &&\n                        addYears(currentMonth, 1).getTime() > toDate.getTime())\n                    }\n                    aria-label=\"Go to next year\"\n                    onClick={goToNextYear}\n                    icon={RiArrowRightDoubleLine}\n                  />\n                )}\n              </div>\n            </div>\n          )\n        },\n        Day: ({ date, displayMonth }: DayProps) => {\n          const buttonRef = React.useRef<HTMLButtonElement>(null)\n          const { activeModifiers, buttonProps, divProps, isButton, isHidden } =\n            useDayRender(date, displayMonth, buttonRef)\n\n          const { selected, today, disabled, range_middle } = activeModifiers\n\n          if (isHidden) {\n            return <></>\n          }\n\n          if (!isButton) {\n            return (\n              <div\n                {...divProps}\n                className={cx(\n                  \"flex items-center justify-center\",\n                  divProps.className,\n                )}\n              />\n            )\n          }\n\n          const {\n            children: buttonChildren,\n            className: buttonClassName,\n            ...buttonPropsRest\n          } = buttonProps\n\n          return (\n            <button\n              ref={buttonRef}\n              {...buttonPropsRest}\n              type=\"button\"\n              className={cx(\"relative\", buttonClassName)}\n            >\n              {buttonChildren}\n              {today && (\n                <span\n                  className={cx(\n                    \"absolute inset-x-1/2 bottom-1.5 h-0.5 w-4 -translate-x-1/2 rounded-[2px]\",\n                    {\n                      \"bg-blue-500 dark:bg-blue-500\": !selected,\n                      \"!bg-white dark:!bg-gray-950\": selected,\n                      \"!bg-gray-400 dark:!bg-gray-600\":\n                        selected && range_middle,\n                      \"bg-gray-400 text-gray-400 dark:bg-gray-400 dark:text-gray-600\":\n                        disabled,\n                    },\n                  )}\n                />\n              )}\n            </button>\n          )\n        },\n      }}\n      {...(props as SingleProps & RangeProps)}\n    />\n  )\n}\n\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar, type Matcher }\n",
      "type": "registry:component"
    }
  ]
}