{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-picker",
  "type": "registry:component",
  "title": "Date Picker",
  "description": "A date picker component.",
  "files": [
    {
      "path": "src/components/DatePicker.tsx",
      "content": "// Tremor Date Picker [v1.0.5]\n\n\"use client\"\n\nimport { Time } from \"@internationalized/date\"\nimport * as PopoverPrimitives from \"@radix-ui/react-popover\"\nimport {\n  AriaTimeFieldProps,\n  TimeValue,\n  useDateSegment,\n  useTimeField,\n} from \"@react-aria/datepicker\"\nimport {\n  useTimeFieldState,\n  type DateFieldState,\n  type DateSegment,\n} from \"@react-stately/datepicker\"\nimport { RiCalendar2Fill, RiSubtractFill } from \"@remixicon/react\"\nimport { format, type Locale } from \"date-fns\"\nimport { enUS } from \"date-fns/locale\"\nimport * as React from \"react\"\nimport { tv, VariantProps } from \"tailwind-variants\"\n\nimport { cx, focusInput, focusRing, hasErrorInput } from \"@/lib/utils\"\n\nimport { Button } from \"./Button\"\nimport { Calendar as CalendarPrimitive, type Matcher } from \"./Calendar\"\n\n//#region TimeInput\n// ============================================================================\n\nconst isBrowserLocaleClockType24h = () => {\n  const language =\n    typeof window !== \"undefined\" ? window.navigator.language : \"en-US\"\n\n  const hr = new Intl.DateTimeFormat(language, {\n    hour: \"numeric\",\n  }).format()\n\n  return Number.isInteger(Number(hr))\n}\n\ntype TimeSegmentProps = {\n  segment: DateSegment\n  state: DateFieldState\n}\n\nconst TimeSegment = ({ segment, state }: TimeSegmentProps) => {\n  const ref = React.useRef<HTMLDivElement>(null)\n\n  const { segmentProps } = useDateSegment(segment, state, ref)\n\n  const isColon = segment.type === \"literal\" && segment.text === \":\"\n  const isSpace = segment.type === \"literal\" && segment.text === \" \"\n\n  const isDecorator = isColon || isSpace\n\n  return (\n    <div\n      {...segmentProps}\n      ref={ref}\n      className={cx(\n        // base\n        \"relative block w-full appearance-none rounded-md border px-2.5 py-1.5 text-left uppercase tabular-nums shadow-sm outline-none transition sm:text-sm\",\n        // border color\n        \"border-gray-300 dark:border-gray-800\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n        // background color\n        \"bg-white dark:bg-gray-950\",\n        // focus\n        focusInput,\n        // invalid (optional)\n        \"invalid:border-red-500 invalid:ring-2 invalid:ring-red-200 group-aria-[invalid=true]/time-input:border-red-500 group-aria-[invalid=true]/time-input:ring-2 group-aria-[invalid=true]/time-input:ring-red-200 group-aria-[invalid=true]/time-input:dark:ring-red-400/20\",\n        {\n          \"!w-fit border-none bg-transparent px-0 text-gray-400 shadow-none\":\n            isDecorator,\n          hidden: isSpace,\n          \"border-gray-300 bg-gray-100 text-gray-400 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-500\":\n            state.isDisabled,\n          \"!bg-transparent !text-gray-400\": !segment.isEditable,\n        },\n      )}\n    >\n      <span\n        aria-hidden=\"true\"\n        className={cx(\n          \"pointer-events-none block w-full text-left text-gray-700 sm:text-sm\",\n          {\n            hidden: !segment.isPlaceholder,\n            \"h-0\": !segment.isPlaceholder,\n          },\n        )}\n      >\n        {segment.placeholder}\n      </span>\n      {segment.isPlaceholder ? \" \" : segment.text}\n    </div>\n  )\n}\n\ntype TimeInputProps = Omit<\n  AriaTimeFieldProps<TimeValue>,\n  \"label\" | \"shouldForceLeadingZeros\" | \"description\" | \"errorMessage\"\n>\n\nconst TimeInput = React.forwardRef<HTMLDivElement, TimeInputProps>(\n  ({ hourCycle, ...props }: TimeInputProps, ref) => {\n    const innerRef = React.useRef<HTMLDivElement>(null)\n\n    React.useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n      ref,\n      () => innerRef?.current,\n    )\n\n    const locale = window !== undefined ? window.navigator.language : \"en-US\"\n\n    const state = useTimeFieldState({\n      hourCycle: hourCycle,\n      locale: locale,\n      shouldForceLeadingZeros: true,\n      autoFocus: true,\n      ...props,\n    })\n\n    const { fieldProps } = useTimeField(\n      {\n        ...props,\n        hourCycle: hourCycle,\n        shouldForceLeadingZeros: true,\n      },\n      state,\n      innerRef,\n    )\n\n    return (\n      <div\n        {...fieldProps}\n        ref={innerRef}\n        className=\"group/time-input inline-flex w-full gap-x-2\"\n      >\n        {state.segments.map((segment, i) => (\n          <TimeSegment key={i} segment={segment} state={state} />\n        ))}\n      </div>\n    )\n  },\n)\nTimeInput.displayName = \"TimeInput\"\n\n//#region Trigger\n// ============================================================================\n\nconst triggerStyles = tv({\n  base: [\n    // base\n    \"peer flex w-full cursor-pointer appearance-none items-center gap-x-2 truncate rounded-md border px-3 py-2 shadow-sm outline-none transition-all sm:text-sm\",\n    // background color\n    \"bg-white dark:bg-gray-950\",\n    // border color\n    \"border-gray-300 dark:border-gray-800\",\n    // text color\n    \"text-gray-900 dark:text-gray-50\",\n    // placeholder color\n    \"placeholder-gray-400 dark:placeholder-gray-500\",\n    // hover\n    \"hover:bg-gray-50 hover:dark:bg-gray-950/50\",\n    // disabled\n    \"disabled:pointer-events-none\",\n    \"disabled:bg-gray-100 disabled:text-gray-400\",\n    \"disabled:dark:border-gray-800 disabled:dark:bg-gray-800 disabled:dark:text-gray-500\",\n    // focus\n    focusInput,\n    // invalid (optional)\n    // \"aria-[invalid=true]:dark:ring-red-400/20 aria-[invalid=true]:ring-2 aria-[invalid=true]:ring-red-200 aria-[invalid=true]:border-red-500 invalid:ring-2 invalid:ring-red-200 invalid:border-red-500\"\n  ],\n  variants: {\n    hasError: {\n      true: hasErrorInput,\n    },\n  },\n})\n\ninterface TriggerProps\n  extends React.ComponentProps<\"button\">,\n    VariantProps<typeof triggerStyles> {\n  placeholder?: string\n}\n\nconst Trigger = React.forwardRef<HTMLButtonElement, TriggerProps>(\n  (\n    { className, children, placeholder, hasError, ...props }: TriggerProps,\n    forwardedRef,\n  ) => {\n    return (\n      <PopoverPrimitives.Trigger asChild>\n        <button\n          ref={forwardedRef}\n          className={cx(triggerStyles({ hasError }), className)}\n          {...props}\n        >\n          <RiCalendar2Fill className=\"size-5 shrink-0 text-gray-400 dark:text-gray-600\" />\n          <span className=\"flex-1 overflow-hidden text-ellipsis whitespace-nowrap text-left text-gray-900 dark:text-gray-50\">\n            {children ? (\n              children\n            ) : placeholder ? (\n              <span className=\"text-gray-400 dark:text-gray-600\">\n                {placeholder}\n              </span>\n            ) : null}\n          </span>\n        </button>\n      </PopoverPrimitives.Trigger>\n    )\n  },\n)\n\nTrigger.displayName = \"DatePicker.Trigger\"\n\n//#region Popover\n// ============================================================================\n\nconst CalendarPopover = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitives.Content>,\n  React.ComponentProps<typeof PopoverPrimitives.Content>\n>(({ align, className, children, ...props }, forwardedRef) => {\n  return (\n    <PopoverPrimitives.Portal>\n      <PopoverPrimitives.Content\n        ref={forwardedRef}\n        sideOffset={10}\n        side=\"bottom\"\n        align={align}\n        avoidCollisions\n        onOpenAutoFocus={(e) => e.preventDefault()}\n        className={cx(\n          // base\n          \"relative z-50 w-fit rounded-md border text-sm shadow-xl shadow-black/[2.5%]\",\n          // widths\n          \"min-w-[calc(var(--radix-select-trigger-width)-2px)] max-w-[95vw]\",\n          // border color\n          \"border-gray-200 dark:border-gray-800\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n          // transition\n          \"will-change-[transform,opacity]\",\n          \"data-[state=closed]:animate-hide\",\n          \"data-[state=open]:data-[side=bottom]:animate-slideDownAndFade data-[state=open]:data-[side=left]:animate-slideLeftAndFade data-[state=open]:data-[side=right]:animate-slideRightAndFade data-[state=open]:data-[side=top]:animate-slideUpAndFade\",\n          className,\n        )}\n        {...props}\n      >\n        {children}\n      </PopoverPrimitives.Content>\n    </PopoverPrimitives.Portal>\n  )\n})\n\nCalendarPopover.displayName = \"DatePicker.CalendarPopover\"\n\n//#region Preset\n// ============================================================================\n\ntype DateRange = {\n  from: Date | undefined\n  to?: Date | undefined\n}\n\ninterface Preset {\n  label: string\n}\n\ninterface DatePreset extends Preset {\n  date: Date\n}\n\ninterface DateRangePreset extends Preset {\n  dateRange: DateRange\n}\n\ntype PresetContainerProps<TPreset extends Preset, TValue> = {\n  presets: TPreset[]\n  onSelect: (value: TValue) => void\n  currentValue?: TValue\n}\n\nconst PresetContainer = <TPreset extends Preset, TValue>({\n  // Available preset configurations\n  presets,\n  // Event handler when a preset is selected\n  onSelect,\n  // Currently selected preset\n  currentValue,\n}: PresetContainerProps<TPreset, TValue>) => {\n  const isDateRangePresets = (preset: any): preset is DateRangePreset => {\n    return \"dateRange\" in preset\n  }\n  const isDatePresets = (preset: any): preset is DatePreset => {\n    return \"date\" in preset\n  }\n\n  const handleClick = (preset: TPreset) => {\n    if (isDateRangePresets(preset)) {\n      onSelect(preset.dateRange as TValue)\n    } else if (isDatePresets(preset)) {\n      onSelect(preset.date as TValue)\n    }\n  }\n\n  const compareDates = (date1: Date, date2: Date) => {\n    return (\n      date1.getDate() === date2.getDate() &&\n      date1.getMonth() === date2.getMonth() &&\n      date1.getFullYear() === date2.getFullYear()\n    )\n  }\n\n  const compareRanges = (range1: DateRange, range2: DateRange) => {\n    const from1 = range1.from\n    const from2 = range2.from\n\n    let equalFrom = false\n\n    if (from1 && from2) {\n      const sameFrom = compareDates(from1, from2)\n\n      if (sameFrom) {\n        equalFrom = true\n      }\n    }\n\n    const to1 = range1.to\n    const to2 = range2.to\n\n    let equalTo = false\n\n    if (to1 && to2) {\n      const sameTo = compareDates(to1, to2)\n\n      if (sameTo) {\n        equalTo = true\n      }\n    }\n\n    return equalFrom && equalTo\n  }\n\n  const matchesCurrent = (preset: TPreset) => {\n    if (isDateRangePresets(preset)) {\n      const value = currentValue as DateRange | undefined\n\n      return value && compareRanges(value, preset.dateRange)\n    } else if (isDatePresets(preset)) {\n      const value = currentValue as Date | undefined\n\n      return value && compareDates(value, preset.date)\n    }\n\n    return false\n  }\n\n  return (\n    <ul className=\"flex items-start gap-x-2 sm:flex-col\">\n      {presets.map((preset, index) => {\n        return (\n          <li key={index} className=\"sm:w-full sm:py-px\">\n            <button\n              title={preset.label}\n              className={cx(\n                // base\n                \"relative w-full overflow-hidden text-ellipsis whitespace-nowrap rounded border px-2.5 py-1.5 text-left text-base shadow-sm outline-none transition-all sm:border-none sm:py-2 sm:text-sm sm:shadow-none\",\n                // text color\n                \"text-gray-700 dark:text-gray-300\",\n                // border color\n                \"border-gray-200 dark:border-gray-800\",\n                // focus\n                focusRing,\n                // background color\n                \"focus-visible:bg-gray-100 focus-visible:dark:bg-gray-900\",\n                \"hover:bg-gray-100 hover:dark:bg-gray-900\",\n                {\n                  \"bg-gray-100 dark:bg-gray-900\": matchesCurrent(preset),\n                },\n              )}\n              onClick={() => handleClick(preset)}\n              aria-label={`Select ${preset.label}`}\n            >\n              <span>{preset.label}</span>\n            </button>\n          </li>\n        )\n      })}\n    </ul>\n  )\n}\n\nPresetContainer.displayName = \"DatePicker.PresetContainer\"\n\n//#region Date Picker Shared\n// ============================================================================\n\nconst formatDate = (\n  date: Date,\n  locale: Locale,\n  includeTime?: boolean,\n): string => {\n  const usesAmPm = !isBrowserLocaleClockType24h()\n  let dateString: string\n\n  if (includeTime) {\n    dateString = usesAmPm\n      ? format(date, \"dd MMM, yyyy h:mm a\", { locale })\n      : format(date, \"dd MMM, yyyy HH:mm\", { locale })\n  } else {\n    dateString = format(date, \"dd MMM, yyyy\", { locale })\n  }\n\n  return dateString\n}\n\ntype CalendarProps = {\n  fromYear?: number\n  toYear?: number\n  fromMonth?: Date\n  toMonth?: Date\n  fromDay?: Date\n  toDay?: Date\n  fromDate?: Date\n  toDate?: Date\n  locale?: Locale\n}\n\ntype Translations = {\n  cancel?: string\n  apply?: string\n  start?: string\n  end?: string\n  range?: string\n}\n\ninterface PickerProps extends CalendarProps {\n  className?: string\n  disabled?: boolean\n  disabledDays?: Matcher | Matcher[] | undefined\n  required?: boolean\n  showTimePicker?: boolean\n  placeholder?: string\n  enableYearNavigation?: boolean\n  disableNavigation?: boolean\n  hasError?: boolean\n  id?: string\n  // Customize the date picker for different languages.\n  translations?: Translations\n  align?: \"center\" | \"end\" | \"start\"\n  \"aria-invalid\"?: boolean\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  \"aria-required\"?: boolean\n}\n\n//#region Single Date Picker\n// ============================================================================\n\ninterface SingleProps extends Omit<PickerProps, \"translations\"> {\n  presets?: DatePreset[]\n  defaultValue?: Date\n  value?: Date\n  onChange?: (date: Date | undefined) => void\n  translations?: Omit<Translations, \"range\">\n}\n\nconst SingleDatePicker = ({\n  defaultValue,\n  value,\n  onChange,\n  presets,\n  disabled,\n  disabledDays,\n  disableNavigation,\n  className,\n  showTimePicker,\n  placeholder = \"Select date\",\n  hasError,\n  translations,\n  enableYearNavigation = false,\n  locale = enUS,\n  align = \"center\",\n  ...props\n}: SingleProps) => {\n  const [open, setOpen] = React.useState(false)\n  const [date, setDate] = React.useState<Date | undefined>(\n    value ?? defaultValue ?? undefined,\n  )\n  const [month, setMonth] = React.useState<Date | undefined>(date)\n\n  const [time, setTime] = React.useState<TimeValue | null>(\n    value\n      ? new Time(value.getHours(), value.getMinutes())\n      : defaultValue\n        ? new Time(defaultValue.getHours(), defaultValue.getMinutes())\n        : new Time(0, 0),\n  )\n\n  const initialDate = React.useMemo(() => {\n    return date\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open])\n\n  React.useEffect(() => {\n    setDate(value ?? defaultValue ?? undefined)\n  }, [value, defaultValue])\n\n  React.useEffect(() => {\n    if (date) {\n      setMonth(date)\n    }\n  }, [date])\n\n  React.useEffect(() => {\n    if (!open) {\n      setMonth(date)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open])\n\n  const onCancel = () => {\n    setDate(initialDate)\n    setTime(\n      initialDate\n        ? new Time(initialDate.getHours(), initialDate.getMinutes())\n        : new Time(0, 0),\n    )\n    setOpen(false)\n  }\n\n  const onOpenChange = (open: boolean) => {\n    if (!open) {\n      onCancel()\n    }\n\n    setOpen(open)\n  }\n\n  const onDateChange = (date: Date | undefined) => {\n    const newDate = date\n    if (showTimePicker) {\n      if (newDate && !time) {\n        setTime(new Time(0, 0))\n      }\n      if (newDate && time) {\n        newDate.setHours(time.hour)\n        newDate.setMinutes(time.minute)\n      }\n    }\n    setDate(newDate)\n  }\n\n  const onTimeChange = (time: TimeValue | null) => {\n    setTime(time)\n\n    if (!date) {\n      return\n    }\n\n    const newDate = new Date(date.getTime())\n\n    if (!time) {\n      newDate.setHours(0)\n      newDate.setMinutes(0)\n    } else {\n      newDate.setHours(time.hour)\n      newDate.setMinutes(time.minute)\n    }\n\n    setDate(newDate)\n  }\n\n  const formattedDate = React.useMemo(() => {\n    if (!date) {\n      return null\n    }\n\n    return formatDate(date, locale, showTimePicker)\n  }, [date, locale, showTimePicker])\n\n  const onApply = () => {\n    setOpen(false)\n    onChange?.(date)\n  }\n\n  React.useEffect(() => {\n    setDate(value ?? defaultValue ?? undefined)\n    setTime(\n      value\n        ? new Time(value.getHours(), value.getMinutes())\n        : defaultValue\n          ? new Time(defaultValue.getHours(), defaultValue.getMinutes())\n          : new Time(0, 0),\n    )\n  }, [value, defaultValue])\n\n  return (\n    <PopoverPrimitives.Root\n      tremor-id=\"tremor-raw\"\n      open={open}\n      onOpenChange={onOpenChange}\n    >\n      <Trigger\n        placeholder={placeholder}\n        disabled={disabled}\n        className={className}\n        hasError={hasError}\n        aria-required={props.required || props[\"aria-required\"]}\n        aria-invalid={props[\"aria-invalid\"]}\n        aria-label={props[\"aria-label\"]}\n        aria-labelledby={props[\"aria-labelledby\"]}\n      >\n        {formattedDate}\n      </Trigger>\n      <CalendarPopover align={align}>\n        <div className=\"flex\">\n          <div className=\"flex flex-col sm:flex-row sm:items-start\">\n            {presets && presets.length > 0 && (\n              <div\n                className={cx(\n                  \"relative flex h-14 w-full items-center sm:h-full sm:w-40\",\n                  \"border-b border-gray-200 sm:border-b-0 sm:border-r dark:border-gray-800\",\n                  \"overflow-auto\",\n                )}\n              >\n                <div className=\"absolute px-2 pr-2 sm:inset-0 sm:left-0 sm:py-2\">\n                  <PresetContainer\n                    currentValue={date}\n                    presets={presets}\n                    onSelect={onDateChange}\n                  />\n                </div>\n              </div>\n            )}\n            <div>\n              <CalendarPrimitive\n                mode=\"single\"\n                month={month}\n                onMonthChange={setMonth}\n                selected={date}\n                onSelect={onDateChange}\n                disabled={disabledDays}\n                locale={locale}\n                enableYearNavigation={enableYearNavigation}\n                disableNavigation={disableNavigation}\n                initialFocus\n                {...props}\n              />\n              {showTimePicker && (\n                <div className=\"border-t border-gray-200 p-3 dark:border-gray-800\">\n                  <TimeInput\n                    aria-label=\"Time\"\n                    onChange={onTimeChange}\n                    isDisabled={!date}\n                    value={time}\n                    isRequired={props.required}\n                  />\n                </div>\n              )}\n              <div className=\"flex items-center gap-x-2 border-t border-gray-200 p-3 dark:border-gray-800\">\n                <Button\n                  variant=\"secondary\"\n                  className=\"h-8 w-full\"\n                  type=\"button\"\n                  onClick={onCancel}\n                >\n                  {translations?.cancel ?? \"Cancel\"}\n                </Button>\n                <Button\n                  variant=\"primary\"\n                  className=\"h-8 w-full\"\n                  type=\"button\"\n                  onClick={onApply}\n                >\n                  {translations?.apply ?? \"Apply\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CalendarPopover>\n    </PopoverPrimitives.Root>\n  )\n}\n\n//#region Range Date Picker\n// ============================================================================\n\ninterface RangeProps extends PickerProps {\n  presets?: DateRangePreset[]\n  defaultValue?: DateRange\n  value?: DateRange\n  onChange?: (dateRange: DateRange | undefined) => void\n}\n\nconst RangeDatePicker = ({\n  defaultValue,\n  value,\n  onChange,\n  presets,\n  disabled,\n  disableNavigation,\n  disabledDays,\n  enableYearNavigation = false,\n  locale = enUS,\n  showTimePicker,\n  placeholder = \"Select date range\",\n  hasError,\n  translations,\n  align = \"center\",\n  className,\n  ...props\n}: RangeProps) => {\n  const [open, setOpen] = React.useState(false)\n  const [range, setRange] = React.useState<DateRange | undefined>(\n    value ?? defaultValue ?? undefined,\n  )\n  const [month, setMonth] = React.useState<Date | undefined>(range?.from)\n\n  const [startTime, setStartTime] = React.useState<TimeValue | null>(\n    value?.from\n      ? new Time(value.from.getHours(), value.from.getMinutes())\n      : defaultValue?.from\n        ? new Time(defaultValue.from.getHours(), defaultValue.from.getMinutes())\n        : new Time(0, 0),\n  )\n  const [endTime, setEndTime] = React.useState<TimeValue | null>(\n    value?.to\n      ? new Time(value.to.getHours(), value.to.getMinutes())\n      : defaultValue?.to\n        ? new Time(defaultValue.to.getHours(), defaultValue.to.getMinutes())\n        : new Time(0, 0),\n  )\n\n  const initialRange = React.useMemo(() => {\n    return range\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open])\n\n  React.useEffect(() => {\n    setRange(value ?? defaultValue ?? undefined)\n  }, [value, defaultValue])\n\n  React.useEffect(() => {\n    if (range) {\n      setMonth(range.from)\n    }\n  }, [range])\n\n  React.useEffect(() => {\n    if (!open) {\n      setMonth(range?.from)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open])\n\n  const onRangeChange = (range: DateRange | undefined) => {\n    const newRange = range\n    if (showTimePicker) {\n      if (newRange?.from && !startTime) {\n        setStartTime(new Time(0, 0))\n      }\n\n      if (newRange?.to && !endTime) {\n        setEndTime(new Time(0, 0))\n      }\n\n      if (newRange?.from && startTime) {\n        newRange.from.setHours(startTime.hour)\n        newRange.from.setMinutes(startTime.minute)\n      }\n\n      if (newRange?.to && endTime) {\n        newRange.to.setHours(endTime.hour)\n        newRange.to.setMinutes(endTime.minute)\n      }\n    }\n\n    setRange(newRange)\n  }\n\n  const onCancel = () => {\n    setRange(initialRange)\n    setStartTime(\n      initialRange?.from\n        ? new Time(initialRange.from.getHours(), initialRange.from.getMinutes())\n        : new Time(0, 0),\n    )\n    setEndTime(\n      initialRange?.to\n        ? new Time(initialRange.to.getHours(), initialRange.to.getMinutes())\n        : new Time(0, 0),\n    )\n    setOpen(false)\n  }\n\n  const onOpenChange = (open: boolean) => {\n    if (!open) {\n      onCancel()\n    }\n\n    setOpen(open)\n  }\n\n  const onTimeChange = (time: TimeValue | null, pos: \"start\" | \"end\") => {\n    switch (pos) {\n      case \"start\":\n        setStartTime(time)\n        break\n      case \"end\":\n        setEndTime(time)\n        break\n    }\n\n    if (!range) {\n      return\n    }\n\n    if (pos === \"start\") {\n      if (!range.from) {\n        return\n      }\n\n      const newDate = new Date(range.from.getTime())\n\n      if (!time) {\n        newDate.setHours(0)\n        newDate.setMinutes(0)\n      } else {\n        newDate.setHours(time.hour)\n        newDate.setMinutes(time.minute)\n      }\n\n      setRange({\n        ...range,\n        from: newDate,\n      })\n    }\n\n    if (pos === \"end\") {\n      if (!range.to) {\n        return\n      }\n\n      const newDate = new Date(range.to.getTime())\n\n      if (!time) {\n        newDate.setHours(0)\n        newDate.setMinutes(0)\n      } else {\n        newDate.setHours(time.hour)\n        newDate.setMinutes(time.minute)\n      }\n\n      setRange({\n        ...range,\n        to: newDate,\n      })\n    }\n  }\n\n  React.useEffect(() => {\n    setRange(value ?? defaultValue ?? undefined)\n\n    setStartTime(\n      value?.from\n        ? new Time(value.from.getHours(), value.from.getMinutes())\n        : defaultValue?.from\n          ? new Time(\n              defaultValue.from.getHours(),\n              defaultValue.from.getMinutes(),\n            )\n          : new Time(0, 0),\n    )\n    setEndTime(\n      value?.to\n        ? new Time(value.to.getHours(), value.to.getMinutes())\n        : defaultValue?.to\n          ? new Time(defaultValue.to.getHours(), defaultValue.to.getMinutes())\n          : new Time(0, 0),\n    )\n  }, [value, defaultValue])\n\n  const displayRange = React.useMemo(() => {\n    if (!range) {\n      return null\n    }\n\n    return `${range.from ? formatDate(range.from, locale, showTimePicker) : \"\"} - ${\n      range.to ? formatDate(range.to, locale, showTimePicker) : \"\"\n    }`\n  }, [range, locale, showTimePicker])\n\n  const onApply = () => {\n    setOpen(false)\n    onChange?.(range)\n  }\n\n  return (\n    <PopoverPrimitives.Root\n      tremor-id=\"tremor-raw\"\n      open={open}\n      onOpenChange={onOpenChange}\n    >\n      <Trigger\n        placeholder={placeholder}\n        disabled={disabled}\n        className={className}\n        hasError={hasError}\n        aria-required={props.required || props[\"aria-required\"]}\n        aria-invalid={props[\"aria-invalid\"]}\n        aria-label={props[\"aria-label\"]}\n        aria-labelledby={props[\"aria-labelledby\"]}\n      >\n        {displayRange}\n      </Trigger>\n      <CalendarPopover align={align}>\n        <div className=\"flex\">\n          <div className=\"flex flex-col overflow-x-auto sm:flex-row sm:items-start\">\n            {presets && presets.length > 0 && (\n              <div\n                className={cx(\n                  \"relative flex h-16 w-full items-center sm:h-full sm:w-40\",\n                  \"border-b border-gray-200 sm:border-b-0 sm:border-r dark:border-gray-800\",\n                  \"overflow-auto\",\n                )}\n              >\n                <div className=\"absolute px-3 sm:inset-0 sm:left-0 sm:p-2\">\n                  <PresetContainer\n                    currentValue={range}\n                    presets={presets}\n                    onSelect={onRangeChange}\n                  />\n                </div>\n              </div>\n            )}\n            <div className=\"overflow-x-auto\">\n              <CalendarPrimitive\n                mode=\"range\"\n                selected={range}\n                onSelect={onRangeChange}\n                month={month}\n                onMonthChange={setMonth}\n                numberOfMonths={2}\n                disabled={disabledDays}\n                disableNavigation={disableNavigation}\n                enableYearNavigation={enableYearNavigation}\n                locale={locale}\n                initialFocus\n                classNames={{\n                  months:\n                    \"flex flex-row divide-x divide-gray-200 dark:divide-gray-800 overflow-x-auto\",\n                }}\n                {...props}\n              />\n              {showTimePicker && (\n                <div className=\"flex items-center justify-evenly gap-x-3 border-t border-gray-200 p-3 dark:border-gray-800\">\n                  <div className=\"flex flex-1 items-center gap-x-2\">\n                    <span className=\"dark:text-gray-30 text-gray-700\">\n                      {translations?.start ?? \"Start\"}:\n                    </span>\n                    <TimeInput\n                      value={startTime}\n                      onChange={(v) => onTimeChange(v, \"start\")}\n                      aria-label=\"Start date time\"\n                      isDisabled={!range?.from}\n                      isRequired={props.required}\n                    />\n                  </div>\n                  <RiSubtractFill className=\"size-4 shrink-0 text-gray-400\" />\n                  <div className=\"flex flex-1 items-center gap-x-2\">\n                    <span className=\"dark:text-gray-30 text-gray-700\">\n                      {translations?.end ?? \"End\"}:\n                    </span>\n                    <TimeInput\n                      value={endTime}\n                      onChange={(v) => onTimeChange(v, \"end\")}\n                      aria-label=\"End date time\"\n                      isDisabled={!range?.to}\n                      isRequired={props.required}\n                    />\n                  </div>\n                </div>\n              )}\n              <div className=\"border-t border-gray-200 p-3 sm:flex sm:items-center sm:justify-between dark:border-gray-800\">\n                <p className=\"tabular-nums text-gray-900 dark:text-gray-50\">\n                  <span className=\"text-gray-700 dark:text-gray-300\">\n                    {translations?.range ?? \"Range\"}:\n                  </span>{\" \"}\n                  <span className=\"font-medium\">{displayRange}</span>\n                </p>\n                <div className=\"mt-2 flex items-center gap-x-2 sm:mt-0\">\n                  <Button\n                    variant=\"secondary\"\n                    className=\"h-8 w-full sm:w-fit\"\n                    type=\"button\"\n                    onClick={onCancel}\n                  >\n                    {translations?.cancel ?? \"Cancel\"}\n                  </Button>\n                  <Button\n                    variant=\"primary\"\n                    className=\"h-8 w-full sm:w-fit\"\n                    type=\"button\"\n                    onClick={onApply}\n                  >\n                    {translations?.apply ?? \"Apply\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CalendarPopover>\n    </PopoverPrimitives.Root>\n  )\n}\n\n//#region Preset Validation\n// ============================================================================\n\nconst validatePresets = (\n  presets: DateRangePreset[] | DatePreset[],\n  rules: PickerProps,\n) => {\n  const { toYear, fromYear, fromMonth, toMonth, fromDay, toDay } = rules\n\n  if (presets && presets.length > 0) {\n    const fromYearToUse = fromYear\n    const toYearToUse = toYear\n\n    presets.forEach((preset) => {\n      if (\"date\" in preset) {\n        const presetYear = preset.date.getFullYear()\n\n        if (fromYear && presetYear < fromYear) {\n          throw new Error(\n            `Preset ${preset.label} is before fromYear ${fromYearToUse}.`,\n          )\n        }\n\n        if (toYear && presetYear > toYear) {\n          throw new Error(\n            `Preset ${preset.label} is after toYear ${toYearToUse}.`,\n          )\n        }\n\n        if (fromMonth) {\n          const presetMonth = preset.date.getMonth()\n\n          if (presetMonth < fromMonth.getMonth()) {\n            throw new Error(\n              `Preset ${preset.label} is before fromMonth ${fromMonth}.`,\n            )\n          }\n        }\n\n        if (toMonth) {\n          const presetMonth = preset.date.getMonth()\n\n          if (presetMonth > toMonth.getMonth()) {\n            throw new Error(\n              `Preset ${preset.label} is after toMonth ${toMonth}.`,\n            )\n          }\n        }\n\n        if (fromDay) {\n          const presetDay = preset.date.getDate()\n\n          if (presetDay < fromDay.getDate()) {\n            throw new Error(\n              `Preset ${preset.label} is before fromDay ${fromDay}.`,\n            )\n          }\n        }\n\n        if (toDay) {\n          const presetDay = preset.date.getDate()\n\n          if (presetDay > toDay.getDate()) {\n            throw new Error(\n              `Preset ${preset.label} is after toDay ${format(\n                toDay,\n                \"MMM dd, yyyy\",\n              )}.`,\n            )\n          }\n        }\n      }\n\n      if (\"dateRange\" in preset) {\n        const presetFromYear = preset.dateRange.from?.getFullYear()\n        const presetToYear = preset.dateRange.to?.getFullYear()\n\n        if (presetFromYear && fromYear && presetFromYear < fromYear) {\n          throw new Error(\n            `Preset ${preset.label}'s 'from' is before fromYear ${fromYearToUse}.`,\n          )\n        }\n\n        if (presetToYear && toYear && presetToYear > toYear) {\n          throw new Error(\n            `Preset ${preset.label}'s 'to' is after toYear ${toYearToUse}.`,\n          )\n        }\n\n        if (fromMonth) {\n          const presetMonth = preset.dateRange.from?.getMonth()\n\n          if (presetMonth && presetMonth < fromMonth.getMonth()) {\n            throw new Error(\n              `Preset ${preset.label}'s 'from' is before fromMonth ${format(\n                fromMonth,\n                \"MMM, yyyy\",\n              )}.`,\n            )\n          }\n        }\n\n        if (toMonth) {\n          const presetMonth = preset.dateRange.to?.getMonth()\n\n          if (presetMonth && presetMonth > toMonth.getMonth()) {\n            throw new Error(\n              `Preset ${preset.label}'s 'to' is after toMonth ${format(\n                toMonth,\n                \"MMM, yyyy\",\n              )}.`,\n            )\n          }\n        }\n\n        if (fromDay) {\n          const presetDay = preset.dateRange.from?.getDate()\n\n          if (presetDay && presetDay < fromDay.getDate()) {\n            throw new Error(\n              `Preset ${\n                preset.dateRange.from\n              }'s 'from' is before fromDay ${format(fromDay, \"MMM dd, yyyy\")}.`,\n            )\n          }\n        }\n\n        if (toDay) {\n          const presetDay = preset.dateRange.to?.getDate()\n\n          if (presetDay && presetDay > toDay.getDate()) {\n            throw new Error(\n              `Preset ${preset.label}'s 'to' is after toDay ${format(\n                toDay,\n                \"MMM dd, yyyy\",\n              )}.`,\n            )\n          }\n        }\n      }\n    })\n  }\n}\n\n//#region Types & Exports\n// ============================================================================\n\ntype SingleDatePickerProps = {\n  presets?: DatePreset[]\n  defaultValue?: Date\n  value?: Date\n  onChange?: (date: Date | undefined) => void\n} & PickerProps\n\nconst DatePicker = ({ presets, ...props }: SingleDatePickerProps) => {\n  if (presets) {\n    validatePresets(presets, props)\n  }\n\n  return <SingleDatePicker presets={presets} {...(props as SingleProps)} />\n}\n\nDatePicker.displayName = \"DatePicker\"\n\ntype RangeDatePickerProps = {\n  presets?: DateRangePreset[]\n  defaultValue?: DateRange\n  value?: DateRange\n  onChange?: (dateRange: DateRange | undefined) => void\n} & PickerProps\n\nconst DateRangePicker = ({ presets, ...props }: RangeDatePickerProps) => {\n  if (presets) {\n    validatePresets(presets, props)\n  }\n\n  return <RangeDatePicker presets={presets} {...(props as RangeProps)} />\n}\n\nDateRangePicker.displayName = \"DateRangePicker\"\n\nexport {\n  DatePicker,\n  DateRangePicker,\n  type DatePreset,\n  type DateRange,\n  type DateRangePreset,\n}\n",
      "type": "registry:component"
    }
  ]
}