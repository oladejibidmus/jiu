{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "line-chart",
  "type": "registry:component",
  "title": "Line Chart",
  "description": "A line chart component.",
  "files": [
    {
      "path": "src/components/LineChart.tsx",
      "content": "// Tremor Raw LineChart [v0.0.0]\n\n\"use client\"\n\nimport { RiArrowLeftSLine, RiArrowRightSLine } from \"@remixicon/react\"\nimport React from \"react\"\nimport {\n  CartesianGrid,\n  Dot,\n  Label,\n  Line,\n  Legend as RechartsLegend,\n  LineChart as RechartsLineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\"\nimport { AxisDomain } from \"recharts/types/util/types\"\n\nimport {\n  AvailableChartColors,\n  AvailableChartColorsKeys,\n  constructCategoryColors,\n  getColorClassName,\n  getYAxisDomain,\n  hasOnlyOneValueForKey,\n} from \"@/lib/chartUtils\"\nimport { useOnWindowResize } from \"@/lib/useOnWindowResize\"\nimport { cx, percentageFormatter } from \"@/lib/utils\"\nimport { Badge } from \"./Badge\"\nimport { getBadgeType } from \"./ui/overview/DashboardChartCard\"\n\n//#region Legend\n\ninterface LegendItemProps {\n  name: string\n  color: AvailableChartColorsKeys\n  onClick?: (name: string, color: AvailableChartColorsKeys) => void\n  activeLegend?: string\n}\n\nconst LegendItem = ({\n  name,\n  color,\n  onClick,\n  activeLegend,\n}: LegendItemProps) => {\n  const hasOnValueChange = !!onClick\n  return (\n    <li\n      className={cx(\n        // base\n        \"group inline-flex flex-nowrap items-center gap-1.5 whitespace-nowrap rounded px-2 py-1 transition\",\n        hasOnValueChange\n          ? \"bg-transpaent cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800\"\n          : \"cursor-default\",\n      )}\n      onClick={(e) => {\n        e.stopPropagation()\n        onClick?.(name, color)\n      }}\n    >\n      <span\n        className={cx(\n          \"h-[3px] w-3.5 shrink-0 rounded-full\",\n          getColorClassName(color, \"bg\"),\n          activeLegend && activeLegend !== name ? \"opacity-40\" : \"opacity-100\",\n        )}\n        aria-hidden=\"true\"\n      />\n      <p\n        className={cx(\n          // base\n          \"truncate whitespace-nowrap text-xs\",\n          // text color\n          \"text-gray-700 dark:text-gray-300\",\n          hasOnValueChange &&\n            \"group-hover:text-gray-900 dark:group-hover:text-gray-50\",\n          activeLegend && activeLegend !== name ? \"opacity-40\" : \"opacity-100\",\n        )}\n      >\n        {name}\n      </p>\n    </li>\n  )\n}\n\ninterface ScrollButtonProps {\n  icon: React.ElementType\n  onClick?: () => void\n  disabled?: boolean\n}\n\nconst ScrollButton = ({ icon, onClick, disabled }: ScrollButtonProps) => {\n  const Icon = icon\n  const [isPressed, setIsPressed] = React.useState(false)\n  const intervalRef = React.useRef<NodeJS.Timeout | null>(null)\n\n  React.useEffect(() => {\n    if (isPressed) {\n      intervalRef.current = setInterval(() => {\n        onClick?.()\n      }, 300)\n    } else {\n      clearInterval(intervalRef.current as NodeJS.Timeout)\n    }\n    return () => clearInterval(intervalRef.current as NodeJS.Timeout)\n  }, [isPressed, onClick])\n\n  React.useEffect(() => {\n    if (disabled) {\n      clearInterval(intervalRef.current as NodeJS.Timeout)\n      setIsPressed(false)\n    }\n  }, [disabled])\n\n  return (\n    <button\n      type=\"button\"\n      className={cx(\n        // base\n        \"group inline-flex size-5 items-center truncate rounded transition\",\n        disabled\n          ? \"cursor-not-allowed text-gray-400 dark:text-gray-600\"\n          : \"cursor-pointer text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-gray-50\",\n      )}\n      disabled={disabled}\n      onClick={(e) => {\n        e.stopPropagation()\n        onClick?.()\n      }}\n      onMouseDown={(e) => {\n        e.stopPropagation()\n        setIsPressed(true)\n      }}\n      onMouseUp={(e) => {\n        e.stopPropagation()\n        setIsPressed(false)\n      }}\n    >\n      <Icon className=\"size-full\" aria-hidden=\"true\" />\n    </button>\n  )\n}\n\ninterface LegendProps extends React.OlHTMLAttributes<HTMLOListElement> {\n  categories: string[]\n  colors?: AvailableChartColorsKeys[]\n  onClickLegendItem?: (category: string, color: string) => void\n  activeLegend?: string\n  enableLegendSlider?: boolean\n}\n\ntype HasScrollProps = {\n  left: boolean\n  right: boolean\n}\n\nconst Legend = React.forwardRef<HTMLOListElement, LegendProps>((props, ref) => {\n  const {\n    categories,\n    colors = AvailableChartColors,\n    className,\n    onClickLegendItem,\n    activeLegend,\n    enableLegendSlider = false,\n    ...other\n  } = props\n  const scrollableRef = React.useRef<HTMLInputElement>(null)\n  const [hasScroll, setHasScroll] = React.useState<HasScrollProps | null>(null)\n  const [isKeyDowned, setIsKeyDowned] = React.useState<string | null>(null)\n  const intervalRef = React.useRef<NodeJS.Timeout | null>(null)\n\n  const checkScroll = React.useCallback(() => {\n    const scrollable = scrollableRef?.current\n    if (!scrollable) return\n\n    const hasLeftScroll = scrollable.scrollLeft > 0\n    const hasRightScroll =\n      scrollable.scrollWidth - scrollable.clientWidth > scrollable.scrollLeft\n\n    setHasScroll({ left: hasLeftScroll, right: hasRightScroll })\n  }, [setHasScroll])\n\n  const scrollToTest = React.useCallback(\n    (direction: \"left\" | \"right\") => {\n      const element = scrollableRef?.current\n      const width = element?.clientWidth ?? 0\n\n      if (element && enableLegendSlider) {\n        element.scrollTo({\n          left:\n            direction === \"left\"\n              ? element.scrollLeft - width\n              : element.scrollLeft + width,\n          behavior: \"smooth\",\n        })\n        setTimeout(() => {\n          checkScroll()\n        }, 400)\n      }\n    },\n    [enableLegendSlider, checkScroll],\n  )\n\n  React.useEffect(() => {\n    const keyDownHandler = (key: string) => {\n      if (key === \"ArrowLeft\") {\n        scrollToTest(\"left\")\n      } else if (key === \"ArrowRight\") {\n        scrollToTest(\"right\")\n      }\n    }\n    if (isKeyDowned) {\n      keyDownHandler(isKeyDowned)\n      intervalRef.current = setInterval(() => {\n        keyDownHandler(isKeyDowned)\n      }, 300)\n    } else {\n      clearInterval(intervalRef.current as NodeJS.Timeout)\n    }\n    return () => clearInterval(intervalRef.current as NodeJS.Timeout)\n  }, [isKeyDowned, scrollToTest])\n\n  const keyDown = (e: KeyboardEvent) => {\n    e.stopPropagation()\n    if (e.key === \"ArrowLeft\" || e.key === \"ArrowRight\") {\n      e.preventDefault()\n      setIsKeyDowned(e.key)\n    }\n  }\n  const keyUp = (e: KeyboardEvent) => {\n    e.stopPropagation()\n    setIsKeyDowned(null)\n  }\n\n  React.useEffect(() => {\n    const scrollable = scrollableRef?.current\n    if (enableLegendSlider) {\n      checkScroll()\n      scrollable?.addEventListener(\"keydown\", keyDown)\n      scrollable?.addEventListener(\"keyup\", keyUp)\n    }\n\n    return () => {\n      scrollable?.removeEventListener(\"keydown\", keyDown)\n      scrollable?.removeEventListener(\"keyup\", keyUp)\n    }\n  }, [checkScroll, enableLegendSlider])\n\n  return (\n    <ol\n      ref={ref}\n      className={cx(\"relative overflow-hidden\", className)}\n      {...other}\n    >\n      <div\n        ref={scrollableRef}\n        tabIndex={0}\n        className={cx(\n          \"flex h-full\",\n          enableLegendSlider\n            ? hasScroll?.right || hasScroll?.left\n              ? \"snap-mandatory items-center overflow-auto pl-4 pr-12 [scrollbar-width:none] [&::-webkit-scrollbar]:hidden\"\n              : \"\"\n            : \"flex-wrap\",\n        )}\n      >\n        {categories.map((category, index) => (\n          <LegendItem\n            key={`item-${index}`}\n            name={category}\n            color={colors[index] as AvailableChartColorsKeys}\n            onClick={onClickLegendItem}\n            activeLegend={activeLegend}\n          />\n        ))}\n      </div>\n      {enableLegendSlider && (hasScroll?.right || hasScroll?.left) ? (\n        <>\n          <div\n            className={cx(\n              // base\n              \"absolute bottom-0 right-0 top-0 flex h-full items-center justify-center pr-1\",\n              // background color\n              \"bg-white dark:bg-gray-950\",\n            )}\n          >\n            <ScrollButton\n              icon={RiArrowLeftSLine}\n              onClick={() => {\n                setIsKeyDowned(null)\n                scrollToTest(\"left\")\n              }}\n              disabled={!hasScroll?.left}\n            />\n            <ScrollButton\n              icon={RiArrowRightSLine}\n              onClick={() => {\n                setIsKeyDowned(null)\n                scrollToTest(\"right\")\n              }}\n              disabled={!hasScroll?.right}\n            />\n          </div>\n        </>\n      ) : null}\n    </ol>\n  )\n})\n\nLegend.displayName = \"Legend\"\n\nconst ChartLegend = (\n  { payload }: any,\n  categoryColors: Map<string, AvailableChartColorsKeys>,\n  setLegendHeight: React.Dispatch<React.SetStateAction<number>>,\n  activeLegend: string | undefined,\n  onClick?: (category: string, color: string) => void,\n  enableLegendSlider?: boolean,\n) => {\n  const legendRef = React.useRef<HTMLDivElement>(null)\n\n  useOnWindowResize(() => {\n    const calculateHeight = (height: number | undefined) =>\n      height ? Number(height) + 15 : 60\n    setLegendHeight(calculateHeight(legendRef.current?.clientHeight))\n  })\n\n  const filteredPayload = payload.filter((item: any) => item.type !== \"none\")\n\n  return (\n    <div ref={legendRef} className=\"flex items-center justify-end\">\n      <Legend\n        categories={filteredPayload.map((entry: any) => entry.value)}\n        colors={filteredPayload.map((entry: any) =>\n          categoryColors.get(entry.value),\n        )}\n        onClickLegendItem={onClick}\n        activeLegend={activeLegend}\n        enableLegendSlider={enableLegendSlider}\n      />\n    </div>\n  )\n}\n\n//#region Tooltip\n\ninterface ChartTooltipRowProps {\n  value: string\n  name: string\n  color: string\n}\n\nconst ChartTooltipRow = ({ value, name, color }: ChartTooltipRowProps) => (\n  <div className=\"flex items-center justify-between space-x-8\">\n    <div className=\"flex items-center space-x-2\">\n      <span\n        aria-hidden=\"true\"\n        className={cx(\"h-[3px] w-3.5 shrink-0 rounded-full\", color)}\n      />\n      <p\n        className={cx(\n          // commmon\n          \"whitespace-nowrap text-right\",\n          // text color\n          \"text-gray-700 dark:text-gray-300\",\n        )}\n      >\n        {name}\n      </p>\n    </div>\n    <p\n      className={cx(\n        // base\n        \"whitespace-nowrap text-right font-medium tabular-nums\",\n        // text color\n        \"text-gray-900 dark:text-gray-50\",\n      )}\n    >\n      {value}\n    </p>\n  </div>\n)\n\ninterface ChartTooltipProps {\n  active: boolean | undefined\n  payload: any\n  label: string\n  categoryColors: Map<string, string>\n  valueFormatter: (value: number) => string\n}\n\nconst OverviewChartTooltip = ({\n  active,\n  payload,\n  categoryColors,\n  valueFormatter,\n}: ChartTooltipProps) => {\n  if (active && payload) {\n    const filteredPayload = payload.filter((item: any) => item.type !== \"none\")\n\n    if (!active || !payload) return null\n\n    const title = payload[0].payload.title\n    const evolution = payload[0].payload.evolution\n    if (!title) return null\n\n    return (\n      <div\n        className={cx(\n          // base\n          \"rounded-md border text-sm shadow-md\",\n          // border color\n          \"border-gray-200 dark:border-gray-800\",\n          // background color\n          \"bg-white dark:bg-gray-950\",\n        )}\n      >\n        <div className=\"flex items-start justify-between gap-2 border-b border-inherit p-2\">\n          <p\n            className={cx(\n              // base\n              \"font-medium\",\n              // text color\n              \"text-gray-900 dark:text-gray-50\",\n            )}\n          >\n            {title}\n          </p>\n          {evolution !== undefined && (\n            <Badge variant={getBadgeType(evolution)}>\n              {percentageFormatter(evolution)}\n            </Badge>\n          )}\n        </div>\n        <div className={cx(\"space-y-1 p-2\")}>\n          {filteredPayload.map((payload: any, index: number) => {\n            const payloadData = payload.payload\n            return (\n              <ChartTooltipRow\n                key={`id-${index}`}\n                value={valueFormatter(payload.value)}\n                name={\n                  index === 0\n                    ? payloadData.formattedDate\n                    : payloadData.previousFormattedDate\n                }\n                color={getColorClassName(\n                  categoryColors.get(payload.name) as AvailableChartColorsKeys,\n                  \"bg\",\n                )}\n              />\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n  return null\n}\n\n//#region LineChart\n\ninterface ActiveDot {\n  index?: number\n  dataKey?: string\n}\n\ntype BaseEventProps = {\n  eventType: \"dot\" | \"category\"\n  categoryClicked: string\n  [key: string]: number | string\n}\n\ntype LineChartEventProps = BaseEventProps | null | undefined\n\ninterface LineChartProps extends React.HTMLAttributes<HTMLDivElement> {\n  data: Record<string, any>[]\n  index: string\n  categories: string[]\n  colors?: AvailableChartColorsKeys[]\n  valueFormatter?: (value: number) => string\n  startEndOnly?: boolean\n  showXAxis?: boolean\n  showYAxis?: boolean\n  showGridLines?: boolean\n  yAxisWidth?: number\n  intervalType?: \"preserveStartEnd\" | \"equidistantPreserveStart\"\n  showTooltip?: boolean\n  showLegend?: boolean\n  autoMinValue?: boolean\n  minValue?: number\n  maxValue?: number\n  allowDecimals?: boolean\n  onValueChange?: (value: LineChartEventProps) => void\n  enableLegendSlider?: boolean\n  tickGap?: number\n  connectNulls?: boolean\n  xAxisLabel?: string\n  yAxisLabel?: string\n}\n\nconst LineChart = React.forwardRef<HTMLDivElement, LineChartProps>(\n  (props, ref) => {\n    const {\n      data = [],\n      categories = [],\n      index,\n      colors = AvailableChartColors,\n      valueFormatter = (value: number) => value.toString(),\n      startEndOnly = false,\n      showXAxis = true,\n      showYAxis = true,\n      showGridLines = true,\n      yAxisWidth = 56,\n      intervalType = \"equidistantPreserveStart\",\n      showTooltip = true,\n      showLegend = true,\n      autoMinValue = false,\n      minValue,\n      maxValue,\n      allowDecimals = true,\n      connectNulls = false,\n      className,\n      onValueChange,\n      enableLegendSlider = false,\n      tickGap = 5,\n      xAxisLabel,\n      yAxisLabel,\n      ...other\n    } = props\n    const paddingValue = !showXAxis && !showYAxis ? 0 : 20\n    const [legendHeight, setLegendHeight] = React.useState(60)\n    const [activeDot, setActiveDot] = React.useState<ActiveDot | undefined>(\n      undefined,\n    )\n    const [activeLegend, setActiveLegend] = React.useState<string | undefined>(\n      undefined,\n    )\n    const categoryColors = constructCategoryColors(categories, colors)\n\n    const yAxisDomain = getYAxisDomain(autoMinValue, minValue, maxValue)\n    const hasOnValueChange = !!onValueChange\n\n    function onDotClick(itemData: any, event: React.MouseEvent) {\n      event.stopPropagation()\n\n      if (!hasOnValueChange) return\n      if (\n        (itemData.index === activeDot?.index &&\n          itemData.dataKey === activeDot?.dataKey) ||\n        (hasOnlyOneValueForKey(data, itemData.dataKey) &&\n          activeLegend &&\n          activeLegend === itemData.dataKey)\n      ) {\n        setActiveLegend(undefined)\n        setActiveDot(undefined)\n        onValueChange?.(null)\n      } else {\n        setActiveLegend(itemData.dataKey)\n        setActiveDot({\n          index: itemData.index,\n          dataKey: itemData.dataKey,\n        })\n        onValueChange?.({\n          eventType: \"dot\",\n          categoryClicked: itemData.dataKey,\n          ...itemData.payload,\n        })\n      }\n    }\n\n    function onCategoryClick(dataKey: string) {\n      if (!hasOnValueChange) return\n      if (\n        (dataKey === activeLegend && !activeDot) ||\n        (hasOnlyOneValueForKey(data, dataKey) &&\n          activeDot &&\n          activeDot.dataKey === dataKey)\n      ) {\n        setActiveLegend(undefined)\n        onValueChange?.(null)\n      } else {\n        setActiveLegend(dataKey)\n        onValueChange?.({\n          eventType: \"category\",\n          categoryClicked: dataKey,\n        })\n      }\n      setActiveDot(undefined)\n    }\n\n    return (\n      <div ref={ref} className={cx(\"h-80 w-full\", className)} {...other}>\n        <ResponsiveContainer>\n          <RechartsLineChart\n            data={data}\n            onClick={\n              hasOnValueChange && (activeLegend || activeDot)\n                ? () => {\n                    setActiveDot(undefined)\n                    setActiveLegend(undefined)\n                    onValueChange?.(null)\n                  }\n                : undefined\n            }\n            margin={{\n              bottom: xAxisLabel ? 30 : undefined,\n              left: yAxisLabel ? 20 : undefined,\n              right: yAxisLabel ? 5 : undefined,\n              top: 0,\n            }}\n          >\n            {showGridLines ? (\n              <CartesianGrid\n                className={cx(\"stroke-gray-200 stroke-1 dark:stroke-gray-800\")}\n                horizontal={true}\n                vertical={false}\n              />\n            ) : null}\n            <XAxis\n              padding={{ left: paddingValue, right: paddingValue }}\n              hide={!showXAxis}\n              dataKey={index}\n              interval={startEndOnly ? \"preserveStartEnd\" : intervalType}\n              tick={{ transform: \"translate(0, 6)\" }}\n              ticks={\n                startEndOnly\n                  ? [data[0][index], data[data.length - 1][index]]\n                  : undefined\n              }\n              fill=\"\"\n              stroke=\"\"\n              className={cx(\n                // base\n                \"text-xs\",\n                // text fill\n                \"fill-gray-500 dark:fill-gray-500\",\n              )}\n              tickLine={false}\n              axisLine={false}\n              minTickGap={tickGap}\n            >\n              {xAxisLabel && (\n                <Label\n                  position=\"insideBottom\"\n                  offset={-20}\n                  className=\"fill-gray-800 text-sm font-medium dark:fill-gray-200\"\n                >\n                  {xAxisLabel}\n                </Label>\n              )}\n            </XAxis>\n            <YAxis\n              width={yAxisWidth}\n              hide={!showYAxis}\n              axisLine={false}\n              tickLine={false}\n              type=\"number\"\n              domain={yAxisDomain as AxisDomain}\n              tick={{ transform: \"translate(-3, 0)\" }}\n              fill=\"\"\n              stroke=\"\"\n              className={cx(\n                // base\n                \"text-xs\",\n                // text fill\n                \"fill-gray-500 dark:fill-gray-500\",\n              )}\n              tickFormatter={valueFormatter}\n              allowDecimals={allowDecimals}\n            >\n              {yAxisLabel && (\n                <Label\n                  position=\"insideLeft\"\n                  style={{ textAnchor: \"middle\" }}\n                  angle={-90}\n                  offset={-15}\n                  className=\"fill-gray-800 text-sm font-medium dark:fill-gray-200\"\n                >\n                  {yAxisLabel}\n                </Label>\n              )}\n            </YAxis>\n            <Tooltip\n              wrapperStyle={{ outline: \"none\" }}\n              isAnimationActive={true}\n              animationDuration={100}\n              cursor={{ stroke: \"#d1d5db\", strokeWidth: 1 }}\n              offset={20}\n              position={{ y: 0 }}\n              content={\n                showTooltip ? (\n                  ({ active, payload, label }) => (\n                    <OverviewChartTooltip\n                      active={active}\n                      payload={payload}\n                      label={label}\n                      valueFormatter={valueFormatter}\n                      categoryColors={categoryColors}\n                    />\n                  )\n                ) : (\n                  <></>\n                )\n              }\n            />\n            {showLegend ? (\n              <RechartsLegend\n                verticalAlign=\"top\"\n                height={legendHeight}\n                content={({ payload }) =>\n                  ChartLegend(\n                    { payload },\n                    categoryColors,\n                    setLegendHeight,\n                    activeLegend,\n                    hasOnValueChange\n                      ? (clickedLegendItem: string) =>\n                          onCategoryClick(clickedLegendItem)\n                      : undefined,\n                    enableLegendSlider,\n                  )\n                }\n              />\n            ) : null}\n            {categories.map((category) => (\n              <Line\n                className={cx(\n                  getColorClassName(\n                    categoryColors.get(category) as AvailableChartColorsKeys,\n                    \"stroke\",\n                  ),\n                )}\n                strokeOpacity={\n                  activeDot || (activeLegend && activeLegend !== category)\n                    ? 0.3\n                    : 1\n                }\n                activeDot={(props: any) => {\n                  const {\n                    cx: cxCoord,\n                    cy: cyCoord,\n                    stroke,\n                    strokeLinecap,\n                    strokeLinejoin,\n                    strokeWidth,\n                    dataKey,\n                  } = props\n                  return (\n                    <Dot\n                      className={cx(\n                        \"stroke-white dark:stroke-gray-950\",\n                        onValueChange ? \"cursor-pointer\" : \"\",\n                        getColorClassName(\n                          categoryColors.get(\n                            dataKey,\n                          ) as AvailableChartColorsKeys,\n                          \"fill\",\n                        ),\n                      )}\n                      cx={cxCoord}\n                      cy={cyCoord}\n                      r={5}\n                      fill=\"\"\n                      stroke={stroke}\n                      strokeLinecap={strokeLinecap}\n                      strokeLinejoin={strokeLinejoin}\n                      strokeWidth={strokeWidth}\n                      onClick={(_, event) => onDotClick(props, event)}\n                    />\n                  )\n                }}\n                dot={(props: any) => {\n                  const {\n                    stroke,\n                    strokeLinecap,\n                    strokeLinejoin,\n                    strokeWidth,\n                    cx: cxCoord,\n                    cy: cyCoord,\n                    dataKey,\n                    index,\n                  } = props\n\n                  if (\n                    (hasOnlyOneValueForKey(data, category) &&\n                      !(\n                        activeDot ||\n                        (activeLegend && activeLegend !== category)\n                      )) ||\n                    (activeDot?.index === index &&\n                      activeDot?.dataKey === category)\n                  ) {\n                    return (\n                      <Dot\n                        key={index}\n                        cx={cxCoord}\n                        cy={cyCoord}\n                        r={5}\n                        stroke={stroke}\n                        fill=\"\"\n                        strokeLinecap={strokeLinecap}\n                        strokeLinejoin={strokeLinejoin}\n                        strokeWidth={strokeWidth}\n                        className={cx(\n                          \"stroke-white dark:stroke-gray-950\",\n                          onValueChange ? \"cursor-pointer\" : \"\",\n                          getColorClassName(\n                            categoryColors.get(\n                              dataKey,\n                            ) as AvailableChartColorsKeys,\n                            \"fill\",\n                          ),\n                        )}\n                      />\n                    )\n                  }\n                  return <React.Fragment key={index}></React.Fragment>\n                }}\n                key={category}\n                name={category}\n                type=\"linear\"\n                dataKey={category}\n                stroke=\"\"\n                strokeWidth={2}\n                strokeLinejoin=\"round\"\n                strokeLinecap=\"round\"\n                isAnimationActive={false}\n                connectNulls={connectNulls}\n              />\n            ))}\n            {/* hidden lines to increase clickable target area */}\n            {onValueChange\n              ? categories.map((category) => (\n                  <Line\n                    className={cx(\"cursor-pointer\")}\n                    strokeOpacity={0}\n                    key={category}\n                    name={category}\n                    type=\"linear\"\n                    dataKey={category}\n                    stroke=\"transparent\"\n                    fill=\"transparent\"\n                    legendType=\"none\"\n                    tooltipType=\"none\"\n                    strokeWidth={12}\n                    connectNulls={connectNulls}\n                    onClick={(props: any, event) => {\n                      event.stopPropagation()\n                      const { name } = props\n                      onCategoryClick(name)\n                    }}\n                  />\n                ))\n              : null}\n          </RechartsLineChart>\n        </ResponsiveContainer>\n      </div>\n    )\n  },\n)\n\nLineChart.displayName = \"LineChart\"\n\nexport { LineChart, type LineChartEventProps }\n",
      "type": "registry:component"
    }
  ]
}